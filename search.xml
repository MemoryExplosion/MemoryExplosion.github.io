<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>centos7下多机集群时间同步设定</title>
      <link href="/2019/07/17/centos7%E4%B8%8B%E5%A4%9A%E6%9C%BA%E9%9B%86%E7%BE%A4%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E8%AE%BE%E5%AE%9A/"/>
      <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 请输入密码 " /> <label for="pass"> 请输入密码 </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
    </entry>
    
    <entry>
      <title>项目开发中数据库哪些雷区不能踩?</title>
      <link href="/2019/07/06/MySql%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<p>摘要:<br>本篇整理了平时开发过程中关于数据库开发的规范性问题，仅供参考。<br><a id="more"></a><br>正文:</p><p><font color="#FFD700" size="5">1.数据库设计规范</font></p><p>1.1.所有数据库的对象名称都必须为小写字母，并且使用下划线进行分割。</p><p>1.2.所有数据库的名称禁止使用mysql的保留关键字。</p><p>1.3.数据库对象的命名要做到见名识义，并且最好不要超过32个字符。</p><p>1.4.临时表使用tmp作为前缀并以日期作为后缀。</p><p>1.5.备份库，备份表必须使用bak作为前缀并且使用日期作为后缀。</p><p>1.6.存储相同数据库的列名以及列类型必须保持一致，比方说有两张表，都是存储的相同的一个字段，那么这个字段的所有信息都必须保持一致。</p><p>1.7.所有的数据表都必须使用innodb来作为存储引擎。</p><p>1.8.数据库以及表统一使用utf8mb4来进行编码，mysql中的utf-8并不是真正意义上的utf-8，不要使用这种类型。</p><p>1.9.分区表在物理上分为多个文件，在逻辑上表现为一个表，谨慎使用分区键，跨分区查询效率可能会比较低，建议使用分表的方式来管理大的数据。</p><p>1.10.冷热数据分离，减少表的宽度。</p><p>1.11.禁止在表中建立预留字段，所以无法选择合适的类型，原因是因为对预留的类型进行修改，会直接锁表。</p><p>1.12.图片以及文件等二进制数据禁止存储到数据库中。</p><p>1.13.禁止在线上进行数据库压力测试，应该使用专门的压力机器，禁止生产环境以及开发环境使用相同的数据库。</p><p>1.14.单张表上的索引数量最好不要超过5个。</p><p>1.15.建立innodb表时必须有一个主键，建立主键的时候不要使用UUID,MD5,HASH，字符串列作为主键，因为主键需要自动增长，而上面的几种类型并不会保证自增长。</p><p>1.16.在SELECT，UPDATE，DELETE中WHERE后面从句中的列中选择相应的列来建立索引,包含在ORDER BY ，GROUP BY ,DISTINCT中的字段，多表JOIN的关联列上边。</p><p>1.17.联合索引中 区分度最高的列放在联合索引的最左侧 ，其次尽量把字段长度小的列放在字段的最左侧，因为字段长度越小，存储的数据量越大，IO性能越好，使用比较频繁的列放在最左侧，主要是减少重复索引，例如index(a,b,c)、index(a,b)、index(a)都是冗余的索引。</p><p>1.18.严禁使用外键。</p><p>1.19.尽可能将所有的列定义为NOT_NULL,因为索引NULL列需要占用额外的空间来保存，需要暂用更多的空间。</p><p>1.20.禁止使用字符串类型存储日期，尽量使用DATETIME或者TIMESTAMP类型来存储时间。</p><p><font color="#FFD700" size="5">2.数据库字段设计规范 </font></p><p>2.1 优先选择符合存储需要的最小数据类型<br>              —–将字符串转化为数字进行存储<br>eg:   inet_aton(‘255.255.255.255’)=4294967295<br>      INET_NTOA(4294967295);</p><p>2.2 对于非负数据采用无符号整形进行存储。</p><p>2.3 varcher(N)中的N表示的字符数而不是字节数，使用时需要注意。<br>    比如UTF-8存储汉字Varchar(255)，那么实际暂用的字节数目为255*3个字符。</p><p>2.4 避免使用TEXT、BLOB类型的数据<br>    建议将BLOB或者TEXT列分离到单独的扩展表中、TEXT或者BLOB类型。</p><p>2.5 使用DATETIME或者TIMESTAMP类型来存储时间类型<br>    而使用TIMESTAMP使用的存储空间会更小，TIMESTAMP  可以存储的时间范围为:1970-01-01  00:00:01~2038-01-19  03:14:07<br>TIMESTAMP占用4个字节的数据和INT类型的相同，但是可读性比INT类型的要高，超出范围的类型需要使用DATETIME类型进行存储。</p><p>2.6 和财务相关的数据，必须使用decimal类型进行存储<br>    原因:Decimal为精准浮点数，在计算时不会丢失精度，占用的空间由定义的宽度决定，该类型可以用于存储比bigint更大的数据类型。</p><p><font color="#FFD700" size="5"> 3.SQL开发规范 </font></p><p>3.1.使用预编译对数据库进行处理</p><p>3.2.避免数据类型的隐式转换，<br>    eg:<br>    select name,key from table where id = ‘123’ ;<br>    这里的id如果是整形，那么有可能会造成索引实效。</p><p>3.3.充分利用表上已经存在的索引<br>    避免使用双%号的查询条件。如  a like ‘%123%’,而使用 a like ‘123%’可以使用到索引。</p><p>3.4.程序连接不同的数据库使用不同的账号进行登录，禁止跨库查询，为数据库迁移和分库，分表留出余地，降低业务耦合度，并避免权限过大而产    生的安全风险。</p><p>3.5.严禁使用SELECT * 必须使用SELECT &lt;字段列表&gt;进行查询,因为会消耗更多的cpu以及io资源，无法使用复合索引，可以减少表结构变更带来的影响。</p><p>3.6.禁止使用不含字段列表的INSERT语句,目的是减少表结构变更带来的影响。<br>eg:<br>    错误写法:insert into  t  values(‘a’,’b’,’c’)<br>    正确写法:insert into t(c1,c2,c3)  values(‘a’,’b’,’c’)</p><p>3.7.避免使用子查询，可以把子查询优化为JOIN操作，原因是子查询的结果集无法使用索引，并且子查询会产生零时表操作，如果子查询数据量很大，那么会严重影响查询效率,消耗过多的CPU以及IO。</p><p>3.8.避免使用过多的JOIN来关联过多的表，MySQL允许关联的表为61个，这里建议关联的表个数不超过5个。</p><p>3.9. 减少和数据库的交互次数,严禁在循环体中进行数据库的增删改查操作，原因是：<br>数据库适合进行批量的操作，将多个相同的操作合并到一起，可以提交数据库的处理效率。</p><p>3.10.对于同一个查询条件，建议使用in来替换or，但是in中的值不要超过500个,in可以有效的使用索引。</p><p>3.11.禁止使用order by rand()来进行随机排序，替代方案可以在程序中生成随机值，然后在数据库中order by这个随机值。</p><p>3.12.严禁在WHERE从句中对列进行函数转换以及计算，因为对列进行函数转换会造成索引无法使用。<br>   eg:  where date(createtime)= ‘20180707’可以改进为：<br>where  createtime  &gt;= ‘20180707’  and createtime  &lt; ‘20180707’</p><p>3.13.在不会有重复数据值得时候，建议使用UNION  ALL 而不是  UNION ,原因是UNION会把所有的数据存放到临时表中再进行去重操作，而UNION  ALL  不会再对结果集进行区重的操作。</p><p>3.14.合理的拆分多个大SQL为多个小的SQL，由于一个SQL只能使用一个CPU进行计算，无法并行计算，所以有必要将一个sql拆分为多个sql来提升效率。</p><p><font color="#FFD700" size="5">4.数据库操作规范</font></p><p>4.1 超过100万行的批量写操作，要分批次进行操作，大批量的操作会造成严重的主从延迟，binlog日志为row格式时会产生大量的日志<br>避免产生大事务操作。</p><p>4.2 对大表数据结构修改一定要谨慎，会造成严重的锁表操作，建议对大表使用pt-online-schema-change修改表的结构，<br>禁止程序使用的账号赋予super 权限，由于达到数据库连接限制的时候，还允许1个使用super权限的连接。</p><p>4.3 对于程序连接数据库账号，遵循权限最小的原则，程序使用的数据库账号只能在一个DB下进行使用，不允许跨库进行使用，程序使用的账号原则上不应该有drop的权限。</p><p>….</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java8垃圾回收总结</title>
      <link href="/2018/09/16/Java8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 请输入密码 " /> <label for="pass"> 请输入密码 </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker使用心得</title>
      <link href="/2018/04/29/docker%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
      <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 请输入密码 " /> <label for="pass"> 请输入密码 </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>备忘录模式</title>
      <link href="/2018/02/15/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于备忘录模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>一系列的操作之后恢复原来的状态。实际的使用场景有事务的回滚操作等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在备忘录模式中有以下的几种对象:<br>2.1源发器:Originator<br>2.2备忘录类:Memento<br>2.3负责人CareTake<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/ca9112807235929b4720840b6a08f0dcbe14993d9999-RHTHvJ_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>首先定义Emp类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行备忘录操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmpMemento <span class="title">memento</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmpMemento(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行数据恢复,恢复成备忘录对象的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recovery</span><span class="params">(EmpMemento emto)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=emto.getName();</span><br><span class="line">        <span class="keyword">this</span>.age=emto.getAge();</span><br><span class="line">        <span class="keyword">this</span>.salary=emto.getSalary();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义EmpMemento类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpMemento</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmpMemento</span><span class="params">(Emp e)</span> </span>&#123;<span class="comment">//这是关键</span></span><br><span class="line">        <span class="keyword">this</span>.name=e.getName();</span><br><span class="line">        <span class="keyword">this</span>.age=e.getAge();</span><br><span class="line">        <span class="keyword">this</span>.salary=e.getSalary();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编写CareTaker类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CareTaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> EmpMemento memento;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmpMemento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(EmpMemento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后给出测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CareTaker careTaker=<span class="keyword">new</span> CareTaker();</span><br><span class="line">        Emp emp=<span class="keyword">new</span> Emp(<span class="string">"小强"</span>,<span class="number">90</span>,<span class="number">900</span>);</span><br><span class="line">        System.out.println(emp.getName()+<span class="string">" "</span>+emp.getAge()+<span class="string">" "</span>+emp.getSalary());</span><br><span class="line">        careTaker.setMemento(emp.memento());</span><br><span class="line">        emp.setAge(<span class="number">9</span>);</span><br><span class="line">        System.out.println(emp.getName()+<span class="string">" "</span>+emp.getAge()+<span class="string">" "</span>+emp.getSalary());</span><br><span class="line">        emp.recovery(careTaker.getMemento());</span><br><span class="line">        System.out.println(emp.getName()+<span class="string">" "</span>+emp.getAge()+<span class="string">" "</span>+emp.getSalary());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>备忘录模式保存了内部状态的拷贝，以后直接恢复即可。<br>代码地址:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/memeto" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/memeto</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>观察者模式</title>
      <link href="/2018/02/15/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于观察者模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>Android开发中的广播机制,Servlet中监听器的实现。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>观察者模式包含如下的一些角色:<br>2.1 Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。<br>2.2 ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。<br>2.3 Observer：抽象观察者，是观察者者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。<br>2.4 ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/8aa6b22bc8a4bd3d62c44bc72aa3d9728c727e977899-lIdJ3p_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>首先，定义Observer接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/15 11:41</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [subject]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject subject)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserverA</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        state=((ConcreteSubject)subject).getState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        list.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        list.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAlls</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer:list)&#123;</span><br><span class="line">            observer.update(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span>  <span class="keyword">extends</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        <span class="keyword">this</span>.notifyAlls();<span class="comment">//更新所有的订阅者</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义普通测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//目标对象</span></span><br><span class="line">        ConcreteSubject subject=<span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">        <span class="comment">//创建多个观察者</span></span><br><span class="line">        ConcreteObserverA coa=<span class="keyword">new</span> ConcreteObserverA();</span><br><span class="line">        ConcreteObserverA coa2=<span class="keyword">new</span> ConcreteObserverA();</span><br><span class="line">        ConcreteObserverA coa3=<span class="keyword">new</span> ConcreteObserverA();</span><br><span class="line">        <span class="comment">//让这三个观察者添加到subject观察者队伍中</span></span><br><span class="line">        subject.register(coa);</span><br><span class="line">        subject.register(coa2);</span><br><span class="line">        subject.register(coa3);</span><br><span class="line">        subject.setState(<span class="number">1234</span>);</span><br><span class="line">        System.out.println(coa.getState());</span><br><span class="line">        System.out.println(coa2.getState());</span><br><span class="line">        System.out.println(coa3.getState());</span><br><span class="line">        subject.removeObserver(coa3);</span><br><span class="line">        subject.setState(<span class="number">5678</span>);</span><br><span class="line">        System.out.println(coa3.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>上边我们通过代码手动实现了一个观察者模式，然而，jdk也提供了一些接口来方便我们实现这一功能。有兴趣的可以研究以下。<br>项目链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/observer" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/observer</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>状态模式</title>
      <link href="/2018/02/15/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于状态模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>常见的应用场景有线程对象各个状态之间的切换或者各种账号状态的管理等</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>状态模式中主要有以下的几大角色:<br>2.1Context:环境类<br>环境类中维护一个State对象，定义了当前的对象<br>2.2State:抽象状态类<br>2.3ConcreteState:具体状态类<br>每一类封装了一个对应的行为<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/b5b0aa3b24a36ac3dff3f69edf63bef36f1bd9363182-meSgJ1_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个图书馆借书的例子来对这个设计模式进行讲解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BorrowState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"书籍已经被借走"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreeState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"书本在馆!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderedState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"书本已经被预订！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改状态"</span> );</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        state.handle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后是一个简单的测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       BookContext ctx=<span class="keyword">new</span> BookContext();</span><br><span class="line">       ctx.setState(<span class="keyword">new</span> FreeState());</span><br><span class="line">       ctx.setState(<span class="keyword">new</span> OrderedState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>项目链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/state" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/state</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模板方法模式</title>
      <link href="/2018/02/14/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于模板方法模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>当实现一个算法的时候，这个算法的整体步骤是固定的，但是某一些算法可能会进行更改。易变的部分我们可以抽取出来，供子类实现。比较常见的应用有Junit单元测试Spring中的JDBCTemplate类等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>模板方法模式包含如下两个角色：<br>2.1 AbstractClass（抽象类）：在抽象类中定义了一系列基本操作(PrimitiveOperations)，这些基本操作可以是具体的，也可以是抽象的，每一个基本操作对应算法的一个步骤，在其子类中可以重定义或实现这些步骤。同时，在抽象类中实现了一个模板方法(Template Method)，用于定义一个算法的框架，模板方法不仅可以调用在抽象类中实现的基本方法，也可以调用在抽象类的子类中实现的基本方法，还可以调用其他对象中的方法。<br>2.2 ConcreteClass（具体子类）：它是抽象类的子类，用于实现在父类中声明的抽象基本操作以完成子类特定算法的步骤，也可以覆盖在父类中已经实现的具体基本操作。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/ae69fa772bb1102d56adbd94660d8130fd551a3f5116-88tGer_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>定义一个银行办理业务步骤的类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"取号排队"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"反馈评分"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.takeNumber();</span><br><span class="line">        <span class="keyword">this</span>.transact();</span><br><span class="line">        <span class="keyword">this</span>.evaluate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>再定义一个具有特殊需求的类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Withdrawals</span> <span class="keyword">extends</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"取款!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后是一个简单的测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BankTemplateMethod bankTemplateMethod=<span class="keyword">new</span> BankTemplateMethod() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"存点零花钱"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        bankTemplateMethod.process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>模板方法定义了操作中算法的骨架，新的子类可以在不改变一个算法结构的前提下重新定义该算法的某些特定的步骤，也即是通过模板方法，处理的步骤已经在父类中定义好了，而具体的实现则延迟到子类中定义。<br>项目链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/templateMethod" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/templateMethod</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>策略模式</title>
      <link href="/2018/02/14/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于策略模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>我们需要根据不同的需求给出不同的解决方案，如果使用条件判断，这时候如果有新增的类型就会破坏开放封闭原则，这时候就需要使用策略模式。常用的使用场景有Spring框架中的Resource接口等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在策略模式中有以下的几种对象:<br>2.1环境(Context)角色：持有一个Strategy的引用。<br>2.2抽象策略(Strategy)角色：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。<br>2.3具体策略(ConcreteStrategy)角色：包装了相关的算法或行为。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/b73288c2de5376667d351ab520b559db21ce454d6ed9-LMAkUn_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>首先，定义Strategy接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义Context类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;<span class="comment">//当前的算法对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printArea</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"图形面积:"</span>+strategy.getArea(a,b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义计算各种图形面积的方法(写的不是太严谨,这里只是用作演示):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circular</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a==b)</span><br><span class="line">        <span class="keyword">return</span> Math.PI*a*b;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a*b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a*b/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>简单测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Strategy s1=<span class="keyword">new</span> Rectangle();</span><br><span class="line">        Strategy s2=<span class="keyword">new</span> Triangle();</span><br><span class="line">        Strategy s3=<span class="keyword">new</span> Circular();</span><br><span class="line">        Context ctx=<span class="keyword">new</span> Context(s3);</span><br><span class="line">        ctx.printArea(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>策略模式实际就是一种对算法进行分离的设计模式，客户端能够自行判断调用哪个算法。<br>代码链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/strategy" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/strategy</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>访问者模式</title>
      <link href="/2018/02/14/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于访问者模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>在一个集合中有一些不同的子类对象，需要分别对这些子类对象做处理。常常应用于XML文档的解析、编辑器的解析等。</p><h2 id="2-UML表示："><a href="#2-UML表示：" class="headerlink" title="2.UML表示："></a>2.UML表示：</h2><p>2.1 Visitor（抽象访问者）：抽象访问者为对象结构中每一个具体元素类ConcreteElement声明一个访问操作，从这个操作的名称或参数类型可以清楚知道需要访问的具体元素的类型，具体访问者则需要实现这些操作方法，定义对这些元素的访问操作。<br>2.2 ConcreteVisitor（具体访问者）：具体访问者实现了抽象访问者声明的方法，每一个操作作用于访问对象结构中一种类型的元素。<br>2.3 Element（抽象元素）：一般是一个抽象类或接口，定义一个Accept方法，该方法通常以一个抽象访问者作为参数。<br>2.4 ConcreteElement（具体元素）：具体元素实现了Accept方法，在Accept方法中调用访问者的访问方法以便完成一个元素的操作。<br>2.5 ObjectStructure（对象结构）：对象结构是一个元素的集合，用于存放元素对象，且提供便利其内部元素的方法。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/45e2f1a96e486aa63d973a659a68b74e078bab4faad7-cnVfK1_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>参考了一个例子:<a href="http://www.cnblogs.com/chenpi/p/5222390.html" title="链接" target="_blank" rel="noopener">http://www.cnblogs.com/chenpi/p/5222390.html</a><br>定义一个visitor接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/16 16:05  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [wheel]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Wheel wheel)</span></span>;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/16 16:06  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [engine]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Engine engine)</span></span>;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/16 16:06  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [body]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Body body)</span></span>;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/16 16:06  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [car]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Car car)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>具体的访问者类，定义一些行为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Wheel wheel)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"轮子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Engine engine)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"引擎"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Body body)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"车身"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"整车"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义Visitable接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义各部件类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engine</span> <span class="keyword">implements</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> <span class="keyword">implements</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wheel</span> <span class="keyword">implements</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Engine engine=<span class="keyword">new</span> Engine();</span><br><span class="line">    <span class="keyword">private</span> Body body=<span class="keyword">new</span> Body();</span><br><span class="line">    <span class="keyword">private</span> Wheel wheel=<span class="keyword">new</span> Wheel();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">          visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">          engine.accept(visitor);</span><br><span class="line">          body.accept(visitor);</span><br><span class="line">          wheel.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单的测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car car=<span class="keyword">new</span> Car();</span><br><span class="line">        Visitor visitor=<span class="keyword">new</span> PrintVisitor();</span><br><span class="line">        car.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>通过上面的例子，我们可以看出，一旦操作逻辑发生改变，我们只要更改PrintVisitor类中的代码即可，与此同时，一旦需要新添加一些“零件”，例如再添加一个“尾翼”类，只需要改变访问者接口即可。<br>代码地址:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/visitor" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/visitor</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解释器模式</title>
      <link href="/2018/02/14/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于解释器模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>这个设计模式一般用来解释语句中的句子，实际开发中EL表达式或者正则表达式的解释器就是采用这种设计模式等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>Expression:抽象表达式,用来表明所有具体表达式需要实现的抽象接口。<br>Terminal Expression:终结符表达式,实现了抽象表达式所要求的接口。<br>Nonterminal Expression:非终结表达式<br>Context:环境,它的任务一般用来存放文法中各个终结符对应的具体值。<br>具体的UML示意图如下:<br><img src="http://img.hb.aicdn.com/f22d6065cb794ebd48c485956908e1bab1a59bb7452c-cFzR3c_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>这里参考了网络上的例子:<a href="https://www.cnblogs.com/chenpi/p/5222496.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenpi/p/5222496.html</a><br>具体就是自定义一个解释器用来解析一种类似后序表达式()的值。<br>下面是具体的代码:<br>首先我们定义一个接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**    </span></span><br><span class="line"><span class="comment">         *   </span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">         * <span class="doctag">@date</span> 2018/2/16 11:21  </span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> [variables]  </span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> int  </span></span><br><span class="line"><span class="comment">         */</span> </span><br><span class="line">         <span class="function"><span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String,Expression&gt; variables)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义符号识别类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    Expression left;</span><br><span class="line">    Expression right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Plus</span><span class="params">(Expression left, Expression right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret(variables)+right.interpret(variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Minus</span> <span class="keyword">implements</span> <span class="title">Expression</span></span>&#123;</span><br><span class="line">    Expression left;</span><br><span class="line">    Expression right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Minus</span><span class="params">(Expression left, Expression right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret(variables)-right.interpret(variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Number</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义解析类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Variable</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span>==variables.get(name))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> variables.get(name).interpret(variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Evaluator</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Expression syntaxTree;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Evaluator</span><span class="params">(String expression)</span></span>&#123;</span><br><span class="line">        Stack&lt;Expression&gt; expressions=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String token:expression.split(<span class="string">" "</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (token.equals(<span class="string">"+"</span>))&#123;</span><br><span class="line">                Expression subExpression=<span class="keyword">new</span> Plus(expressions.pop(),expressions.pop());</span><br><span class="line">                expressions.push(subExpression);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(token.equals(<span class="string">"-"</span>))&#123;</span><br><span class="line">                Expression right=expressions.pop();</span><br><span class="line">                Expression left=expressions.pop();</span><br><span class="line">                Expression subExpression=<span class="keyword">new</span> Minus(left,right);</span><br><span class="line">                expressions.push(subExpression);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                expressions.push(<span class="keyword">new</span> Variable(token));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        syntaxTree=expressions.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> syntaxTree.interpret(variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后，编写测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String expression=<span class="string">"w x z - +"</span>;</span><br><span class="line">        Evaluator evaluator=<span class="keyword">new</span> Evaluator(expression);</span><br><span class="line">        Map&lt;String,Expression&gt; variables=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        variables.put(<span class="string">"w"</span>,<span class="keyword">new</span> Number(<span class="number">5</span>));</span><br><span class="line">        variables.put(<span class="string">"w"</span>,<span class="keyword">new</span> Number(<span class="number">5</span>));</span><br><span class="line">        variables.put(<span class="string">"w"</span>,<span class="keyword">new</span> Number(<span class="number">5</span>));</span><br><span class="line">        <span class="keyword">int</span> result=evaluator.interpret(variables);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>解释器模式主要用于需要自定义语法分析工具的场景，如果需要增加操作，只需要添加具体的类即可。在实际开发中使用率较低。<br>项目链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/interpreter" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/interpreter</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>命令模式</title>
      <link href="/2018/02/14/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于命令模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>所谓命令模式就是将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。在数据库的事务处理部分就使用了命令模式。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在命令模式中通常包含以下的几组对象:<br>2.1Invoker调用者/请求者<br>2.2Receiver接收者<br>2.3Client客户端<br>具体的UML示意图如下:<br><img src="http://img.hb.aicdn.com/df99f59b2da75c79e48ee9e69a0360d92e5bb41d3b24-3KplcG_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>定义一个Command接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/14 15:45</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编写Command实体:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;<span class="comment">//命令真正的执行者</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行相关的处理</span></span><br><span class="line">        receiver.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义一个Invoke类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoke</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invoke</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//业务方法，用于调用命令类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编写receiver类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Receiver.action()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后，我们通过一个简单的例子来进行测试:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Command c=<span class="keyword">new</span> ConcreteCommand(<span class="keyword">new</span> Receiver());</span><br><span class="line">        Invoke i=<span class="keyword">new</span> Invoke(c);</span><br><span class="line">        i.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>可以看到，调用者Client并不会直接和接收者Receiver类发生关系，这么做有什么好处？这样做的好处一是可以实现类之间的解耦，二是Command类的扩展性会比较好，但同时这也会造成类膨胀的问题，所以命令模式通常会和我们前面介绍的责任链模式结合。<br>下面给出项目的链接:<a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/command" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/command</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>中介者模式</title>
      <link href="/2018/02/14/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于中介者模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>系统中的关系比较复杂，存在网状的关系。例如经典的MVC模式中的”C”-Controller就是一个中介者对象还有例如Java反射中的invoke()方法中也是使用到了中介者模式。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>2.1 Mediator：抽象中介者角色，定义了同事对象到中介者对象的接口，一般以抽象类的方式实现。<br>2.2 ConcreteMediator：具体中介者角色，继承于抽象中介者，实现了父类定义的方法，它从具体的同事对象接受消息，向具体同事对象发出命令。<br>2.3 Colleague：抽象同事类角色，定义了中介者对象的接口，它只知道中介者而不知道其他的同事对象。<br>2.4 ConcreteColleague1、ConcreteColleague2：具体同事类角色，继承于抽象同事类，每个具体同事类都知道本身在小范围的行为，而不知道在大范围内的目的。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/56e2c518a9e443b6841077b52dc3cf26f62852da831b-b3TF63_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>定义中介者接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/14 16:43  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [dName, dt]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(String dName,Department dt)</span></span>;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/14 16:43  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [dName]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">command</span><span class="params">(String dName)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>实现接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">President</span> <span class="keyword">implements</span> <span class="title">Mediator</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Department&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String dName, Department dt)</span> </span>&#123;</span><br><span class="line">        map.put(dName,dt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">command</span><span class="params">(String dName)</span> </span>&#123;</span><br><span class="line">        map.get(dName).selfAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义Department接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/14 16:45  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> []  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span></span>;<span class="comment">//</span></span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/14 16:45  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> []  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们定义一个研发部来实现这个接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Development</span> <span class="keyword">implements</span> <span class="title">Department</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Mediator m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Development</span><span class="params">(Mediator m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"研发"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"需要资金"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>限于篇幅，这里省略其他的部门类。<br>最后，我们通过一个简单的例子进行测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Mediator m=<span class="keyword">new</span> President();<span class="comment">//中介者对象</span></span><br><span class="line">        Market market=<span class="keyword">new</span> Market(m);</span><br><span class="line">        market.selfAction();</span><br><span class="line">        market.outAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>中介者模式用于解耦多个对象之间的关系。每个对象都会持有一个中介者的对象，然后通过中介者统一管理这些交互的关系。<br>下面给出项目的链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/mediator" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/mediator</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>迭代器模式</title>
      <link href="/2018/02/13/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于迭代器模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>1.1访问一个聚合对象的内容而无需暴露它的内部表示<br>1.2支持对聚合对象的多种遍历<br>1.3为遍历不同的聚合结构提供一个统一的接口<br>其实就是为方便遍历数据服务，像JDK的内置迭代器，就是采用的这种模式。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>迭代器模式主要有以下的角色构成:<br>2.1迭代器角色:定义遍历元素所需要的方法。<br>2.2具体迭代角色：实现迭代器接口中定义的方法，完成集合的迭代。<br>2.3容器角色:一个接口,提供iterator()方法，对比于java中的Collection接口、List接口、Set接口等。<br>2.4具体容器角色<br>抽象容器的具体实现类，比如:List接口中的ArrayList、LinkedList等。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/5f25cea7ee76e28881699988cb59b9af474448e97d93-RH02Rp_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个例子来对这个设计模式进行讲解:<br>首先，我们定义一个迭代器的接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyIterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isFirst</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isLast</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">getCurrentObj</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>实现具体的迭代器:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreateIterator</span> <span class="keyword">implements</span> <span class="title">MyIterator</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cursor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreateIterator</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cursor=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cursor&lt;list.size())&#123;</span><br><span class="line">            cursor++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cursor&lt;list.size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor==<span class="number">0</span>?<span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor == (list.size() - <span class="number">1</span>) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCurrentObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(cursor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义容器角色：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyAggregate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addObject</span><span class="params">(Object object)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObject</span><span class="params">(Object object)</span></span>;</span><br><span class="line">    <span class="function">MyIterator <span class="title">createIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>具体容器类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMyAggregate</span> <span class="keyword">implements</span> <span class="title">MyAggregate</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteMyAggregate</span><span class="params">(List&lt;Object&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObject</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list.add(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObject</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list.remove(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**获取迭代器*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyIterator <span class="title">createIterator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreateIterator(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>通过迭代器模式，简化了遍历的方式，由于迭代器内部已经实现了迭代算法，所以我们不需要了解遍历的算法，使得代码的封装性比较好。<br>下面给出代码:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/iterator" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/iterator</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>责任链模式</title>
      <link href="/2018/02/13/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于责任链模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>Tomcat中的过滤器链，springmvc中的拦截器链等等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在责任链模式中通常用以下的几类对象:<br>Handler：定义出一个处理请求的接口。如果需要，接口可以定义 出一个方法以设定和返回对下家的引用。这个角色通常由一个Java抽象类或者Java接口实现。<br>ConcreteHandler：具体处理者接到请求后，可以选择将请求处理掉，或者将请求传给下家。由于具体处理者持有对下家的引用，因此，如果需要，具体处理者可以访问下家。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/09a7239ca5142727bac233dede8f1b1b250d94dd4b07-Px07MZ_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个员工请假的例子对责任链模式进行讲解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> Leader nextLeader;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Leader <span class="title">getNextLeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextLeader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLeader</span><span class="params">(Leader nextLeader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextLeader = nextLeader;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(LeaveRequest request)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义领导类，判断的标准根据员工的请假的天数为准。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Groupleader</span> <span class="keyword">extends</span> <span class="title">Leader</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Groupleader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(LeaveRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getLeaveDays()&lt;<span class="number">3</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"小组长同意"</span>+request.getEmpName());</span><br><span class="line">            System.out.println(<span class="string">"主任"</span>+<span class="keyword">this</span>.name+<span class="string">"，"</span>+<span class="string">"审批通过"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.nextLeader!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.nextLeader.handleRequest(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br>下面是我们进行测试，假设有一个员工打算请假:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Leader a=<span class="keyword">new</span> Groupleader(<span class="string">"小明"</span>);</span><br><span class="line">        Leader b=<span class="keyword">new</span> GeneralManager(<span class="string">"小红"</span>);</span><br><span class="line">        Leader c=<span class="keyword">new</span> BOSS(<span class="string">"小刚"</span>);</span><br><span class="line">        a.setNextLeader(b);</span><br><span class="line">        b.setNextLeader(c);</span><br><span class="line">        LeaveRequest request=<span class="keyword">new</span> LeaveRequest(<span class="string">"小强"</span>,<span class="number">10</span>,<span class="string">"玩"</span>);</span><br><span class="line">        a.handleRequest(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看到责任关系是在客户端调用的时候确定的。                        </p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>责任链模式将处理同一类请求的对象连城一条链，所提交的请求沿着链传递，链上的对象会逐个判断有没有能力去处理这个请求，如果能则处理，如果不能就传递给链的下一个对象。<br>相关的源代码:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/chainOfResp" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/chainOfResp</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>享元模式</title>
      <link href="/2018/02/13/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于享元模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>内存资源比较稀缺,不要随便浪费，如果有很多相同或者类似的对象，通过使用享元模式的方法，节省内存，例如线程池以及String类等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在享元模式中通常用以下的几类对象:<br>2.1FlyweightFactory(享元工厂，创建并且管理享元对象)<br>2.2FlyWeight享元抽象类<br>2.3ConcreteFlyWeight具体享元类<br>2.4UnsharedConcreteFlyWeight非共享享元类<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/d406e297b0d7df5e39172507475f235a62f7ac599644-lcBu9p_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>首先，定义一个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChessFlyWeight</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(Coordinate coordinate)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义棋子类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteChess</span> <span class="keyword">implements</span> <span class="title">ChessFlyWeight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteChess</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color=color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Coordinate coordinate)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"棋子颜色："</span>+color);</span><br><span class="line">        System.out.println(<span class="string">"棋子位置："</span>+coordinate.getX()+<span class="string">"-----"</span>+coordinate.getY());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>再定义坐标类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x,y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Coordinate</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后是我们的享元工厂:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChessWeightFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,ChessFlyWeight&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ChessFlyWeight <span class="title">getChess</span><span class="params">(String color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.get(color)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(color);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ChessFlyWeight chessFlyWeight=<span class="keyword">new</span> ConcreteChess(color);</span><br><span class="line">            map.put(color,chessFlyWeight);</span><br><span class="line">            <span class="keyword">return</span>  chessFlyWeight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后，给出一个简单的测试程序:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChessFlyWeight chessFlyWeight1= ChessWeightFactory.getChess(<span class="string">"黑色"</span>);</span><br><span class="line">        ChessFlyWeight chessFlyWeight2= ChessWeightFactory.getChess(<span class="string">"黑色"</span>);</span><br><span class="line">        System.out.println(chessFlyWeight1.equals(chessFlyWeight2));</span><br><span class="line">        System.out.println(<span class="string">"增加外部状态的处理"</span>);</span><br><span class="line">        chessFlyWeight1.display(<span class="keyword">new</span> Coordinate(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        chessFlyWeight2.display(<span class="keyword">new</span> Coordinate(<span class="number">10</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>享元模式以共享的方式高效的支持大量细粒度对象的重用。共享的关键是使用了内部状态以及外部状态，其中：<br>内部状态指的是可以共享,不会随着环的变化而变化的属性；而外部状态指的是不可以共享，会随着环境变化而变化的属性。对于外部状态，使用外部类来进行处理，而对于内部状态，我们单独通过享元类来进行处理。<br>下面给出项目的链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/facade" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/facade</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>外观模式</title>
      <link href="/2018/02/12/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于外观模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>为子系统提供一个统一的入口。封装子系统的复杂性，便于客户调用，常用于一些工具类的封装。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>外观模式包含如下两个角色：<br>(1) Facade（外观角色）：在客户端可以调用它的方法，在外观角色中可以知道相关的（一个或者多个）子系统的功能和责任；在正常情况下，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理。<br>(2) SubSystem（子系统角色）：在软件系统中可以有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能；每一个子系统都可以被客户端直接调用，或者被外观角色调用，它处理由外观类传过来的请求；子系统并不知道外观的存在，对于子系统而言，外观角色仅仅是另外一个客户端而已。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/ab84efb345de8d26ed55ada84d7eb96b3a0721283df3-LDLUSy_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个启动计算机的程序来对外观模式进行一个简要的说明:<br>计算机的启动通常有以下的几个流程:</p><p><img src="https://images2015.cnblogs.com/blog/607348/201512/607348-20151229231206354-919070678.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBIOS</span> <span class="keyword">implements</span> <span class="title">BIOS</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BiosCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"BIOS自检"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyKernel</span> <span class="keyword">implements</span> <span class="title">Kernel</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"系统引导"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySystems</span> <span class="keyword">implements</span> <span class="title">Systems</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"系统初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这时候如果我们需要在主程序中进行调用:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">        MyBIOS myBIOS=<span class="keyword">new</span> MyBIOS();</span><br><span class="line">        myBIOS.BiosCheck();</span><br><span class="line">        MyKernel myKernel=<span class="keyword">new</span> MyKernel();</span><br><span class="line">        myKernel.run();</span><br><span class="line">        MySystems mySystems=<span class="keyword">new</span> MySystems();</span><br><span class="line">        mySystems.init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>结果就是编写的代码相当的松散，这时候我们可以通过定义一个类，然后在类中将上述的代码进行包装，并向外提供一个方法来供调用者进行调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CentOS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyBIOS myBIOS=<span class="keyword">new</span> MyBIOS();</span><br><span class="line">        myBIOS.BiosCheck();</span><br><span class="line">        MyKernel myKernel=<span class="keyword">new</span> MyKernel();</span><br><span class="line">        myKernel.run();</span><br><span class="line">        MySystems mySystems=<span class="keyword">new</span> MySystems();</span><br><span class="line">        mySystems.init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这时候，我们在主程序中直接调用这个类即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       CentOS centOS=<span class="keyword">new</span> CentOS();</span><br><span class="line">       centOS.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>下面给出项目的链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/facade" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/facade</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>装饰模式</title>
      <link href="/2018/02/12/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于装饰模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>在已有的功能上边需要动态的添加新的功能。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在装饰器模式中通常用以下的几类对象:<br>抽象构件角色(Project)：给出一个接口，以规范准备接收附加责任的对象<br>具体构件角色(Employe)：定义一个将要接收附加责任的类<br>装饰角色(Manager)：持有一个构件对象的实例，并定义一个与抽象构件接口一致的接口<br>具体装饰角色(ManagerA，ManagerB)：负责给构件对象“贴上”附加的责任<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/ca3f24ba1a8a81438c8e0cb28d20b31f243b3bda674d-j4M0k8_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个人不断学习技能的例子来对装饰模式进行一个讲解:<br>首先，我们定义一个Human接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>随后我们编写一个Man类-也就是那个需要被加强的类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"直立行走"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>接下来定义SuperMan类，基于此类，我们会不断派生出新的类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Superman</span> <span class="keyword">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Human human;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Superman</span><span class="params">(Human human)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.human = human;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            human.move();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoctorS</span> <span class="keyword">extends</span> <span class="title">Superman</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoctorS</span><span class="params">(Human human)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(human);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">magic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"魔法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.move();</span><br><span class="line">        magic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其他的例子这里限于篇幅进行适当的省略。<br>最后是我们的测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Man man=<span class="keyword">new</span> Man();<span class="comment">//需要被加强的对象</span></span><br><span class="line">        man.move();</span><br><span class="line">        System.out.println(<span class="string">"增加钢铁侠的技能"</span>);</span><br><span class="line">        Ironman ironman =<span class="keyword">new</span> Ironman(man);</span><br><span class="line">        ironman.move();</span><br><span class="line">        System.out.println(<span class="string">"增加奇异博士的技能"</span>);</span><br><span class="line">        DoctorS doctorS=<span class="keyword">new</span> DoctorS(ironman);</span><br><span class="line">        doctorS.move();</span><br><span class="line">        System.out.println(<span class="string">"增加蚁人的技能"</span>);</span><br><span class="line">        AntMan antMan=<span class="keyword">new</span> AntMan(doctorS);</span><br><span class="line">        antMan.move();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>装饰模式主要是用来解决编程中使用继承，所导致的类”膨胀”问题，在本例中，我们可以看到桥接模式和前面的装饰模式有着比较类似的目的，但实际上它们是完全不同的。因为两者的诱因不一样。桥接模式是对象自身现有的机制沿着多维度的变化，既有部分不稳定。而装饰模式则是为了增加新的功能。<br>项目链接：<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/decorator" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/decorator</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>组合模式</title>
      <link href="/2018/02/11/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于组合模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>部分和整体之前通过树状结构进行显示,调用者需要达到可以使用统一的方式处理部分对象以及整体对象的目的。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>组合模式主要包括下面的几个角色:<br>2.1抽象构件:定义叶子和容器构件的共同点。<br>2.2叶子构件。<br>2.3容器构件:能够包含子节点。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/89924f7071f66eb8fbffaf45fc08fa6cbeafccae7b7e-naeNHL_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个模拟的杀毒程序对这一设计模式进行讲解：<br>首先定义我们的抽象构件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span></span>;<span class="comment">//杀毒</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>随后，定义文本文件以及图片文件类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TextFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查杀文本文件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查杀图像文件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后是文件夹类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;AbstractFile&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Folder</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile file)</span></span>&#123;</span><br><span class="line">        list.add(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile file)</span></span>&#123;</span><br><span class="line">        list.remove(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractFile <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对文件夹进行查杀"</span>);</span><br><span class="line">        <span class="keyword">for</span> (AbstractFile file:list)&#123;</span><br><span class="line">            file.killVirus();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-结论"><a href="#4-结论" class="headerlink" title="4.结论"></a>4.结论</h2><p>组合模式通常用来解决存在树形关系结构的问题，上例中的TextFile、ImageFile类正是组合模式中的叶子节点，Folder类对应容器构件，在容器构件中包含叶子节点的引用，例如上例中的list中就包含了多个叶子节点的引用。<br>下面是例子的链接:</p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>桥接模式</title>
      <link href="/2018/02/11/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于桥接模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>分离<strong>两个</strong>变化的维度，通过组合的方式来减少系统中臃肿繁琐的代码,例如JDBC中的驱动程序。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>2.1 实现（Implementor）：定义具体行为，具体特征的应用接口。<br>2.2 具体实现（ConcreteImplementor）：实现Implementor。<br>2.3目标接口（Target）: 包含实现具体行为、具体特征的Implementor接口或者类。<br><img src="http://img.hb.aicdn.com/a6e27d83a8435bcf59a99690ef9e11bb52872bf35a6d-Uf3Imq_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>这里边的类代码比较的多，而且每一个类又比较的简单，所以直接通过UML图来进行讲解:<br>在未使用桥接模式之前，代码结构如下:<br><img src="http://img.hb.aicdn.com/e36bfa6680c42de4d1c0d16810093c59301167a020ab-4LaCAt_fw658" alt=""><br>通过使用桥接模式，这时候的代码结构变成下面的情形:<br><img src="http://img.hb.aicdn.com/e67024c9eddd11aa152c161ba355940bed5d98843b3a-U4aniu_fw658" alt=""><br>具体的代码可以下面的链接进行下载:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/bridge" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/bridge</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>代理模式</title>
      <link href="/2018/02/10/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于代理模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>需要为其他的对象提供一种代理，来控制该对象的访问。Spring中的AOP技术就使用了代理模式。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>代理模式种有以下的几种对象:<br>2.1.抽象角色<br>包含有代理角色和真实角色的公共对外方法。<br>2.2.真实角色<br>真实抽象角色，定义真实角色需要实现的一些业务逻辑(真正干事的家伙)。<br>2.3.代理角色<br>实现抽象角色，是真实角色的代理通过真实角色的业务逻辑方法来实现抽象方法，并且可以附加自己另外的一些操作。(用来做流程控制)<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/1a6165419ac7cccadce663e0d3906b710885c3a63da5-QrfE1x_fw658" alt=""></p><h2 id="3-代理模式的分类"><a href="#3-代理模式的分类" class="headerlink" title="3.代理模式的分类"></a>3.代理模式的分类</h2><p>代理模式主要分为以下两类:<br>3.1.静态代理:<br>3.2.动态代理<br>  3.2.1基于JDK的动态代理<br>  3.2.2基于cglib的动态代理</p><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h2><p>下面我们通过一个例子，来对代理模式进行一个简单的说明:<br>4.1静态代理<br>什么叫静态代理呢?静态代理就是代理类需要我们手动编码实现。<br>定义接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dunk</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>;<span class="comment">//喝水</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">championWay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原始的类，实现上边的接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KevinDurant</span> <span class="keyword">implements</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Large contract!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dunk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"duang！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bath water！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">championWay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Join the warrior！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编写代理类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyKD</span> <span class="keyword">implements</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Player player;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyKD</span><span class="params">(Player player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Large contract!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dunk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"duang！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            player.drink();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">championWay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Join the warrior！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>4.2基于JDK的动态代理<br>JDK动态代理，通过java反射机制实现。<br>代理类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    Player player;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayerHandler</span><span class="params">(Player player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//进行流程控制</span></span><br><span class="line">        System.out.println(method.getName());</span><br><span class="line">        Object object=method.invoke(player,args);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>4.3基于cglib的动态代理<br>前面介绍的JDK动态代理都必须实现InvocationHandler，没有实现接口的类就不能进行代理。针对没有实现这一接口的类我们可以通过cglib来实现动态代理。cglib是通过继承以及回调来实现的，通过字节码技术生成代理类，所以我们在项目中除了引入cglib相关的依赖之外，还要添加asm的jar包。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerCgLib</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Player player;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayerCgLib</span><span class="params">(Player player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Player <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Enhancer enhancer=<span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(player.getClass());</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"KD的代理人"</span>);</span><br><span class="line">                method.invoke(player,objects);</span><br><span class="line">                System.out.println(<span class="string">"KD的代理人"</span>);</span><br><span class="line">                <span class="keyword">return</span> methodProxy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> (Player) enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>代理模式在实际开发中的应用还是比较多的，这里分别实现了静态代理以及基于java反射技术以及cgLib的动态代理实现代码。<br>项目的链接如下:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/proxy" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/proxy</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>适配器模式</title>
      <link href="/2018/02/10/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于适配器模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>由于接口不兼容，需要通过“适配器”来进行协调工作。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>适配器模式中总共有3种角色:<br>2.1目标接口<br>客户期待的接口。目标可以是具体的或抽象的类，也可以是接口。<br>2.2需要适配的类<br>需要适配的类或者适配者类。<br>2.3适配器<br>通过包装一个需要适配的对象，将原有的接口转换成目标接口。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/c4861b7e3ecbc4f7975db26b2abc0cf83048e0a1336d-s4M31u_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面通过一个生活中的一个实际例子来对这种模式进行一个讲解:<br>串行口键盘类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ps2KeyBoard</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打字very快!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这和我们的LapTop类并不兼容，但是我们不想要改代码呀，怎么办?<br>这时候就需要我们的适配器来完成这任务了!当然，在编写这个适配器之前我们需要定义一个接口，来对这个类的行为做一下规范。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>实现适配器的方式有两种<br>方法1：继承方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Ps2KeyBoard</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>方法2:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter2</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Ps2KeyBoard keyBoard;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        keyBoard.request();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter2</span><span class="params">(Ps2KeyBoard keyBoard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.keyBoard = keyBoard;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>LapTop类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Laptop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">(Target target)</span></span>&#123;</span><br><span class="line">        target.handleRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Laptop laptop=<span class="keyword">new</span> Laptop();</span><br><span class="line">        Ps2KeyBoard ps2KeyBoard=<span class="keyword">new</span> Ps2KeyBoard();</span><br><span class="line">        Target target=<span class="keyword">new</span> Adapter();</span><br><span class="line">        laptop.test01(target);<span class="comment">//方法1</span></span><br><span class="line">        Target target1=<span class="keyword">new</span> Adapter2(ps2KeyBoard);</span><br><span class="line">        laptop.test01(target1);<span class="comment">//方法2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>适配器模式主要是用来解决接口的不兼容问题，具体的解决思想，就是通过创建适配器类来对无法直接调用的对象进行包装，然后通过适配器类来调用这个不兼容的对象，返回我们需要的东西。<br>项目链接:<a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/adapter" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/adapter</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>建造者模式</title>
      <link href="/2018/02/10/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于建造者模式的复习回顾，建造者，模式分离了对象的构造和装配过程，适用于某一个对象构建过程比较复杂的情况下使用，<br>同时，装配以及构造之间实现了解耦，不同的构造器，相同的装配也能够做出不同的对象。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>1.对象的建造非常复杂，需要很多的步骤处理。<br>2.构建过程的每一步都不是必须要执行的，但是建造出来的还是”同一个东西”，只是出来的产品有一些属性会稍微”弱”一些。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在建造者模式中有如下的一些对象:<br>2.1 Builder：给出一个抽象接口，以规范产品对象的各个组成成分的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。<br>2.2 ConcreteBuilder：实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。 在建造过程完成后，提供产品的实例。<br>2.3 Director：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。<br>2.4 Product：要创建的复杂对象。<br>具体的UML示意图如下:<br><img src="http://img.hb.aicdn.com/b1e35377704552fe11d867b7978f7d61f97a8ae44bbe-GStIAg_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>这里我们通过组装一台汽车的例子，来理解这个设计模式：<br>首先是建造汽车的接口定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function">Engine <span class="title">buildEngine</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Bettery <span class="title">buildbettery</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Suspension <span class="title">buildSuspension</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>装配零件的接口定义:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarDirector</span> </span>&#123;</span><br><span class="line">    <span class="function">Tesla <span class="title">createTesla</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Engine类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String power;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Engine</span><span class="params">(String power)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.power = power;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> power;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPower</span><span class="params">(String power)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.power = power;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>汽车类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tesla</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line">    <span class="keyword">private</span> Bettery bettery;</span><br><span class="line">    <span class="keyword">private</span> Suspension suspension;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Engine <span class="title">getEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(Engine engine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bettery <span class="title">getBettery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bettery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBettery</span><span class="params">(Bettery bettery)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bettery = bettery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Suspension <span class="title">getSuspension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suspension;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuspension</span><span class="params">(Suspension suspension)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suspension = suspension;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其他的几个汽车零部件代码的比较类似，这里省略。<br>下面是汽车的构建类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeslaBuilder</span> <span class="keyword">implements</span> <span class="title">CarBuilder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Engine <span class="title">buildEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"组装发动机中..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Engine(<span class="string">"10000P"</span>);<span class="comment">//实际使用中，这边通常和工厂模式搭配，通过工厂模式来返回一个对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bettery <span class="title">buildbettery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"安装电池中...."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bettery(<span class="string">"1024"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Suspension <span class="title">buildSuspension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"安装悬挂中..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Suspension(<span class="string">"112"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最后是汽车的装配类，使用TeslaBuilder类中的build方法来进行装配。</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeslaDirector</span> <span class="keyword">implements</span> <span class="title">CarDirector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TeslaBuilder teslaBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeslaDirector</span><span class="params">(TeslaBuilder teslaBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.teslaBuilder = teslaBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tesla <span class="title">createTesla</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Engine e=teslaBuilder.buildEngine();</span><br><span class="line">        Suspension s=teslaBuilder.buildSuspension();</span><br><span class="line">        Bettery b=teslaBuilder.buildbettery();</span><br><span class="line">        Tesla tesla=<span class="keyword">new</span> Tesla();</span><br><span class="line">        tesla.setBettery(b);</span><br><span class="line">        tesla.setEngine(e);</span><br><span class="line">        tesla.setSuspension(s);<span class="comment">//看到没?一步一步装的</span></span><br><span class="line">        <span class="keyword">return</span> tesla;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>建造者模式和前面讲的抽象工厂有点”像”,但本质是不一样的，建造者模式，它是通过一步一步的装配来完成对象的创建，而对于抽象工厂，这个装配的过程是不需要考虑的，它考虑的只是如何取不同的”原材料”然后组装成一个新东西。<br>项目链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/builder" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/builder</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>工厂模式</title>
      <link href="/2018/02/09/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于工厂模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>1.类不知道自己要创建哪一个对象<br>2.类用它的子类来指定创建哪个对象<br>3.客户需要清楚创建了哪一个对象</p><h2 id="2-三种不同工厂的区别"><a href="#2-三种不同工厂的区别" class="headerlink" title="2.三种不同工厂的区别"></a>2.三种不同工厂的区别</h2><p>简单工厂：针对一种产品。缺点是破坏了开放，封闭原则。<br>工厂模式: 对简单工厂做了相应的改进，改正了简单工厂破坏开放封闭原则的错误。<br>抽象工厂：针对于多种产品，和简单工厂以及工厂模式并无太大的关联。</p><h2 id="3-UML表示"><a href="#3-UML表示" class="headerlink" title="3.UML表示"></a>3.UML表示</h2><p>简单工厂：<br><img src="http://img.hb.aicdn.com/916c32275fa5a2862bbd6f75554d704736ac9a6352e0-TAijhT_fw658" alt=""><br>工厂模式:<br><img src="http://img.hb.aicdn.com/3432d48b509befcc539183a26a88b670c167601b578c-VYYZqT_fw658" alt=""><br>抽象工厂:<br><img src="http://img.hb.aicdn.com/13149049e34fccae194138e013ef85f44f8e4c568355-N4Gnol_fw658" alt=""></p><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h2><p>首先是简单工厂的代码实现：<br>我们以一个手机加工厂的例子展开，首先是Phone接口的相关代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>接下来是每一个具体厂商的手机：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuanWei</span> <span class="keyword">implements</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"不用不是中国人？"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMi</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"燃烧吧!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Iphone</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"只要$999"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>普通工厂类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Phone <span class="title">createPhone</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"小米"</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> XiaoMi();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"华为"</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> HuanWei();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"Iphone"</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Iphone();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span>  <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其次是工厂模式的代码实现，Phone接口与简单工厂类似，新增手机工厂接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line">     <span class="function">Phone <span class="title">createPhone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Iphone</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"只要$999"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IphoneFactory</span> <span class="keyword">implements</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">createPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iphone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后是抽象工厂的代码实现，抽象工厂主要是整合多个不同的对象，例如下面的例子：分别使用不同的零件就能整合出手机以及个人PC。<br>CPU接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CPU</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其他零部件的接口类似，这里省略。<br>电子加工工厂接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ElectronicFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">CPU <span class="title">createCpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">GraphicsProcessor <span class="title">createG</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Screen <span class="title">createScreen</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>手机加工工厂类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneFactory</span> <span class="keyword">implements</span> <span class="title">ElectronicFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CPU <span class="title">createCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pcpu();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GraphicsProcessor <span class="title">createG</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PhoneG();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Screen <span class="title">createScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PhoneScreen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>PC机加工工厂类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PcFactory</span> <span class="keyword">implements</span> <span class="title">ElectronicFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CPU <span class="title">createCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pcpu();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GraphicsProcessor <span class="title">createG</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PcG();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Screen <span class="title">createScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PcScreen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后，给出项目的代码连接：<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/factory" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/factory</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>单例模式</title>
      <link href="/2018/02/08/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于单例模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>单例模式的作用主要是保证一个类只有一个实例，并且提供一个访问这个实例的全局访问点，通常在以下的场景中使用：<br>1.读取配置文件<br>2.设计数据库连接池等等</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p><img src="http://img.hb.aicdn.com/0beda02b7655c492d6394df1c891edf4fc547d6938e7-BcXyYr_fw658" alt=""><br>从上图中可以看出，单例模式结构图中只包含了一个单例的角色。</p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>常见的单例模式总共有6种，下面分别对这6种单例模式进行实现：<br>3.1 懒汉式<br>特点：懒汉式加载，能够实现延时加载，缺点是调用的效率不高。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lasy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lasy s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Lasy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Lasy <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s==<span class="keyword">null</span>)&#123;</span><br><span class="line">            s=<span class="keyword">new</span> Lasy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.2 饿汉式<br>特点：饿汉式加载,线程安全,效率极高。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hungry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Hungry instance=<span class="keyword">new</span> Hungry();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hungry</span><span class="params">()</span> </span>&#123;<span class="comment">//防止被反射创建</span></span><br><span class="line">        <span class="keyword">if</span>(instance!=<span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.3 双重检测<br>特点：减少了锁的粒度，比懒汉式更有效率。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheck</span> </span>&#123;</span><br><span class="line">   <span class="keyword">volatile</span> <span class="keyword">private</span> <span class="keyword">static</span> DoubleCheck instance=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheck <span class="title">getInstance</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">           Thread.sleep(<span class="number">300</span>);</span><br><span class="line">           <span class="keyword">synchronized</span> (DoubleCheck.class)&#123;</span><br><span class="line">               <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                   instance=<span class="keyword">new</span> DoubleCheck();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.4 枚举方式<br>特点：<br>通过枚举的方式实现单例，缺点是无法实现懒加载。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumSingleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singletonOperation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//功能处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.5 内部类方式<br>特点：<br>类加载的过程是线程安全的，所以线程安全。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticInner instance=<span class="keyword">new</span> StaticInner();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInner <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.6 序列化和反序列化实现单例<br>特点：<br>添加readResolve()方法，防止序列化和反序列化机制对单例的破坏，具体可以查看:<a href="http://www.hollischuang.com/archives/1144" target="_blank" rel="noopener">http://www.hollischuang.com/archives/1144</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BetterLasy</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BetterLasy s;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> BetterLasy <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s==<span class="keyword">null</span>)&#123;</span><br><span class="line">            s=<span class="keyword">new</span> BetterLasy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后附上代码的连接：<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/singleton" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/singleton</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原型模式</title>
      <link href="/2018/02/07/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于原型模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>1.1.对象类型只有在运行期才能够确定。<br>1.2.克隆一直对象的副本。<br>1.3.大同小异的一些对象。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在原型模式中通常用以下的几类对象:<br>Client角色：使用原型对象的客户程序<br>Prototype角色：规定了具体原型对象必须实现的接口（如果要提供深拷贝，则必须具有实现clone的规定）<br>ConcretePrototype：从抽象原型派生而来，是客户程序使用的对象，即被复制的对象。此角色需要实现抽象原型角色所要求的接口。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/6494dd27a94eba0101c37441bace3cf13fb9b83b38aa-UjlbSN_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面举一个忍者使用影分身术的例子：<br>定义普通忍者类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ninjia_A</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rp;<span class="comment">//血槽</span></span><br><span class="line">    <span class="keyword">private</span> Ninjutsu ninjutsu;<span class="comment">//忍术</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ninjia_A</span><span class="params">(String name, <span class="keyword">int</span> rp,Ninjutsu ninjutsu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.rp = rp;</span><br><span class="line">        <span class="keyword">this</span>.ninjutsu=ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Ninjutsu <span class="title">getNinjutsu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNinjutsu</span><span class="params">(Ninjutsu ninjutsu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ninjutsu = ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">         Ninjia_A nn;</span><br><span class="line">         nn= (Ninjia_A) <span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="keyword">return</span> nn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRp</span><span class="params">(<span class="keyword">int</span> rp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rp = rp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>S级忍者:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ninjia_S</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2169380777227967513L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rp;<span class="comment">//血槽</span></span><br><span class="line">    <span class="keyword">private</span> Ninjutsu ninjutsu;<span class="comment">//忍术</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ninjia_S</span><span class="params">(String name, <span class="keyword">int</span> rp,Ninjutsu ninjutsu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.rp = rp;</span><br><span class="line">        <span class="keyword">this</span>.ninjutsu=ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Ninjutsu <span class="title">getNinjutsu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNinjutsu</span><span class="params">(Ninjutsu ninjutsu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ninjutsu = ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRp</span><span class="params">(<span class="keyword">int</span> rp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rp = rp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">dclone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException, IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line">        ByteArrayInputStream bis=<span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>忍术类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ninjutsu</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> damage;<span class="comment">//破坏力</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ninjutsu</span><span class="params">(<span class="keyword">int</span> damage, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.damage = damage;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDamage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> damage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDamage</span><span class="params">(<span class="keyword">int</span> damage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.damage = damage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        Ninjia_A kakaxi=<span class="keyword">new</span> Ninjia_A(<span class="string">"旗木.卡卡西"</span>,<span class="number">50</span>,<span class="keyword">new</span> Ninjutsu(<span class="number">500</span>,<span class="string">"影分身"</span>));</span><br><span class="line"></span><br><span class="line">        Ninjia_A kk;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             kk= (Ninjia_A) kakaxi.clone();</span><br><span class="line"></span><br><span class="line">             System.out.println(kakaxi.getNinjutsu()==kk.getNinjutsu());</span><br><span class="line">            <span class="comment">// System.out.println(kk.getNinjutsu().getName()+"  "+kk.getNinjutsu().getDamage());</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Ninjia_S naturo=<span class="keyword">new</span> Ninjia_S(<span class="string">"漩涡.那乳托"</span>,<span class="number">500</span>,<span class="keyword">new</span> Ninjutsu(<span class="number">1000</span>,<span class="string">"影分身"</span>));</span><br><span class="line">        Ninjia_S nn;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nn= (Ninjia_S) naturo.dclone();</span><br><span class="line">            System.out.println(naturo.getNinjutsu()==nn.getNinjutsu());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试结果:<br><img src="http://img.hb.aicdn.com/5a48aaa1121b2205e3a42bc20467d2df713f01ecd5d-IVzWPz_fw658" alt=""></p><p>结论：原型模式更像一种编程的技巧，很少单独使用，注意的是在Java中，除了基本数据类型外，其他的都是引用类型，这个必须注意。<br>最后，附上文章的代码下载连接：<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/prototype" title="源代码下载" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/prototype</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>每个极客都应该知道的Linux技巧</title>
      <link href="/2018/01/14/%E6%AF%8F%E4%B8%AA%E6%9E%81%E5%AE%A2%E9%83%BD%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84Linux%E6%8A%80%E5%B7%A7/"/>
      <content type="html"><![CDATA[<p>摘要:<br>转载自:<a href="http://blog.csdn.net/ww122081351/article/details/22716067" target="_blank" rel="noopener">http://blog.csdn.net/ww122081351/article/details/22716067</a><br><a id="more"></a><br>正文:<br>是什么区分开普通的Linux用户和超级极客的呢？很简单：用在学习那些使长时工作转变为一瞬间工作的技巧、诀窍、秘诀和技术上的时间。如果你想提高效率而又不用做这些搜集资料的跑腿活儿，那我们已经收集了50多条简单易学的Linux技巧，以帮助你更潇洒地工作，并且最大限度的利用你的电脑。开始享受吧！</p><p>1：检查不是由你运行的程序</p><p>难度：高级</p><p>应用程序：bash（译注：UNIX或者LINUX的shell）</p><p>想象下这个场景-你已经准备好了要和同事在办公室里对战一局快速的Crack Attack（译注：一款免费的OpenGL游戏，类似俄罗斯方块），不料却发现，当你正准备要击败你这个傲慢的下属时，方块却停止了-是什么让你的机器变得这么慢？这肯定是因为其他的用户运用他们娴熟的经验来盗取你宝贵的CPU时间、服务器或者其他的诡异方式，真烦人！</p><p>好，让我们列举出系统中所有不是由你运行的程序！</p><p>ps aux | grep -v <code>whoami</code> </p><p>或者，更巧妙些的是，为什么不列出最占用时间的前十个程序呢：</p><p>ps aux–sort=-%cpu | grep -m 11 -v <code>whoami</code> </p><p>也许最好使用root权限来运行这条指令，因为这样可以过滤出大部分活跃的后台程序。现在你有了这些信息，你可以终止他们的进程，但是更“卑鄙”的是反复地在他们的桌面上运行xeyes（译注：Linux下的一条好玩的命令）！</p><p>2：在多个文件中替换掉相同的文本</p><p>难度：中等</p><p>应用程序：find（译注：Linux下的一条命令）/Perl</p><p>如果你有个文件，想在多个位置进行替换，这里有很多方法来实现。调用test[someting]把当前目录里所有文件中的Windows替换成Linux，你可以像这样运行它：</p><p>perl -i -pe ’s/Windows/Linux/;’ test* </p><p>要替换当前目录以及下层目录里所有文件中的Windows为Linux，你可以这样运行：</p><p>find . -name ’<em>.txt’ -print | xargs perl -pi -e’s/Windows/Linux/ig’ </em>.txt </p><p>或者如果你更需要让它只作用于普通文件上：</p><p>find -type f -name ’*.txt’ -print0 | xargs –null perl -pi -e ’s/Windows/Linux/’ </p><p>节省了大量的时间并且获得了高水平的大师等级！</p><p>3：合并一个不稳定的终端</p><p>难度：简单</p><p>应用程序：bash</p><p>我们都已经做过这件事了-偶尔使用less或者cat来列出一个文件，或者以浏览二进制文件而结束，这通常包含各种可以轻易弄乱你的终端显示的控制代码、警报声、一些有趣的字符，以及一些奇怪的颜色组合，最后，你的字体将会被一些难以辨认的字符所替代，而你却不知道该怎么办。显然bash仍然继续工作着，但是你就是不能明白到底发生了什么！发送一个初始化命令给这个终端：</p><p>reset </p><p>然后一切就再次恢复正常了。</p><p>4：创造Mozilla关键词</p><p>难度：简单</p><p>应用程序：Firefox/Mozilla</p><p>在浏览器上的一个有用的特征是，它们有一种能力，可以通过输入gg onion来通过Google搜索onion这个词的一切。同一功能在Mozilla上也可实现，通过单击Bookmarks（书签）&gt;Manage Bookmarks（管理书签）然后添加一个新的书签，添加的URL就像这样：</p><p><a href="http://www.google.com/search?q=%s" target="_blank" rel="noopener">http://www.google.com/search?q=%s</a> </p><p>现在选择书签编辑器中的条目并且点击Properties（属性）按钮，现在输入一个类似gg的关键字（或者可以是你选择的任何字符）就行了。在URL中的%s将被关键字之后的文本内容替代。你可以用这种方法向其他一些依赖你当前URL信息的网站发送请求。</p><p>或者，右击一个搜索区域然后选择菜单选项“为这个搜索添加一个关键词…”。接下来的会话将允许你使用一个指定的关键词。</p><p>5：运行多种X会话</p><p>难度：简单</p><p>应用程序：X</p><p>如果你给别人分享了你的Linux box（），而厌烦了不断的登入、登出，当你知道了这不是必要的时候，可能会如释重负。假设你的电脑以图形模式启动（runlevel 5），通过同时按下Control+Alt+F1键-你将得到一个登陆提示。输入你的登录名以及密码然后执行：</p><p>startx – :1 </p><p>来进入你的图形环境。按下Ctrl+Alt+F7来回到在你之前的用户会话，如果想回到你自己的用户会话则按下Ctrl+Alt+F8。</p><p>你可以重复使用这项技巧：F1键到F6键可以识别六个控制台会话，而F7到F12可以识别六个X会话。警告：尽管这在多数情况下是适用的，但是不同的变种可能用不同的方式来实现这项功能。</p><p>6：更快地浏览</p><p>难度：简单</p><p>应用程序：KDE（译注：一种Linux的桌面环境）</p><p>KDE是一个虽然小众，但是在提升你的网页浏览经验方面很有用的选择。启动一个KDE控制中心，然后从工具条中选择System（系统）&gt;KDE performance。现在你可以选择预加载浏览器实例。实际上，这意味著浏览器在开机的时候就开始运行，在你用之前都保持隐藏状态。当你想要使用它的时候，它几乎是瞬间出现。</p><p>7：简单地备份你的网站</p><p>难度：简单</p><p>应用程序：Backups</p><p>如果你想要从一台电脑上备份一个目录，但你仅仅想要复制改变的文件到它的备份而不是复制所有的东西到各自的备份，你可以使用工具rsync来实现它。你需要在这个远程的源备份计算机上有一个账户。下面是这条命令：</p><p>rsync -vare ssh <a href="mailto:jono@192.168.0.2" target="_blank" rel="noopener">jono@192.168.0.2</a>:/home/jono/importantfiles/* /home/jono/backup/ </p><p>这样我们就备份了192.168.0.2地址上/home/jono/importantfiles/目录下的所有文件到当前机器上的/home/jono/backup目录下。</p><p>8：使你的时钟保持准时</p><p>难度：简单</p><p>应用程序：NTP</p><p>如果你发现电脑上的时钟似乎与时间脱轨了，你可以使用一个特殊的NTP工具，来确保它准到只有穿实验服的人才会需要的程度。你需要安装ntpdate工具，它通常包含在NTP包中，然后你就可以与NTP服务器保持同步了：</p><p>ntpdate ntp.blueyonder.co.uk </p><p>可以在<a href="http://www.eecis.udel.edu/~mills/ntp/clock1b.html上获得相应的NTP服务器的列表。如果你修改了你的开机程序并且在脚本中包含这些命令，就可以确保无论何时你启动电脑都是完全准时的。你还可以运行一个定时任务来校对时间。" target="_blank" rel="noopener">www.eecis.udel.edu/~mills/ntp/clock1b.html上获得相应的NTP服务器的列表。如果你修改了你的开机程序并且在脚本中包含这些命令，就可以确保无论何时你启动电脑都是完全准时的。你还可以运行一个定时任务来校对时间。</a></p><p>9：找到最大的文件</p><p>难度：简单</p><p>应用程序：Shell</p><p>计算机中一个常见的问题是，你可能想删一部分大的文件（类似音频或视频片段）。如下你可以找到当前目录中最大的那个文件：</p><p>ls -lSrh </p><p>“r”的作用是将大的文件列在后面，而“h”则是给出易于人们阅读的输出(MB或者诸如此类)。你也可以搜寻最大的MP3/MPEG文件：</p><p>ls -lSrh <em>.mp</em> </p><p>你也可以通过下面这条命令搜寻最大的目录：</p><p>du -kx | egrep -v ”./.+/” | sort -n </p><p>10：Nautilus快捷键</p><p>难度：简单</p><p>应用程序：Nautilus（译注：Linux图形界面中的一个文件管理器）</p><p>尽管很多文件管理器近日来被设计为使用鼠标进行管理，但有时用键盘还是方便些。Nautilus有一些键盘快捷键，可以使你快速浏览文件：</p><p>打开一个定位文件 – Ctrl+L<br>打开父文件夹 – Ctrl+Up<br>用方向键来浏览当前文件夹<br>你也可以使用‘emblems’来定制文件图标。这里有少量的应用于个别文件或者组的图象展示。打开Edit(编辑) &gt; Backgrounds and Emblems(背景和符号)菜单条目，然后拖放你想要的图片即可。</p><p>11：整理你的数据库</p><p>难度：简单</p><p>应用程序：MySQL</p><p>无论何时你改变一个MySQL数据库的结构，或者从中删掉大量的数据，文件都有可能被分散，并导致一些性能损失。尤其是当运行查询命令时这个情况最容易发生。每当你要改动数据库的时候，记得运行这个优化器：</p><p>mysqlcheck -o <databasename> </databasename></p><p>也许你会发现，如果你使用VARCHAR文件，有必要定期的整理你的数据库表：这个变长列（variable-length columns）是非常倾向于分裂的。</p><p>12：更快的邮件</p><p>难度：简单</p><p>应用程序：KMail</p><p>连三秒钟都不想花费在找邮箱客户端上面？不想被桌面上堆积成山日渐腐烂的图标搞得找不到鼠标指针？不管你正在KDE里干什么，按几下键盘就可以发邮件了。输入：</p><p>mailto:<a href="mailto:plop@ploppypants.com" target="_blank" rel="noopener">plop@ploppypants.com</a> </p><p>按下return，KMail将会自动启动，为你的至理名言做好准备。你甚至不需要填写完整的邮件地址。这对Internet地址也是有效的：尝试输入<a href="http://www.slashdot.org来启动浏览器。" target="_blank" rel="noopener">www.slashdot.org来启动浏览器。</a></p><p>13：同化你的构造</p><p>难度：简单</p><p>应用程序：GCC</p><p>如果你运行一个拥有适量RAM的多处理机系统（SMP），你会发现，在写代码时，运行一个parallel make很有好处。与按照默认方式运行make并执行serial builds相比，parallel build 是一种很有效的改善方法。让make在building的时候允许同时存在多个child，用如下的-j转换即可：</p><p>make -j4; make -j4 modules </p><p>14：节省电池电源</p><p>难度：中等</p><p>应用程序：hdparm</p><p>很可能你已经对使用hdparm来调整一个硬件驱动很熟悉了，但是它还能节约你的笔记本的电池寿命，或者通过降低硬盘转速来使生活更宁静。</p><p>hdparm -y /dev/hdb </p><p>hdparm -Y /dev/hdb </p><p>hdparm -S 36 /dev/hdb </p><p>按顺序，这些命令将让硬件转换成Standby（待命）模式，再转换成Sleep（睡眠）模式，并且最终设置Automatic（自动）旋转超时。这个结尾包含一个以5秒为单位的一块块数字变量（例如，值为12就等同于一分钟）。</p><p>顺便说一下，这个降低旋转时间至5秒为单位的习惯真值得拿一个特别的用户友好奖——这个值的设置也许有什么历史原因，但我们不知道。如果你恰好知道为什么，请来信告知我们！</p><p>15：无线速度管理</p><p>难度：中等</p><p>应用程序：iwconfig</p><p>一个radio发送/接受设备和其他设备间的传输速度，取决于有多少可用信号。在信号减弱的时候如需维持传输，就需要降低radio的传输速度。一般情况下，radio都会自己找到可用信号，并自动选择最快的速度。</p><p>在边缘区域中，信号强度勉强够用，这时候就可能因radio不断调试连接速度而造成不必要的包丢失。如果不能加强天线增益，或移动设备位置来获取更充足的信号，可以尝试强制让card同步到一个较低的速率。这样，radio就会减少调试频率，实际上，还会比使用持续触发的链接传输得快一些。不同的驱动器有不同的链接速度设置方法。在Linux中，可用iwconfig来设置速度：</p><p>iwconfig eth0 rate 2M </p><p>这个指令能强制使广播总是同步在2Mbps，即使还存在其他可用速度。你也可以设置一个明确的速度作为上限，允许卡自动按照任何低于这个上限的速度来工作，但是不能高于它。例如，你可以把它作用于上文举例的连接上：</p><p>iwconfig eth0 rate 5.5M auto </p><p>如上的指令可以让驱动器将速度上限设为5.5Mbps，只慢不快。想要将card恢复为全自动缩放，只需要制定它自己自动工作。</p><p>iwconfig eth0 rate auto </p><p>通常卡在1Mbps时比它们在11Mbps时可以延伸的更远。在这两种速率之间，Orinoco卡有12dB的差别，即降低数据速率可获得的潜在传输距离的四倍。</p><p>16：疏通开端口</p><p>难度：中等</p><p>应用程序：netstat</p><p>要获取在Linux服务器上处于监听状态的网络服务器的列表，可使用netstat程序：</p><p>root@catlin:~# netstat -lnp </p><p>Active Internet connections (only servers) </p><p>Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name </p><p>tcp 0 0 0.0.0.0:5280 0.0.0.0:* LISTEN 698/perl </p><p>tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 217/httpd </p><p>tcp 0 0 10.42.3.2:53 0.0.0.0:* LISTEN 220/named </p><p>tcp 0 0 10.42.4.6:53 0.0.0.0:* LISTEN 220/named </p><p>tcp 0 0 127.0.0.1:53 0.0.0.0:* LISTEN 220/named </p><p>tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 200/sshd </p><p>udp 0 0 0.0.0.0:32768 0.0.0.0:* 220/named </p><p>udp 0 0 10.42.3.2:53 0.0.0.0:* 220/named </p><p>udp 0 0 10.42.4.6:53 0.0.0.0:* 220/named </p><p>udp 0 0 127.0.0.1:53 0.0.0.0:* 220/named </p><p>udp 0 0 0.0.0.0:67 0.0.0.0:* 222/dhcpd </p><p>raw 0 0 0.0.0.0:1 0.0.0.0:* 7 222/dhcpd </p><p>如上消息告诉你PID为698的进程是一个绑定在5280端口的Perl进程。如果你不是超级用户，系统将不会显示哪个程序是运行在哪个端口上的。</p><p>17：更快的硬件驱动</p><p>难度：高级</p><p>应用程序：hdparm</p><p>也许你已经知道hkparm工具可以用于测试硬盘速度和更改一些设置。它还可以用于优化驱动性能，并且开启一些默认关闭的功能。在我们开始之前，敬告您，改变驱动选项可能会造成数据损坏，所以首先请备份你所有的重要数据。如下命令可以用来测试速度：</p><p>hdparm -Tt /dev/hda </p><p>你将会看到类似于这样的东西：</p><p>/dev/hda: </p><p>Timing buffer-cache reads: 128 MB in1.64 seconds =78.05 MB/sec </p><p>Timing buffered disk reads:64 MB in 18.56 seconds = 3.45MB/sec </p><p>现在我们可以尝试让它提速。找出你的驱动目前设置使用的是哪个选项，然后传递给hdparm这个硬件的名称:</p><p>hdparm /dev/hda </p><p>/dev/hda: </p><p>multcount=16 (on) </p><p>I/O support=0 (default 16-bit) </p><p>unmaskirq=0 (off) </p><p>using_dma=0 (off) </p><p>keepsettings =0 (off) </p><p>readonly =0 (off) </p><p>readahead=8 (on) </p><p>geometry = 40395/16/63, sectors = 40718160, start = 0 </p><p>这相当于一个默认设置。多数的Linux发行版本都会选择一个可以运行在多数硬件上的安全选项。为了获得更快的速度，你可能想要激活dma模式，然后当然要调整I/O支持。多数现代计算机支持模式3，这是一个近乎双倍通量的32位转换模式。你也可以尝试：</p><p>hdparm -c3 -d1/dev/hda </p><p>然后返回这个速度，查看一下不同。检验你的硬件支持哪些模式，然后可以在hdparm的man手册中学习如何设置它们。</p><p>18：在你手中的可用时间</p><p>难度：高级</p><p>应用程序：Perl</p><p>对计算来说，浪费的资源就是那些本可以派上更好的用场的资源。不管你还运行了什么别的程序，为什么不尝试运行一个进程，在终端标题栏实时显示当前的平均负载呢？</p><p>将这个存为一个脚本并命名为tl，然后把它存到你的~/bin目录下：</p><p>#!/usr/bin/perl -w </p><p>use strict; </p><p>$|++; </p><p>my $host=<code>/bin/hostname</code>; </p><p>chomp $host; </p><p>while(1) { </p><p>open(LOAD,”/proc/loadavg”) || die ”Couldn’t open /proc/loadavg: $!\n”; </p><p>my @load=split(/ /,<load>); </load></p><p>close(LOAD); </p><p>print ”$host: $load[0] $load[1] $load[2] at ”, scalar(localtime); </p><p>print ”07″; </p><p>sleep 2; </p><p>} </p><p>如果你想用用load average和你登陆的机器的当前时间，来替换titlebar名字，与西宁tl&amp;即可。它会很恰当的在后台运行，即使你运行一个类似Vim的交互式程序。</p><p>19：不使用X完成抓取一次屏幕截图</p><p>难度：简单</p><p>应用程序：Shell</p><p>确实有很多屏幕捕获的工具，但是他们大部分都是基于X的。这导致了一个问题，当你运行一个X应用程序时，将会干扰这个你想要抓取的应用程序——或许是一个游戏或者甚至是一个Linux安装程序。但如果你使用了超棒的ImageMagick（译注：一个开源的图片处理工具集和开发包）导入命令，你就可以通过控制台来对X模块进行抓取。很简单，打开一个虚拟终端（例如Ctrl+Alt+F1）然后输入如下：</p><p>chvt 7; sleep 2; import -display :0.0 -window root sshot1.png; chvt 1; </p><p>chvt命令改变了虚拟终端，而sleep命令给重绘屏幕提供了一个时间。导入命令会在最后的chvt命令把你再次打回到虚拟终端之前，捕获所有的显示并且保存到一个文件中。请确保你把所有的命令都输入在同一行中。</p><p>这是甚至在Linux安装程序上也是有效的，很多安装程序都只留下一个控制台而转去后台运行——一个一流的到处运行的屏幕抓取器只需要加载一些它所需要的库到一个floppy（译注：磁盘）/CD上。</p><p>20：远程访问你的程序</p><p>难度：简单</p><p>应用程序:X</p><p>如果你想要躺在床上使用你的Linux笔记本从你的Window机器上访问你的应用程序，可以使用SSH来实现。首先你需要在/etc/ssh/sshd_config中激活以下设置：</p><p>X11Forwarding yes </p><p>现在我们可以使用如下命令在192.168.0.2上运行GIMP：</p><p>ssh -X 192.168.0.2 gimp </p><p>21：用到man手册</p><p>难度：简单</p><p>应用程序：man</p><p>如果你在一个特殊的项目或者命令中需要帮助，man手册是一个好的入门。通常你使用man<command>来访问man手册，但是你也可以通过一个特殊的man页描述的关键词来搜索man页。举例来说，搜索所有详述login的man页：</p><p>man -k login </p><p>当你访问了一个man页，你也可以使用斜杠键来搜索一个特定的词而不是用man页本身。在你的键盘上按下“ / ”然后输入搜索项是非常简单的。</p><p>22：和你的医生对话</p><p>难度：简单</p><p>应用程序：Emacs</p><p>如果说Emacs只是个文本编辑器，就好像说Triumph只是个摩托车，或者说世界杯就是个四年一度的足球赛。好吧，它确实是个文本编辑器，但那只是一小~~~部分。举个栗子？打开编辑器，按下Esc键，紧接着按下X，然后进入doctor：你将会进入到一个离奇的对话中，有一个假想的但是熟练的精神治疗师。如果你想要磨蹭你的时间，这是一个很好的方法。</p><p>Esc-X tetris </p><p>会将你的‘编辑器’转变成一个老的、受欢迎的游乐场游戏。</p><p>疯狂到此为止了吗？绝对没有！检查你的发行版本的包，列出他们在你的Emacs上捆绑的其他功能：我们看到有国际象棋，Perl集成，IRC chat（译注：一种聊天工具），法文翻译，HTML转换，一个Java开发环境，灵巧的编辑，甚至还有一个被称为“semantic bovinator”（语义纠错）的东西。我们确实对最后一个能做什么的毫无头绪，但是我们断定无论如何你都敢尝试它！（请先阅读免责声明！）</p><p>23：生成包关联图表</p><p>难度：简单</p><p>应用程序：Debian</p><p>Debian系统最受争议的是它能安装一个包，并自动满足其附属（dependency）。如果你想要以图形形式表现这些包之间的关系（这对于了解系统如何协调工作是非常有用的），你可以使用Debian中非自由的Graphviz包（apt-get install graphviz）然后使用如下命令：</p><p>apt-cache dotty &gt; debian.dot </p><p>这个命令会生成图片文件并存入dotty：</p><p>dotty debian.dot </p><p>24：卸载忙碌状态的驱动</p><p>难度：简单</p><p>应用程序：bash</p><p>你应该很熟悉这种情况-尝试去卸载一个驱动，但是系统却告诉你它处于忙碌状态。但是什么程序在占用呢？一个短小的单行代码将告诉你：</p><p>lsof +D /mnt/windows </p><p>这将返回命令和进程ID以及任何正在访问/mnt/windows目录的任务。接下来你就可以定位它们，或者使用kill命令来终结它们。</p><p>25：文本文件的转换</p><p>难度：简单</p><p>应用程序：recode</p><p>recode是一个小而实用并且可以帮你在不同平台上使用文本文件时节省大量精力的工具。它的缺陷主要是源于换行符。一些系统使用一个换行字符，而其他的一些系统使用回车。更多其他的系统两个都用。最后的结果就是，如果你从一个平台移动文本文件到另一个平台上，你会有太多或太少的换行符，还会有很多奇怪的字符残留。</p><p>然而，recode命令的参数是有一些神秘的，所以为什么不把这种技巧和HACK 26结合到这个功能中，然后建立一些有用的别名：</p><p>alias dos2unix=‘recode dos/CR-LF..l1′ </p><p>alias unix2win=‘recode l1..windows-1250′ </p><p>alias unix2dos=‘recode l1..dos/CR-LF’ </p><p>还有很多recode选项-它们确实可以转换大量字符间的设置。查阅man手册来获取更多信息。</p><p>26：只列出今天的文件</p><p>难度：简单</p><p>应用程序：Various</p><p>你可能熟悉这个问题，今天早些时候你创建了一个文本文档，而现在立刻就需要它。然而，你想不起来你给它起了个什么可笑的名字，作为一个熟练的geek，你的家文件夹被836个不同的文件填满了。那你要如何找到它呢？哈哈，这里有很多方法，但是这个小技巧告诉你管道和结合使用两个强力的shell命令是多么有效：</p><p>ls -al –time-style=+%D | grep <code>date +%D</code> </p><p>ls命令的参数使得这个日期戳以一种特殊的方式呈现。这个狡猾的位就是这样传递给grep来输出的。grep的参数是它自己的命令（因为是倒引号所以执行），用来将当前的日期替代成匹配的字符。你可以轻易的修改它来搜索其他特别的日期、时间、文件大小或者任何东西。结合它与HACK 26是非常节省输入的。</p><p>27：避免常见的拼写错误和长命令</p><p>难度：简单</p><p>应用程序：Shell</p><p>这个alias命令对于设立长命令的快捷键是有用的，或者说是聪明的事情。HACK 25中，我们可以通过以下命令来得到一个新命令，lsnew：</p><p>alias lsnew=“ ls -al –time-style=+%D | grep <code>date +%D</code> ” </p><p>然而alias还有其他的用处。例如，解决常见的拼写错误。有多少次你在改变父目录时忽略了空格？不用再苦恼了！</p><p>alias cd..=“cd ..” </p><p>作为一种选择，试试重写一些已经存在的命令怎么样？</p><p>alias ls=“ls -al” </p><p>像我们一样节省一些按键，或者你总是想要完成清单。</p><p>要为每一个会话激活这些快捷键，只用添加alias命令到你的用户里家文件目录中的.bashrc文件中。</p><p>28：更改Mozilla的秘密设置</p><p>难度：简单</p><p>应用程序：Mozilla</p><p>如果你想要改变Mozilla操作，但是在首选项中并没有提供可以点击的选项来帮助你，这里有一个特殊的模式可以让你在Mozilla中激活，这样你就能改变一切了。要访问它，在地址栏中输入这些：</p><p>about:config </p><p>这样你就可以改变表中文件里每一个你感兴趣的设置的值。</p><p>其他有趣的模式包括总体信息（about：），插件详情（about:plugins），开发者信息（about:credits）和一些总体情况（about:mozilla）。</p><p>29：一个星星的背景</p><p>难度：简单</p><p>应用程序：KStars</p><p>你可能已经玩过KStars了，但是如何创造一个每次当你启动时就更新的KStars背景图呢？</p><p>KStars可以和–dump switch一起运行，它可以从你的启动设置中打印出一幅图片，但一点也不会增加GUI的负载。你可以写一个脚本来运行它生成一个每天都更换的桌面图片（或者你可以只是使用这个方法生成图片）。</p><p>像这样使用KStars：</p><p>kstars –dump –width 1024 –height 768 –filename = ~/kstarsback.png </p><p>你可以把它添加到~/.kde/Autostart文件夹的一个脚本中，一启动就开始运行。在浏览器中找到这个文件，把它拖到桌面上然后选择“设置为墙纸”，将它作为一个随机生成的背景图来使用。</p><p>30：直接打开一个SVG</p><p>难度：简单</p><p>应用程序：Inkscape</p><p>你可以通过shell运行Inkscape，然后直接通过一个URL来立刻编辑一张图片。只用输入：</p><p>inkscape <a href="http://www.somehost.com/graphic.svg" target="_blank" rel="noopener">http://www.somehost.com/graphic.svg</a> </p><p>记得要另存为一下！</p><p>31：不用编辑器来进行编辑</p><p>难度：中等</p><p>cut -c 8-15 file1 &gt; file2 </p><p>应用程序：好多</p><p>通常非常长的文件是很难用文本编辑器来进行操作的。如果你不时地要做这件事，可能你会发现用某些趁手的命令行工具会更快一些，就像下面这个例子一样。</p><p>从文件file1中打印第一列和第三列到文件file2中，我们可以使用awk：</p><p>awk ’{print $1, $3}’ file1 &gt; file2 </p><p>只输出file1中第八列到第十五列中的字符，我们可以使用cut：</p><p>cut -c 8-15 file1 &gt; file2 </p><p>要使用单词word2来替换文件file1中的单词word1，我们可以使用sed命令：</p><p>sed ”s/word1/word2/g” file1 &gt; file2 </p><p>通常这是一个比打开文本编辑器更快得到结果的方式。</p><p>32：只备份选中的文件</p><p>难度：中等</p><p>应用程序：tar</p><p>想要使用tar来备份一个目录中的某一文件？你可以使用-T标志。首先，用你想要备份的文件来创建一个文件：</p><p>cat &gt;&gt; /etc/backup.conf </p><h1 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h1><h1 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h1><h1 id="etc-yp-conf"><a href="#etc-yp-conf" class="headerlink" title="/etc/yp.conf"></a>/etc/yp.conf</h1><h1 id="etc-sysctl-conf"><a href="#etc-sysctl-conf" class="headerlink" title="/etc/sysctl.conf"></a>/etc/sysctl.conf</h1><p>EOF </p><p>然后运行tar，并使用-T标志指向刚刚创建的文件。</p><p>tar -cjf bck-etc-<code>date +%Y-%m-%d</code>.tar.bz2 -T /etc/backup.conf </p><p>现在你已经备份好了。</p><p>33：在文件中合并列</p><p>难度：中等</p><p>应用程序：bash</p><p>在文件中拆分列是非常简单的，合并它们稍微复杂一点。下面是一个简单的完成这项工作的脚本：</p><p>#!/bin/sh </p><p>length=<code>wc -l $1 | awk ’{print $1}’</code> </p><p>count=1 </p><p>[ -f $3 ] &amp;&amp; echo ”Optionally removing $3″ &amp;&amp; rm -i $3 </p><p>while [ “$count” -le “$length” ] ; do </p><p>a=<code>head -$count $1 | tail -1</code> </p><p>b=<code>head -$count $2 | tail -1</code> </p><p>echo ”$a$b” &gt;&gt; $3 </p><p>count=<code>expr $count + 1</code> </p><p>done </p><p>给这个脚本命名为merge.sh并且如下运行它：</p><p>chmod u+x merge.sh </p><p>现在，如果你想要合并file1和file2中的列到file3，下面是执行方法：</p><p>/path/to/merge.sh file1 file2 file3 </p><p>/path/to必须被你文件系统中的merge.sh位置所替代。</p><p>34：大小写敏感</p><p>难度：中等</p><p>应用程序：bash</p><p>有些时候，一个词在不同操作系统间没有任何区别，在Linux中，“Command”和“command”是不同的东西。当从Windows移动文件到Linux中时会造成一些麻烦。tr是一个小的shell功能，可以用于改变一堆文件。</p><p>#!/bin/sh </p><p>for i in <code>ls -1</code>; do </p><p>file1=<code>echo $i | tr [A-Z] [a-z]</code> </p><p>mv $i $file1 2&gt;/dev/null </p><p>done </p><p>通过执行这个，FILE1和fiLe2将被分别重命名为file1和file2.</p><p>35：Emacs中的宏指令</p><p>难度：中等</p><p>应用程序：Emacs</p><p>当编辑文件时，你通常会发现那些任务都是冗长和重复的，所以为了节约你的时间，你应该录制一个宏指令。在Emacs中，你将必须经历以下步骤：</p><p>1.按下 Ctrl+X 来开始一个记录。</p><p>2.插入所有你想要的按键和命令。</p><p>3.当你结束时按下Ctrl+X。</p><p>现在，你可以用以下命令来执行：</p><p>Ctrl -u <number> Ctrl -x e </number></p><p><number>是你想执行宏指令的次数。如果你输入的值为0，这个宏指令将被一直执行直到文件的结束。Ctrl -x e等同于Ctrl -u 1 Ctrl-x e。</number></p><p>36：简单的垃圾邮件清理</p><p>难度：中等</p><p>应用程序：KMail</p><p>垃圾邮件，或者不请自来的大批邮件，已经是个很普遍的问题，出于必要，现在几乎每个人都有某种形式的垃圾邮件保护。很多ISP包含垃圾邮件过滤，但是它并没有被设置的太过主动，而且通常很多都是简单的标记垃圾邮件，然后让它进来（ISP可不想因为丢失了你的邮件而被责备）。</p><p>所以，你在客户端上可能已经设置了反垃圾邮件的东西，要让它运行得更好，你可以写一些过滤器来移除被标记的垃圾邮件。标签是作为标题包含进来的。在KMail中，你可以只创建一个快速过滤器来将你的邮件装箱，或者干脆把它放到垃圾文件夹中。精确标题的使用将决定于你的ISP使用的软件，但是通常都是像SpamAssassin这样系统的类似X-Spam-Flag = YES。</p><p>在KMail中简单创建一个过滤器，选择Match Any of the Following（匹配下面的任何一个）然后输入标题细节和你需要的动作。应用过滤器到即将到来的邮件上，然后你的垃圾邮件的一半将不会再来打扰你了。</p><p>37：阅读OOo文档但不使用OOo</p><p>难度：中等</p><p>应用程序：OpenOffice.org（译注：一套跨平台办公室软件套件）</p><p>你曾经有没有过拿到一个OOo文档，但是没有OpenOffice.org来阅读？所以你就把它保存成普通的文本文件（.txt），但是被 StarOffice .sxw 格式所替代？这个文本文件可以得到拯救。首先，这个sxw文件是一个压缩文档，所以解压它：</p><p>unzip myfile.sxw </p><p>你想要的是名为’content.xml’的文件。不幸的是，它充满了xml的标签以至于非常难以辨认，所以要用一些Perl魔法将它们过滤出去：</p><p>cat content.xml | perl -p -e”s/&lt;[^&gt;]*&gt;/ /g;s/\n/ /g;s/ +/ /;” </p><p>这可能丢失了很多格式，但是至少现在它是可以阅读的。</p><p>38：搜索和执行</p><p>难度：中等</p><p>应用程序：find</p><p>find命令并不只是在寻找文件方面很有用，它在处理以下问题时也是非常有用的。这里有一个简短的例子。</p><p>假设我们有很多的压缩文件，现在我们想找到所有的压缩文件：</p><p>find . -name ’*.gz’ </p><p>将会定位出所有当前路径下的gzip文档。但是假设我们想要检查它们是否是有效文档，gunzip -vt选项将会帮我们实现这个，我们还可以机智地使用xargs结合这两个操作：</p><p>find . -name ’*.gz’ | xargs gunzip -vt </p><p>39：正确使用whois服务器</p><p>难度：中等</p><p>应用程序：whois</p><p>whois命令在追捕Internet上的恶棍以及给他们提供服务的ISP都是非常有用的。不幸的是，有很多whois服务器，如果你的反搜索一个域名，通常你不得不用一个指定的他们使用的TLD。然而，一些whois代理将自动转送你的查询到正确的服务器上。其中之一可以在<a href="http://whois.geektools.com/上获得。" target="_blank" rel="noopener">http://whois.geektools.com/上获得。</a></p><p>whois -h whois.geektools.complop.info </p><p>40：驱动挂载到哪里了？</p><p>难度：中等</p><p>应用程序：bash</p><p>人们常碰到的一个问题是，你刚接通电源时，就有太多的可挂载外设（USB驱动，flash内存卡，USB键驱动）消耗光了驱动？</p><p>实际上，所有的驱动都调用一个驱动——就像usb-storage，会在日志中存储很多有用的信息。尝试：</p><p>dmesg | grep SCSI </p><p>这将从dmesg输出过滤出指定的驱动规格。你可能发现一些这样的文本：</p><p>SCSI device sda: 125952 512-byte hdwr sectors (64 MB) </p><p>这个是说你的外设是在sda上。</p><p>41：自动执行USB装置</p><p>难度：高级</p><p>应用程序：hotplug脚本</p><p>当添加一个特殊的外设时想要运行一个指定的应用程序？USB hotplug后台进程可以帮你！当有USB装置添加到系统中时，这个服务就会得到通知。对于需要内核驱动的装置，hotplug后台进程将在/etc/hotplug/usb/下调用一个同名的脚本，例如，这里的一个名为usb-storage的脚本。你可以直接在这个脚本的后面添加你自己的命令（或者更好的是，在它的最后添加一行来让脚本在别的地方执行）。那么你就可以播放音乐，autosync文件（译注：影像文件），搜寻图片或者其他什么的。</p><p>对于不依赖于内核驱动的装置，有一个检查表，可以用来匹配USB产品和制造商ID。很多发行版已经设置好去做一些事情，但是你可以依据你的需要定制这些脚本。到<a href="http://jphoto.sourceforge.net/" target="_blank" rel="noopener">http://jphoto.sourceforge.net/</a> selected=sync去看一个我们能做什么的例子。</p><p>42：重命名和调整图片大小</p><p>难度：高级</p><p>应用程序：bash</p><p>很喜欢你的新相机但是不能容忍那个糟糕的名字？你也想要准备发布它们到网上吗？没问题，一个简单的bash脚本真是你所需要的：</p><p>#!/bin/sh </p><p>counter=1 </p><p>root=mypict </p><p>resolution=400×300 </p><p>for i in <code>ls -1 $1/*.jpg</code>; do </p><p>echo ”Now working on $i” </p><p>convert -resize $resolution $i ${root}_${counter}.jpg </p><p>counter=<code>expr $counter + 1</code> </p><p>done </p><p>保存这个脚本到一个名为picturename.sh的文件中，然后用一下命令执行它：</p><p>chmod u+x picturename.sh </p><p>然后在你的某个路径下存储它。现在，如果你在directory /path/to/pictdir下有一堆.jpg文件，所有你需要做的就是执行这个：</p><p>picturename.sh /path/to/pictdir </p><p>而在当前的目录下你会发现 mypict_1.jpg, mypict_2.jpg之类的，它们是你初始图片调整大小后的版本。你可以根据你的需要改变脚本，或者，你只是期待一个超级简单的图片大小调整，试着看看mogrify命令和它的-geometry参数。</p><p>43：安全登出</p><p>难度：简单</p><p>应用程序：bash</p><p>当你在一台共享机器上使用一个控制台，或者甚至只是在你自己的桌面使用控制台，都可能会发现当你登出时，屏幕仍然会显示谁已经登入正在做什么的痕迹。大多数发行版本将会清屏，但是有些不会。你可以通过编辑你的 ~/.bash_logout文件然后增加这个命令来解决问题：</p><p>clear </p><p>你也可以添加任何其他的有用命令在这里。</p><p>44：传输文件但不使用ftp或者scp</p><p>难度：简单</p><p>应用程序：netcat</p><p>需要传输一个目录给其他服务器但是没有FTP或者SCP使用权？那么这个小技巧将会帮助你使用netcat功能。在目的服务器上运行：</p><p>nc -l -p 1234 | uncompress -c | tar xvfp - </p><p>并且在发送服务器上运行：</p><p>tar cfp - /some/dir | compress -c | nc -w 3 [destination] 1234 </p><p>现在你就可以不需要FTP并且不需要root权限，就能传送文件了。</p><p>45：备份一个Debian包清单</p><p>难度：简单</p><p>应用程序：Debian</p><p>如果你正在运行Debian并且找不到你正在运行的包，为你当前正在安装的包做一个备份是非常有用的。你可以运行如下得到一个清单：</p><p>dpkg –get-selections &gt; debianlist.txt </p><p>这将把全部的清单放到debianlist.txt中，这样你就可以通过如下代码在不同的计算机上安装相同的包。</p><p>dpkg –set-selections &lt; debianlist.txt </p><p>当你复制你的系统到一个新的计算机上时，你要记住你还需要从/etc中复制配置文件。</p><p>要实际安装这些选项，使用如下指令：</p><p>apt-get -u dselect-upgrade </p><p>46：强化ssh</p><p>难度：简单</p><p>应用程序：ssh</p><p>尽管SSH是一个非常安全的连接服务器的方式，这里还有两个简单的改变，可以让你进一步增强它的安全性。首先，你当然不希望别人直接以root用户登入——他们应该以普通用户登陆，然后使用su命令来转换。你可以在/etc/ssh/ssh_config 文件中通过添加如下代码改变这个件事：</p><p>PermitRootLoginno </p><p>现在唯一能得到root特权的方式是通过su，这意味着入侵者现在需要破解两个密码来得到全部的使用权。当你编辑这个文件时，找到这样一行：</p><p>Protocol 2, 1 </p><p>然后把它改为如下：</p><p>Protocol 2 </p><p>这将消除最初的SSH协议中的撤销选项，现在被认为是非常易于攻击的。</p><p>47：停止回应ping</p><p>难度：简单</p><p>应用程序：sysctl</p><p>ping在找出网络拓扑结构时是非常有用的命令，缺点是它只能做这件事，而且会使得网络上的黑客们更容易瞄准现场服务器。但是你可以告诉Linux忽略所有的ping服务器将不会回应。这里有很多的方法来实现它，但是最好的是使用sysctl。关掉ping回应：</p><p>sysctl -w net.ipv4.icmp_echo_ignore_all=1 </p><p>想要打开它，使用：</p><p>sysctl -w net.ipv4.icmp_echo_ignore_all=0 </p><p>关掉ping对你来说是非常严重的，看看接下来的技巧。</p><p>48：降低ping速率</p><p>难度：简单</p><p>应用程序：sysctl</p><p>可能你想要保持服务器回复ping的功能，但是又想从被熟知的“ping flood”（封包洪流）的攻击中保护自己。那么你要如何完成这一壮举呢？最简单的方法是降低回应ping服务器的速率。它们仍然是有效的，但不会使服务器过载。</p><p>sysctl -w net.ipv4.icmp_echoreply_rate=10 </p><p>当回复被当作一个信号地址发送时，这将会降低速率。</p><p>49：当登出的时候清理KDE</p><p>难度：简单</p><p>应用程序：bash</p><p>在Windows中有很多程序会做一些清除网络缓存，移除临时文件事情。Linux上如果也可以这样是不是很cool呢？使用KDE，你甚至不需要安装任何新的软件，startkde脚本将会自动的执行你放在特殊地方的脚本。</p><p>首先，你需要在你的.kde目录下创建一个命令shutdown的目录：</p><p>mkdir /home/username/.kde/shutdown </p><p>现在创建一个脚本，用来在关机时执行一些你想要的事情。这里是一个例子：</p><p>#!/bin/bash </p><p>#clear up temp folder </p><p>rm -rf ~/tmp/* </p><p>#clear out caches </p><p>rm -rf ~/.ee/minis/* </p><p>rm -rf ~/.kde/share/cache/http/* </p><h1 id="delete-konqueror-form-completions"><a href="#delete-konqueror-form-completions" class="headerlink" title="delete konqueror form completions"></a>delete konqueror form completions</h1><p>rm ~/.kde/share/apps/khtml/formcompletions </p><p>现在确保你设置了正确的权限：</p><p>chmod ug+x ~/.kde/shutdown/cleanup.sh </p><p>（或者随便你叫它什么）。可以清除敏感文件，也可以通过将脚本放在你的默认KDE文件夹中有一个名为shutdown的子文件夹里，给所有用户一个全局的关机脚本。找出你的默认KDE目录在哪里，试一下：</p><p>kde-config –path exe </p><p>50：无密码的ssh</p><p>难度：中等</p><p>应用程序：ssh</p><p>厌烦了每次登陆你的服务器时都要输入密码？ssh也支持密钥，所以当你登陆桌面时你只能输入你的密码。在你的桌面机器上生成一个密钥对：</p><p>ssh-keygen -t dsa -C your.email@ddress </p><p>为你的密钥输入一个口令。这会将密钥放到 ~/.ssh/id_dsa and the public key in ~/.ssh/id_dsa.pub中。现在看看你是否有了一个正在运行的ssh-agent。</p><p>echo $SSH_AGENT_PID </p><p>如果安装了ssh-agent，大部分窗口管理器都会自动运行它。如果没有安装，开启一个：</p><p>eval $(ssh-agent) </p><p>现在，告诉这个代理你的密钥：</p><p>ssh-add </p><p>然后输入你的口令。你需要在每次登陆时都输入口令，如果你是使用X，尝试添加：</p><p>SSH_ASKPASS=ssh-askpass ssh-add </p><p>到你的.xsession文件。（你可能需要安装ssh-askpass）现在为每个你需要登入的服务器都创建这个目录 ~/.ssh，然后复制这个文件~/.ssh/id_dsa.pub into it as ~/.ssh/authorized_keys 。如果你是手动开启ssh-agent，当你登出时，使用如下代码终止它：</p><p>ssh-agent -k </p><p>51：通过ssh使用rsync</p><p>难度：中等</p><p>应用程序：Shell</p><p>rsync使大型目录结构保持同步。通过SSH使用tar远程复制一个文件系统的一部分是非常理想的，sync甚至更适合保持两台机器之间的文件系统的同步。为了使用SSH运行一个rsyns，传递给它一个-e转换：</p><p>rsync -ave ssh greendome:/home/ftp/pub/ /home/ftp/pub/ </p><p>注意从源端（在greendome上）来的文件说明后面的 / ，在源说明中，一个尾部的 / 告诉rsync这个目录的内容，但不是目录本身。为了将目录放入正在复制的内容的最高等级丢掉这个 /：</p><p>rsync -ave ssh bcnu:/home/six . </p><p>这将在 ~/six/目录下保持一个与bcnu:/home/six/上的任何东西同步的复制品。rsync默认只拷贝文件和目录，但是当源端移除了文件时并不会在目的端移除它们的拷贝。为了保持复制的精确性，包含–delete这个标志：</p><p>rsync -ave ssh–delete greendome:~one/reports . </p><p>现在当老的报表从greendome上的~one/reports/中移除了，在同步版本中，每次这个命令运行时，它们也将会从~six/public_html/reports/中移除。如果你在corn中像这样运行一条命令，记得丢掉v。这将会使输出稳定（除非rsync在运行中出现问题，在这种情况下你将会收到一封有错误输出的邮件）。使用SSH作为你的rsync运输方式，这样做的好处是使数据在网络传输过程中加密，并可以方便使用任何你已经用SSH客户端密钥建立的信任关系。</p><p>52：资源扫描</p><p>难度：中等</p><p>应用程序：nmap</p><p>例如，简单的TCP连接扫描可以在不需要root特权时进行：</p><p>一般来说，当人们想到nmap时，都假设nmap是用来进行一些违法的网络侦查，并为恶意攻击做准备的。但是作为一个强大的工具，nmap可以成为一个白帽子，做一些比入侵网络有意义得多的事。</p><p>nmap rigel </p><p>nmap也可以通过指定范围或者CIDR符号来扫描IP地址：</p><p>nmap 192.168.0.1-254 </p><p>nmap 192.168.0.0/24 </p><p>nmap如果以root身份运行，可以提供更多的信息。当它以root身份运行时，通过使用-O标志，它可以使用特殊的数据包来决定远程机器的操作系统。此外，你可以通过使用-sS标志来实现半开的TCP扫描。nmap将会发送一个SYN数据包到远程的主机，然后等待接收它回应的ACK。如果nmap收到一个ACK，它就知道这个端口是开放的。</p><p>这不同于普通的TCP三次握手，客户端会发送一个SYN包，如果它收到了初始的服务器ACK，客户端随后会将一个ACK送回服务器。攻击者们时常使用这个选项来避免使他们的扫描登陆到远程机器上。</p><p>nmap -sS -O rigel  </p><p>Starting nmap V. 3.00 ( <a href="http://www.insecure.org/nmap/" target="_blank" rel="noopener">www.insecure.org/nmap/</a> )  </p><p>Interesting ports on rigel.nnc (192.168.0.61):  </p><p>(The 1578 ports scanned but not shown below are in state: filtered)  </p><p>Port State Service  </p><p>7/tcpopen echo  </p><p>9/tcpopen discard  </p><p>13/tcp open daytime  </p><p>19/tcp open chargen  </p><p>21/tcp open ftp  </p><p>23/tcp open telnet  </p><p>25/tcp open smtp  </p><p>37/tcp open time  </p><p>79/tcp open finger  </p><p>111/tcpopen sunrpc  </p><p>512/tcpopen exec  </p><p>513/tcpopen login  </p><p>514/tcpopen shell  </p><p>587/tcpopen submission  </p><p>7100/tcp open font-service  </p><p>32771/tcpopen sometimes-rpc5  </p><p>32772/tcpopen sometimes-rpc7  </p><p>32773/tcpopen sometimes-rpc9  </p><p>32774/tcpopen sometimes-rpc11  </p><p>32777/tcpopen sometimes-rpc17  </p><p>Remote operating system guess: Solaris 9 Beta through Release on SPARC  </p><p>Uptime 44.051 days (since Sat Nov1 16:41:50 2003)  </p><p>Nmap run completed – 1 IP address (1 host up) scanned in 166 seconds  </p><p>伴随着OS探测的激活，nmap可以确认OS是Solaris，但是现在你还可以知道，它可能是运行在SPARC处理器上的Version 9。</p><p>一个强大的功能是可以被用于和你的nmap的XML输出性能保持联系。使用-oX命令行转换而激活，就像这样：</p><p>nmap -sS -O -oX scandata.xml rigel </p><p>这在扫描IP地址范围或者你全部的网络时是特别有用的，你可以将所有通过扫描收集起来的信息放到一个XML文件里，并经过解析后插入到数据库中。这里是一个开放的端口的XML入口：</p><port protocol="“tcp”" portid="“22″"><br><br><state state="“open”"><br><br><service name="“ssh”" method="“table”" conf="“3″"><br><br></service></state></port> <p>nmap是一个强大的工具。通过使用它的XML输出性能，一点点的脚本，还有一个数据库，你可以创造一个更强大的可以在你的网络上监测未授权的服务和机器的工具。</p><p>53：备份你的bootsector(引导扇区)</p><p>难度：高级</p><p>应用程序：Shell</p><p>妨碍引导装入，双启动和很多其他下热闹的程序会留给你一个混乱的引导扇区。为什么不在你可以备份的时候给它创建一个备份呢：</p><p>引导装载器混乱、双启动及许多其他的可怕的进程可能造成乱七八糟的启动区。</p><p>dd if=/dev/hda of=bootsector.img bs=512 count=1 </p><p>很显然，你应该改变这个装置来显示你的boot驱动（有可能是SCSI的sda）。还要非常小心，别把事情搞砸——你可能会轻而易举地毁掉你的驱动！恢复时使用：</p><p>dd if=bootsector.img of=/dev/hda </p><p>54：保护日志文件</p><p>难度：高级</p><p>应用程序：很多</p><p>在一个入侵过程中，一个入侵者将会很可能在很多系统日志中留下能反映他行为的迹象：一个有价值的审计追踪应该被保护。没有可靠的日志，就很难发现攻击者是如何侵入，或者是从哪里来的攻击。这个信息在分析事件、联系相关方面并给予反馈上，是很关键的。但是，如果入侵成功，什么才能阻止他来移除他的这些错误行为的痕迹呢？</p><p>这就是文件属性能发挥作用、挽回败局的地方（或者至少使事情没那么糟）。Linux和BSD都有给文件和目录分配额外的属性这个功能。这不同于标准的Unix权限方案中，系统为所有的用户提供的普遍的属性设置，而且它们比文件权限或者ACL都要更深层次影响文件访问。</p><p>在Linux中，你可以看到并且通过lsattr和chattr命令分别修改一个给出文件的设置。在写这篇文章时，Linux的文件属性只能在你使用ext2和ext3时获得。这还有些XFS和ReiserFS的关于获得属性支持的内核补丁。一个保护日志文件的有用的属性是append-only。当这个属性被设置后，文件不能被删除，而且写操作只能被允许在文件的最后追加。</p><p>在Linux下要设置append-only标志，运行这条命令：</p><p>chattr +afilename </p><p>看看+a属性是如何工作的：创建一个文件然后设置它的append-only属性：</p><p>touch /var/log/logfile </p><p>echo ”append-only not set” &gt; /var/log/logfile </p><p>chattr +a /var/log/logfile </p><p>echo ”append-only set” &gt; /var/log/logfile </p><p>bash: /var/log/logfile: Operation not permitted </p><p>企图第二次写文件失败，因为它将覆盖这个文件。然而，在文件的末尾追加仍然是被允许的：</p><p>echo ”appending to file” &gt;&gt; /var/log/logfile  </p><p>cat /var/log/logfile  </p><p>append-only not set  </p><p>appending to file  </p><p>显而易见，一个获得root特权的侵入者能意识到使用了文件属性，并且可以通过运行chattr -a来移除append-only标志。为了防止这种情况，我们需要禁用移除append-only属性的性能，在Linux下使用功能机制完成这个。</p><p>Linux功能模型分割特权给全能的root账户，并且允许你有选择的禁用它们。为了防止一个用户移除一个文件的append-only属性，我们需要移除CAP_LINUX_IMMUTABLE功能。当体现在当前运行系统中时，这个功能允许append-only属性被修改。为了当前系统中获得修改这个功能的设置，我们将简单有效地调用lcap(<a href="http://packetstormsecurity.org/linux/admin/lcap-0.0.3.tar.bz2)" target="_blank" rel="noopener">http://packetstormsecurity.org/linux/admin/lcap-0.0.3.tar.bz2)</a>.</p><p>为了解压和编译这个工具，运行这条命令：</p><p>tar xvfj lcap-0.0.3.tar.bz2 &amp;&amp; cd lcap-0.0.3 &amp;&amp; make </p><p>然后，不允许修改append-only标志，运行：</p><p>./lcap CAP_LINUX_IMMUTABLE </p><p>./lcap CAP_SYS_RAWIO </p><p>第一条命令移除了改变append-only标志的功能，然后第二条移除了原始I/O的功能。这是很有必要的，因为这样就能保护文件不被访问块设备时驻留在其上的东西修改。这阻止了访问/dev/mem和/dev/kmem，有可能给入侵者提供恢复CAP_LINUX_IMMUTABLE功能的漏洞。为了在boot上移除这项功能，添加之前的两条命令到你的系统启动脚本中（例如/etc/rc.local）。你应该确保这个功能在boot命令中被移除了，防止其他启动脚本出问题。一旦lcap移除了内核功能，就只能通过重启系统来恢复了。</p><p>在做这些之前，你应该明白，给你的日志文件添加append-only标志，将会造成日志循环脚本失败。然而，做这件事将会极大的提升你的审计追踪的安全性。安全性的提升在突发事件中会被证明是很有用的。</p><p>55：自动加密连接</p><p>难度：高级</p><p>应用程序：FreeS/WAN</p><p>一个FreeS/WAN支持的特别cool的功能是，当其他主机运行FreeS/WAN时随机加密。这允许FreeS/WAN在所有支持随机加密的主机间透明传输。为了这个，每台主机必须使用FreeS/WAN生成一个公钥，这个公钥可以存储于那台主机的一个DNS TXT记录中。当一台主机要与另一个主机建立一个随机加密，希望初始化一个加密连接时，将会通过DNS查询这台主机的公钥并且初始化这个连接。</p><p>一开始，你想使用这个功能时，需要为每一台主机生成一个公钥。你可以通过运行如下命令来实现它：</p><p>ipsec newhostkey –output /tmp/<code>hostname</code>.key </p><p>现在你需要添加通过那条命令创建的文件的内容到/etc/ipsec.secrets中。</p><p>cat /tmp/<code>hostname</code>.key &gt;&gt; /etc/ipsec.secrets </p><p>然后，你需要生成一个TXT记录来存放你的DNS区域。你可以通过运行如下命令来实现它：</p><p>ipsec showhostkey –txt @colossus.nnc </p><p>现在添加这条记录到你的空间然后重载它。你会证实DNS已经通过这条命令正确的运行了：</p><p>ipsec verify </p><p>Checking your system to see if IPsec got installed and started correctly </p><p>Version check and ipsec on-path[OK] </p><p>Checking for KLIPS support in kernel [OK] </p><p>Checking for RSA private key (/etc/ipsec.secrets) [OK] </p><p>Checking that pluto is running [OK] </p><p>DNS checks. </p><p>Looking for TXT in forward map: colossus [OK] </p><p>Does the machine have at least one non-private address [OK] </p><p>现在只需要重启FreeS/WAN-你现在应该能连接到任何支持随机加密的主机上了。但是如果其他的主机想要连接你该怎么办？要授权连接，你需要在你的DNS反向查找区域为你的机器创建一个TXT记录。</p><p>你可以通过运行一个简单的命令来生成一条记录：</p><p>ipsec showhostkey –txt 192.168.0.64 </p><p>为你的子网添加这条记录到反向查找区域，然后其他的机器就可以和你的机器初始化随机加密了。伴随着随机加密的使用，所有主机间的传输将被自动加密，同时保护所有的服务。</p><p>56：消除二进制suid</p><p>难度：中等</p><p>应用程序：find</p><p>如果你的服务器有比你自身多的shell用户，你应该在你的系统上定期的审核setuid和setgid的二进制文件。可能你会惊讶你找到了那么多文件。这里有一个搜寻所有setuid或者setgid的文件的命令位设置：</p><p>find / -perm +6000 -type f -exec ls -ld {} \; &gt; setuid.txt &amp; </p><p>这将会创建一个名为setuid.txt的文件，包含了所有当前系统上匹配的文件的细节。要移除任何你不用的工具的s位，输入：</p><p>chmod a-s program  </p><p>57：Mac过滤Host AP</p><p>难度：高级</p><p>应用程序：iwpriv</p><p>你可以在链路层使用iptables或者ebtables执行MAC过滤，那比让Host AP为你做这些更安全。这不仅仅是阻碍指向你的网络传输，也是预防邪恶的人关联你的站。这能帮助组织某些人给你的其他无线客户端造成麻烦的可能，即使他们没有更多的网络通道。</p><p>当使用MAC过滤时，很多人会列出一个他们希望允许的无线装置清单，然后拒绝所有其他的。使用iwpriv命令完成这个功能：</p><p>iwpriv wlan0 addmac 00:30:65:23:17:05 </p><p>iwpriv wlan0 addmac 00:40:96:aa:99:fd </p><p>… </p><p>iwpriv wlan0 maccmd 1 </p><p>iwpriv wlan0 maccmd 4 </p><p>addmac指示添加一个MAC地址到内部表。只要你喜欢你就可以通过执行更多的addmac命令添加更多的MAC地址到表中。然后你需要告诉Host AP对你已经建好的表做什么。maccmd 1命令告诉Host AP就像使用一个“允许”清单一样使用这个表，并且拒绝所有其他的MAC地址来关联。最终，maccmd 4命令去除掉所有的关联客户端，强制使它们重新关联。对表中的客户端来说是自动发生的，但是其他的任何企图关联的客户端都是被拒绝的。</p><p>有时，你只需要禁止一个或者两个捣蛋鬼，而不是设置一个详细的被允许的硬件规则。如果你需要禁止两三个MAC地址而允许其他所有的地址，尝试这个：</p><p>iwpriv wlan0 addmac 00:30:65:fa:ca:de </p><p>iwpriv wlan0 maccmd 2 </p><p>iwpriv wlan0 kickmac 00:30:65:fa:ca:de </p><p>像以前一样，你可以不限次数的使用addmac，只要你乐意。Maccmd2命令会将规则设置为“拒绝”，而如果该MAC恰巧已经关联，kickmac会立刻将特定的MACboot。这也许比只为了禁止一个捣蛋鬼而消除所有关联然后让他们重新邻接要好一些。顺便说一下，如果你想要消除所有的MAC过滤，尝试maccmd 0。</p><p>如果你错误的输入了一个MAC地址，你可以像使用addmac一样使用delmac命令，然后它（可以预见）就会从表中删掉这个给出的MAC地址。你有时会需要完全清除当前的MAC表但是保留它当前的规则，使用这条命令：</p><p>iwpriv wlan0 maccmd 3 </p><p>最后，你可以通过使用/proc浏览正在运行的MAC表：</p><p>cat /proc/net/hostap/wlan0/ap_control </p><p>iwpriv程序操纵正在运行的Host AP驱动，但是重启后不保留设置。一旦你对你的MAC过滤表感到满意，请确保你在一个rc脚本中添加了相关命令在启动时间运行。</p><p>注意，未关联的客户端仍然可以监听网络传输，所以MAC过滤实际上只能预防一点点窃取。为了与被动的监听技巧搏斗，你需要加密你的数据。</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux,geek </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解读redis配置文件</title>
      <link href="/2018/01/01/%E8%A7%A3%E8%AF%BBredis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <content type="html"><![CDATA[<p>摘要:<br><a id="more"></a><br>正文:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"># 绑定端口。只接受来自这个IP的请求。如果不设置，将接受所有请求。可以配置多个地址</span><br><span class="line">bind <span class="number">127.0</span>.0.1</span><br><span class="line"># 保护模式。默认开启。当没有绑定IP并且没有设置密码的时候，保护模式起作用，只接受本地地址的请求。</span><br><span class="line"><span class="keyword">protected</span>-mode yes</span><br><span class="line"># 监听端口，默认是6379，TCP连接</span><br><span class="line">port <span class="number">6379</span></span><br><span class="line"># 高并发环境话，对连接的优化参数。并受linux系统内核的影响，需要同时修改内核参数以互相适应</span><br><span class="line">tcp-backlog <span class="number">511</span></span><br><span class="line"># 超时时间，单位为秒，客户端超时时间内没有发出任何命令，关闭该连接。0表示禁用该设置。</span><br><span class="line">timeout <span class="number">0</span></span><br><span class="line"># 连接保持确定时间。如果确定断开连接需要双倍的时间。有的内核也会影响这个参数。</span><br><span class="line"># 据说合理值是300秒。这个选项从redis 3.2.1开始设置。</span><br><span class="line">tcp-keepalive <span class="number">300</span></span><br><span class="line"># 默认情况下，redis不是后台运行的，如果需要后台运行，需要把该项设置为yes</span><br><span class="line">daemonize no</span><br><span class="line"># 定义是upstart还是systemd接管redis进程</span><br><span class="line">supervised no</span><br><span class="line"># 配置后台运行时，redis会生成pid文件，如果不进行配置，默认放置在/var/run/redis.pid下。运行多个redis服务时，需要指定不同的pid文件和端口</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"># 配置记录log的等级。分为四个等级，debug\verbose\notice\warining</span><br><span class="line">loglevel notice</span><br><span class="line"># 配置log文件地址，设置为空时，将日志打印在屏幕上。如果设置为空且设置了后台运行，则将日志发送至/dev/null</span><br><span class="line">logfile <span class="string">""</span></span><br><span class="line"># 设置数据库个数。使用命令“SELECT &lt;dbid&gt;”切换数据库，默认数据库是DB 0</span><br><span class="line">databases <span class="number">16</span></span><br><span class="line"># 设置保存频率，条目格式为：save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line"># 默认配置的含义是这样的：</span><br><span class="line">#900秒内有一个key发生了变化就进行保存</span><br><span class="line">#300秒内有10个key发生了变化就进行保存</span><br><span class="line">#60秒内有10000个key发生了变化就进行保存</span><br><span class="line"># 只要符合以上条件就进行保存</span><br><span class="line">save <span class="number">900</span> <span class="number">1</span></span><br><span class="line">save <span class="number">300</span> <span class="number">10</span></span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span></span><br><span class="line"># 后台保存至磁盘发生错误时禁止再对redis进行写操作，否则会产生影响。</span><br><span class="line"># 如果后台保存又恢复正常，redis会自动的允许写操作</span><br><span class="line"># 如果有自己的监控，可以关闭这个选项，以达到更好的交互性</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"># 进行备份时，是否进行压缩</span><br><span class="line">rdbcompression yes</span><br><span class="line"># 是否进行检查校验码</span><br><span class="line">rdbchecksum yes</span><br><span class="line"># 备份文件的镜像名</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"># redis的工作目录。redis会把备份文件也放入到这个工作目录</span><br><span class="line">dir ./</span><br><span class="line"># 设置该数据库为其它数据库的从数据库，默认不启用</span><br><span class="line"># slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"># 如果连接主数据库时需要密码验证，这里指定密码。默认不启用。</span><br><span class="line"># masterauth &lt;master-password&gt;</span><br><span class="line"># 设置从数据库对客户端写入的处理方式。</span><br><span class="line"># 如果设置为“yes”未完全同步的时候也可以提供客户端连接并操作</span><br><span class="line"># 如果设置为“no”时，则只返回错误，除了IINFO和SLAVEOF</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"># 从数据库是否是只读属性。</span><br><span class="line">slave-read-only yes</span><br><span class="line"># 是否启用无磁盘复制，即直接通过网络进行复制。这个功能目前还在实验阶段</span><br><span class="line">repl-diskless-sync no</span><br><span class="line"># 启用无磁盘复制时，配置传输开始的延时时间</span><br><span class="line">repl-diskless-sync-delay <span class="number">5</span></span><br><span class="line">#在slave和master同步后（发送psync/sync），后续的同步是否设置成TCP_NODELAY。如果设置成yes，则redis会合并小TCP包节省带宽，但会增加延迟。如果设置成no，则redis master会立即发送同步数据，延迟减小，但会增加带宽占用。</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"># 从数据库的优先级，数字越小优先级越高。如果主数据库不工作，数字最小的从数据库接替为主数据库。但是数字0代表不会成为主数据库。</span><br><span class="line">slave-priority <span class="number">100</span></span><br><span class="line"># 设置密码。客户端连接后进行操作之前需要使用“AUTH &lt;PASSWORD&gt;”进行验证之后再进行操作。</span><br><span class="line">#因为redis速度非常快，所以一个外部用户可以一秒钟进行150K次的密码尝试，这意味着如果你对外发布你的redis服务器，你需要一个强壮的密码防止暴力破解。</span><br><span class="line"># requirepass foobared</span><br><span class="line">#重命名某个比较敏感的命令，使这个命令不能被外部命令利用，如CONFIG。</span><br><span class="line">#但是这个配置不适合普通用户并且可能会引起从数据库传输等的一些问题。</span><br><span class="line"># rename-command CONFIG ""</span><br><span class="line"># 限制同时连接的客户端数量。超过数量将不再接受新的请求并返回错误信息。</span><br><span class="line"># maxclients 10000</span><br><span class="line"># 设置redis能够使用的最大内存。当内存满了的时候，根据maxmemory-policy进行删除key，当无法再删除时，返回错误信息。</span><br><span class="line"># maxmemory &lt;bytes&gt;</span><br><span class="line"># 内存删除规则。默认是noeviction方式</span><br><span class="line"># maxmemory-policy noeviction</span><br><span class="line"># 默认情况下，后台异步的把数据备份到磁盘，但是这个备份十分耗时切不能很频繁，如果发生意外，则会丢失一段时间的数据。如果开启append only模式，redis会把接收到的每一次写操作都追加到appendonly.aof中。</span><br><span class="line">appendonly no</span><br><span class="line"># append only文件的名字，默认为appendonly.aof</span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"># 设置对append only文件进行同步的频率。always表示每次有写操作都进行同步，everysec表示对写操作进行累积，每秒同步一次。</span><br><span class="line"># 设置在rewrite的时候是否对新的写操作进行fsync。no表示进行fsync</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"># 当append only文件增长了这个比例（这里是增加了一倍），则后台rewrite自动运行</span><br><span class="line">auto-aof-rewrite-percentage <span class="number">100</span></span><br><span class="line"># 进行后面rewrite要求的最小AOF文件大小。这两个选项共同决定了后面rewrite进程是否到达运行的时机</span><br><span class="line">auto-aof-rewrite-min-size <span class="number">64</span>mb</span><br><span class="line"># 当aof文件被损坏时,redis将返回错误并退出</span><br><span class="line">aof-load-truncated yes</span><br><span class="line"># LUA scripts最大执行时间,单位(毫秒),超出后返回查询错误并写日志</span><br><span class="line">lua-time-limit <span class="number">5000</span></span><br><span class="line"># 开启redis集群</span><br><span class="line"># cluster-enabled yes</span><br><span class="line"># 集群节点配置文件名。不主动手动修改，但是需要确保每一个节点配置文件名不同。</span><br><span class="line"># cluster-config-file nodes-6379.conf</span><br><span class="line"># 节点连接超时时间</span><br><span class="line"># cluster-node-timeout 15000</span><br><span class="line"># 主从数据库无法建立联系的时间倍数</span><br><span class="line">cluster-slave-validity-factor <span class="number">10</span></span><br><span class="line"># 主数据库需要保留最少从服务器个数。这时其它从服务器能够灾备迁移到其它主服务器，否则不允许进行迁移。</span><br><span class="line">cluster-migration-barrier <span class="number">1</span></span><br><span class="line"># 集群是否需要全量覆盖</span><br><span class="line"># cluster-require-full-coverage yes</span><br><span class="line"># 执行超过多少毫秒的会被记录在慢日志上</span><br><span class="line">slowlog-log-slower-than <span class="number">10000</span></span><br><span class="line"># 设置保存多少条慢日志</span><br><span class="line">slowlog-max-len <span class="number">128</span></span><br><span class="line"># 延时监控</span><br><span class="line">latency-monitor-threshold <span class="number">0</span></span><br><span class="line"># 键空间通知，为空关闭功能</span><br><span class="line">notify-keyspace-events <span class="string">""</span></span><br><span class="line"># hash对象开始存储的时候使用ziplist进行存储</span><br><span class="line"># 只有达到一定的范围时</span><br><span class="line">hash-max-ziplist-entries <span class="number">512</span></span><br><span class="line">hash-max-ziplist-value <span class="number">64</span></span><br><span class="line"># 列表编码方式</span><br><span class="line">list-max-ziplist-size -<span class="number">2</span></span><br><span class="line"># 列表压缩方式，0代表不进行压缩</span><br><span class="line">list-compress-depth <span class="number">0</span></span><br><span class="line"># 集合的特殊编码形式</span><br><span class="line">set-max-intset-entries <span class="number">512</span></span><br><span class="line"># 有序集合设置</span><br><span class="line">zset-max-ziplist-entries <span class="number">128</span></span><br><span class="line">zset-max-ziplist-value <span class="number">64</span></span><br><span class="line"># 开启后，每100毫秒有1毫秒对hash表进行重新hash</span><br><span class="line">activerehashing yes</span><br><span class="line"># 客户端缓冲区限制</span><br><span class="line">client-output-buffer-limit normal <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">client-output-buffer-limit slave <span class="number">256</span>mb <span class="number">64</span>mb <span class="number">60</span></span><br><span class="line">client-output-buffer-limit pubsub <span class="number">32</span>mb <span class="number">8</span>mb <span class="number">60</span></span><br><span class="line"># 设置redis程序命令执行频率</span><br><span class="line">hz <span class="number">10</span></span><br><span class="line"># rewrite过程中,每32M数据进行一次文件同步,这样可以减少"aof大文件"写入对磁盘的操作次数</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 非关系型数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo工作原理</title>
      <link href="/2017/12/31/hexo%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <content type="html"><![CDATA[<p>摘要:<br>转载自:<a href="http://coderunthings.com/2017/08/20/howhexoworks/" target="_blank" rel="noopener">http://coderunthings.com/2017/08/20/howhexoworks/</a><br><a id="more"></a><br>正文:<br><img src="http://coderunthings.com/images/howhexoworks/hexo_logo.png" alt=""><br> 你可能用过hexo(或者jekyll)来搭建自己的博客网站。通常我们在安装、配置完成hexo之后，借助hexo，一般通过以下步骤，就可以完成一篇博客的编写及发布，真是方便极了：</p><p><table><tr><td bgcolor="#F0F8FF"><br>$ hexo init           // 创建一个新的hexo项目<br>$ hexo new mynewblog  // 新建一篇标题为mynewblog的文章<br>$ hexo server         // 为hexo在本地起一个http server, 然后通过浏览器访问博客<br>$ hexo generate       // 生成将要发布的博客网站包含html在内的静态资源<br>$ hexo deploy         // 将generate的结果发布到_config.yml中指定的仓库<br></td></tr></table><br>可是，从hexo init到hexo deploy中间发生了什么呢？为了搞清楚这一过程、理解hexo的工作原理，本文将试着回答以下问题:<br>命令行中的hexo是什么<br>hexo是怎么将我们写好的markdown转换成html的<br>hexo插件是如何工作的<br>本地的hexo项目和git page有什么关系<br>本文不是:</p><p>hexo的安装、使用教程<br>git page的使用教程<br>命令行中的hexo是什么?</p><p>hexo项目在github上已经有超过17k的star了，但是你知道吗，日常我们在命令行”操作”hexo时所输入的hexo(例如hexo init)并不是这个17k个star的项目! 是的，我们在命令行中所输入的”hexo”实际是hexo-cli项目，该项目在github上的star还不足50个。</p><p><table><tr><td bgcolor="#F0F8FF"><br>hexo可以粗略分为三个子项目，分别是:<br>hexo-cli<br>hexo (下文中用hexo core来指代)<br>hexo plugins<br>其中hexo plugins不是指某一个单独的项目，而是泛指所有的hexo plugin项目。<br>请看下图:</td></tr></table></p><p><img src="http://coderunthings.com/images/howhexoworks/hexo_projects.png" alt=""><br>让我们结合这张图来大致看看这三个项目的作用(下面的链接均是指向Github中相关的源码):<br>hexo-cli: hexo命令行项目，作用是:<br>启动hexo命令(进程)，及其参数解析机制。每次我们输入’hexo xxx’命令后，都会通过node调用hexo-cli中的entry函数(比如，可以把’hexo init’视为’node hexo-cli/entry.js init’)<br>实现hexo命令的三个初始参数(功能): init / version / help<br>加载hexo核心模块，并初始化<br>hexo core: hexo核心，他的主要作用如下:<br>实现了hexo功能扩展对象<br>实现了hexo核心功能, 如new, publish, generate等（其实是一些hexo插件，下文中会详细分析）<br>hexo plugins: 指一些能够扩展hexo的插件。插件可以按功能分成两类:<br>扩展hexo命令的参数，如hexo-server(安装这个插件以后才能使用hexo server命令)<br>扩展hexo解析文件的”能力”，如增加jade模版解析功能的hexo-render-jade插件<br><br>从markdown到html的旅程</p><p>简单来说，hexo中，从markdown到html的generate过程中做了两件事：</p><p>模板渲染<br>模板渲染<br>是的，就是这样，就是两次模板渲染。只不过两次渲染的输入、渲染模板的引擎、输出不一样。此处应该有一个表格：<br><img src="http://coderunthings.com/images/howhexoworks/render.png" alt=""><br>还得有一张图:<br><img src="http://coderunthings.com/images/howhexoworks/post.png" alt=""> </p><p><table><tr><td bgcolor="#F0F8FF"><br>对上面表格和图的说明:<br>hexo core在generate的过程中会产生一个对象，我们在这里把这个对象称为article。第一次渲染的主要目的就是给这个对象添加title,content等属性。其中:<br>article.title, article.date, article.tags, article.categories等属性来自yml front的部分<br>article.content是markdown文章解析后的html片段<br>hexo项目目录下包含三个子目录，<br>source目录，写博客的主要工作目录。这个目录下存放的是我们的markdown文章以及js, images, css<br>themes目录，主题目录，定义了即将生成的html的layout, 和html中需要加载的css, js, images<br>public目录, hexo generate的最终输出目录。里面包含了整个博客网站的html, css, js, images<br>第二次渲染，需要引入对应模板文件格式的插件，如.ejs文件就需要使用hexo-render-ejs插件，.jade文件需要使用hexo-render-jade插件，而.sass文件则需要hexo-render-sass插件来转换成css文件。hexo的这一设计有点类似webpack中的loader。<br></td></tr></table><br>hexo插件是如何工作的</p><p>hexo和webpack还有一点类似的地方就是插件驱动理念。即hexo(和webpack)是先实现一套(插件)扩展系统，然后再往扩展系统中添加插件来实现自身的功能。即我们日常使用的hexo init, hexo new，hexo generate等等功能都是通过一个个插件(其实就是一个个function)实现的。</p><p><table><tr><td bgcolor="#F0F8FF"><br>具体来讲就是:<br>hexo.extend这个对象的每个属性都是一个用来绑定(特定)插件的对象。（所谓”绑定”，其实就是对象的register方法）<br>hexo初始化过程中先加载内部插件，再加载外部插件<br>而这些插件的功能分为两大类: 命令行插件和generate过程相关功能，例如：<br>命令行插件, hexo new, 是在hexo.extend.console对象上绑定的一个插件<br>generate过程相关的插件，如上文提到的往article对象添加title,content等属性的功能，是通过往hexo.extend.processer对象上绑定post插件来实现的<br>所以，当我们想自己动手写插件时，就是像hexo官网给出的这样,调用某个对象的register方法，如hexo.extend.console.register。<br></td></tr></table><br>hexo和git page<br><img src="http://coderunthings.com/images/howhexoworks/deploy.png" alt=""><br>如上图，(用户通过浏览器访问到的)git page上的博客网站其实是hexo generate之后生成的public目录下的内容。</p><p><table><tr><td bgcolor="#F0F8FF"><br>所以，一个hexo博客项目应该有两个仓库:<br>(基于hexo init结果的)博客编写仓库。可以把这个项目看成一个代码库，用来”开发”博客网站(包含写博客，生成博客等任务)<br>存放(hexo generate结果的)public目录仓库。这个项目是”只读”的，我们不会直接修改这个仓库的内容，我们也不会对这个仓库直接进行git pull、git commit、git push等常规操作。这个仓库的内容就是public目下的内容，即是通过hexo generate产生、hexo deploy提交的。<br></td></tr></table><br>总结</p><p>hexo简洁、强大的功能来自于自身优雅的系统设计:</p><p>hexo进程启动、hexo核心对象封装、插件系统分别独立<br>自身采用插件驱动，生来就具备高可扩展性<br>希望读完这篇文章你能对hexo本身有更深入的理解，也能通过hexo的代码设计，对自己以后写出更优雅的代码有所启发。</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cookie被浏览器禁用后的解决方法</title>
      <link href="/2017/12/30/cookie%E8%A2%AB%E6%B5%8F%E8%A7%88%E5%99%A8%E7%A6%81%E7%94%A8%E5%90%8E%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <content type="html"><![CDATA[<p>摘要:<br>转载自:<a href="http://blog.csdn.net/github_36301064/article/details/53412600" target="_blank" rel="noopener">http://blog.csdn.net/github_36301064/article/details/53412600</a><br><a id="more"></a><br>正文:<br>我们都知道session依赖cookie，因为服务器需要在每次请求中获取sessionId，然后找到客户端的session对象，如果浏览器禁用了cookie呢？</p><p>这个时候，就需要用到URL重写了，这种方法让服务器收到的每个请求中都带有sessioinId。</p><p>URL重写的具体方法是：在每个页面中的每个链接和表单中都添加名为jSessionId的参数，值为当前sessionid。当用户点击链接或提交表单时也服务器可以通过获取jSessionId这个参数来得到客户端的sessionId，找到sessoin对象，来看看具体的例子：</p><p>方法一：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">------------链接------------</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'/jsp/index.jsp;jsessionid=&lt;%=session.getId() %&gt;'</span> &gt;</span>主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br><span class="line">------------表单------------</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">'/jsp/index.jsp;jsessionid=&lt;%=session.getId() %&gt;'</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br>方法二（使用response.encodeURL()对每个请求的URL处理，这个方法会自动追加jsessionid参数，与上面我们手动添加是一样的效果。）：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">------------链接------------</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'&lt;%=response.encodeURL("/jsp/index.jsp") %&gt;'</span> &gt;</span>主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br><span class="line">------------表单------------</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">'&lt;%=response.encodeURL("/jsp/index.jsp") %&gt;'</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span>  </span><br></pre></td></tr></table></figure><br>使用response.encodeURL()更加“智能”，它会判断客户端浏览器是否禁用了Cookie，如果禁用了，那么这个方法在URL后面追加jsessionid，否则不会追加。<br>所以说，建议使用方法二。</p>]]></content>
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie,session </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面经</title>
      <link href="/2017/12/30/%E9%9D%A2%E7%BB%8F/"/>
      <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 请输入密码 " /> <label for="pass"> 请输入密码 </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> 面试经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经,面试题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二维数组的查找</title>
      <link href="/2017/12/29/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
      <content type="html"><![CDATA[<p>摘要:<br>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br><a id="more"></a><br>正文:<br>题目描述<br>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br>思路1：<br>在数组中的元素都是按照顺序排列的，故采用二分的思想对数组元素进行查找:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(array[<span class="number">0</span>].length==<span class="number">0</span>||array.length==<span class="number">0</span>||array==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(binSearch(array[i],<span class="number">0</span>,array[i].length-<span class="number">1</span>,target)==target) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binSearch</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> start,<span class="keyword">int</span> end,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start&gt;end) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(start+end)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid]==target) <span class="keyword">return</span> a[mid];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[mid]&lt;target) <span class="keyword">return</span> binSearch(a,mid+<span class="number">1</span>,end,target);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> binSearch(a,start,mid-<span class="number">1</span>,target);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>思路2:<br>从左下角开始，如果要找的那个数&gt;左下角的数,那么向右找，如果想找的那个数比左下角的那个数小，那么向上移动一层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> [][] array,<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = array.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len &gt;= <span class="number">0</span>)&amp;&amp; (i &lt; array[<span class="number">0</span>].length))&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[len][i] &gt; target)&#123;</span><br><span class="line">                len--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[len][i] &lt; target)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 基础算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法,面试题 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
