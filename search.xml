<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java8垃圾回收总结</title>
      <link href="/2018/09/16/Java8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 请输入密码 " /> <label for="pass"> 请输入密码 </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker使用心得</title>
      <link href="/2018/04/29/docker%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
      <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 请输入密码 " /> <label for="pass"> 请输入密码 </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>备忘录模式</title>
      <link href="/2018/02/15/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于备忘录模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>一系列的操作之后恢复原来的状态。实际的使用场景有事务的回滚操作等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在备忘录模式中有以下的几种对象:<br>2.1源发器:Originator<br>2.2备忘录类:Memento<br>2.3负责人CareTake<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/ca9112807235929b4720840b6a08f0dcbe14993d9999-RHTHvJ_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>首先定义Emp类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行备忘录操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmpMemento <span class="title">memento</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmpMemento(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行数据恢复,恢复成备忘录对象的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recovery</span><span class="params">(EmpMemento emto)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=emto.getName();</span><br><span class="line">        <span class="keyword">this</span>.age=emto.getAge();</span><br><span class="line">        <span class="keyword">this</span>.salary=emto.getSalary();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义EmpMemento类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpMemento</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmpMemento</span><span class="params">(Emp e)</span> </span>&#123;<span class="comment">//这是关键</span></span><br><span class="line">        <span class="keyword">this</span>.name=e.getName();</span><br><span class="line">        <span class="keyword">this</span>.age=e.getAge();</span><br><span class="line">        <span class="keyword">this</span>.salary=e.getSalary();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编写CareTaker类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CareTaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> EmpMemento memento;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmpMemento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(EmpMemento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后给出测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CareTaker careTaker=<span class="keyword">new</span> CareTaker();</span><br><span class="line">        Emp emp=<span class="keyword">new</span> Emp(<span class="string">"小强"</span>,<span class="number">90</span>,<span class="number">900</span>);</span><br><span class="line">        System.out.println(emp.getName()+<span class="string">" "</span>+emp.getAge()+<span class="string">" "</span>+emp.getSalary());</span><br><span class="line">        careTaker.setMemento(emp.memento());</span><br><span class="line">        emp.setAge(<span class="number">9</span>);</span><br><span class="line">        System.out.println(emp.getName()+<span class="string">" "</span>+emp.getAge()+<span class="string">" "</span>+emp.getSalary());</span><br><span class="line">        emp.recovery(careTaker.getMemento());</span><br><span class="line">        System.out.println(emp.getName()+<span class="string">" "</span>+emp.getAge()+<span class="string">" "</span>+emp.getSalary());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>备忘录模式保存了内部状态的拷贝，以后直接恢复即可。<br>代码地址:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/memeto" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/memeto</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>观察者模式</title>
      <link href="/2018/02/15/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于观察者模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>Android开发中的广播机制,Servlet中监听器的实现。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>观察者模式包含如下的一些角色:<br>2.1 Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。<br>2.2 ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。<br>2.3 Observer：抽象观察者，是观察者者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。<br>2.4 ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/8aa6b22bc8a4bd3d62c44bc72aa3d9728c727e977899-lIdJ3p_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>首先，定义Observer接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/15 11:41</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [subject]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject subject)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserverA</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        state=((ConcreteSubject)subject).getState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        list.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        list.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAlls</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer:list)&#123;</span><br><span class="line">            observer.update(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span>  <span class="keyword">extends</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        <span class="keyword">this</span>.notifyAlls();<span class="comment">//更新所有的订阅者</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义普通测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//目标对象</span></span><br><span class="line">        ConcreteSubject subject=<span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">        <span class="comment">//创建多个观察者</span></span><br><span class="line">        ConcreteObserverA coa=<span class="keyword">new</span> ConcreteObserverA();</span><br><span class="line">        ConcreteObserverA coa2=<span class="keyword">new</span> ConcreteObserverA();</span><br><span class="line">        ConcreteObserverA coa3=<span class="keyword">new</span> ConcreteObserverA();</span><br><span class="line">        <span class="comment">//让这三个观察者添加到subject观察者队伍中</span></span><br><span class="line">        subject.register(coa);</span><br><span class="line">        subject.register(coa2);</span><br><span class="line">        subject.register(coa3);</span><br><span class="line">        subject.setState(<span class="number">1234</span>);</span><br><span class="line">        System.out.println(coa.getState());</span><br><span class="line">        System.out.println(coa2.getState());</span><br><span class="line">        System.out.println(coa3.getState());</span><br><span class="line">        subject.removeObserver(coa3);</span><br><span class="line">        subject.setState(<span class="number">5678</span>);</span><br><span class="line">        System.out.println(coa3.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>上边我们通过代码手动实现了一个观察者模式，然而，jdk也提供了一些接口来方便我们实现这一功能。有兴趣的可以研究以下。<br>项目链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/observer" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/observer</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>状态模式</title>
      <link href="/2018/02/15/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于状态模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>常见的应用场景有线程对象各个状态之间的切换或者各种账号状态的管理等</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>状态模式中主要有以下的几大角色:<br>2.1Context:环境类<br>环境类中维护一个State对象，定义了当前的对象<br>2.2State:抽象状态类<br>2.3ConcreteState:具体状态类<br>每一类封装了一个对应的行为<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/b5b0aa3b24a36ac3dff3f69edf63bef36f1bd9363182-meSgJ1_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个图书馆借书的例子来对这个设计模式进行讲解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BorrowState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"书籍已经被借走"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreeState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"书本在馆!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderedState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"书本已经被预订！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改状态"</span> );</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        state.handle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后是一个简单的测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       BookContext ctx=<span class="keyword">new</span> BookContext();</span><br><span class="line">       ctx.setState(<span class="keyword">new</span> FreeState());</span><br><span class="line">       ctx.setState(<span class="keyword">new</span> OrderedState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>项目链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/state" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/state</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模板方法模式</title>
      <link href="/2018/02/14/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于模板方法模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>当实现一个算法的时候，这个算法的整体步骤是固定的，但是某一些算法可能会进行更改。易变的部分我们可以抽取出来，供子类实现。比较常见的应用有Junit单元测试Spring中的JDBCTemplate类等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>模板方法模式包含如下两个角色：<br>2.1 AbstractClass（抽象类）：在抽象类中定义了一系列基本操作(PrimitiveOperations)，这些基本操作可以是具体的，也可以是抽象的，每一个基本操作对应算法的一个步骤，在其子类中可以重定义或实现这些步骤。同时，在抽象类中实现了一个模板方法(Template Method)，用于定义一个算法的框架，模板方法不仅可以调用在抽象类中实现的基本方法，也可以调用在抽象类的子类中实现的基本方法，还可以调用其他对象中的方法。<br>2.2 ConcreteClass（具体子类）：它是抽象类的子类，用于实现在父类中声明的抽象基本操作以完成子类特定算法的步骤，也可以覆盖在父类中已经实现的具体基本操作。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/ae69fa772bb1102d56adbd94660d8130fd551a3f5116-88tGer_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>定义一个银行办理业务步骤的类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"取号排队"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"反馈评分"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.takeNumber();</span><br><span class="line">        <span class="keyword">this</span>.transact();</span><br><span class="line">        <span class="keyword">this</span>.evaluate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>再定义一个具有特殊需求的类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Withdrawals</span> <span class="keyword">extends</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"取款!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后是一个简单的测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BankTemplateMethod bankTemplateMethod=<span class="keyword">new</span> BankTemplateMethod() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"存点零花钱"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        bankTemplateMethod.process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>模板方法定义了操作中算法的骨架，新的子类可以在不改变一个算法结构的前提下重新定义该算法的某些特定的步骤，也即是通过模板方法，处理的步骤已经在父类中定义好了，而具体的实现则延迟到子类中定义。<br>项目链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/templateMethod" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/templateMethod</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>策略模式</title>
      <link href="/2018/02/14/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于策略模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>我们需要根据不同的需求给出不同的解决方案，如果使用条件判断，这时候如果有新增的类型就会破坏开放封闭原则，这时候就需要使用策略模式。常用的使用场景有Spring框架中的Resource接口等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在策略模式中有以下的几种对象:<br>2.1环境(Context)角色：持有一个Strategy的引用。<br>2.2抽象策略(Strategy)角色：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。<br>2.3具体策略(ConcreteStrategy)角色：包装了相关的算法或行为。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/b73288c2de5376667d351ab520b559db21ce454d6ed9-LMAkUn_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>首先，定义Strategy接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义Context类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;<span class="comment">//当前的算法对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printArea</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"图形面积:"</span>+strategy.getArea(a,b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义计算各种图形面积的方法(写的不是太严谨,这里只是用作演示):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circular</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a==b)</span><br><span class="line">        <span class="keyword">return</span> Math.PI*a*b;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a*b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a*b/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>简单测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Strategy s1=<span class="keyword">new</span> Rectangle();</span><br><span class="line">        Strategy s2=<span class="keyword">new</span> Triangle();</span><br><span class="line">        Strategy s3=<span class="keyword">new</span> Circular();</span><br><span class="line">        Context ctx=<span class="keyword">new</span> Context(s3);</span><br><span class="line">        ctx.printArea(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>策略模式实际就是一种对算法进行分离的设计模式，客户端能够自行判断调用哪个算法。<br>代码链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/strategy" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/strategy</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>访问者模式</title>
      <link href="/2018/02/14/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于访问者模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>在一个集合中有一些不同的子类对象，需要分别对这些子类对象做处理。常常应用于XML文档的解析、编辑器的解析等。</p><h2 id="2-UML表示："><a href="#2-UML表示：" class="headerlink" title="2.UML表示："></a>2.UML表示：</h2><p>2.1 Visitor（抽象访问者）：抽象访问者为对象结构中每一个具体元素类ConcreteElement声明一个访问操作，从这个操作的名称或参数类型可以清楚知道需要访问的具体元素的类型，具体访问者则需要实现这些操作方法，定义对这些元素的访问操作。<br>2.2 ConcreteVisitor（具体访问者）：具体访问者实现了抽象访问者声明的方法，每一个操作作用于访问对象结构中一种类型的元素。<br>2.3 Element（抽象元素）：一般是一个抽象类或接口，定义一个Accept方法，该方法通常以一个抽象访问者作为参数。<br>2.4 ConcreteElement（具体元素）：具体元素实现了Accept方法，在Accept方法中调用访问者的访问方法以便完成一个元素的操作。<br>2.5 ObjectStructure（对象结构）：对象结构是一个元素的集合，用于存放元素对象，且提供便利其内部元素的方法。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/45e2f1a96e486aa63d973a659a68b74e078bab4faad7-cnVfK1_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>参考了一个例子:<a href="http://www.cnblogs.com/chenpi/p/5222390.html" title="链接" target="_blank" rel="noopener">http://www.cnblogs.com/chenpi/p/5222390.html</a><br>定义一个visitor接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/16 16:05  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [wheel]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Wheel wheel)</span></span>;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/16 16:06  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [engine]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Engine engine)</span></span>;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/16 16:06  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [body]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Body body)</span></span>;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/16 16:06  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [car]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Car car)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>具体的访问者类，定义一些行为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Wheel wheel)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"轮子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Engine engine)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"引擎"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Body body)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"车身"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"整车"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义Visitable接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义各部件类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engine</span> <span class="keyword">implements</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> <span class="keyword">implements</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wheel</span> <span class="keyword">implements</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Engine engine=<span class="keyword">new</span> Engine();</span><br><span class="line">    <span class="keyword">private</span> Body body=<span class="keyword">new</span> Body();</span><br><span class="line">    <span class="keyword">private</span> Wheel wheel=<span class="keyword">new</span> Wheel();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">          visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">          engine.accept(visitor);</span><br><span class="line">          body.accept(visitor);</span><br><span class="line">          wheel.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单的测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car car=<span class="keyword">new</span> Car();</span><br><span class="line">        Visitor visitor=<span class="keyword">new</span> PrintVisitor();</span><br><span class="line">        car.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>通过上面的例子，我们可以看出，一旦操作逻辑发生改变，我们只要更改PrintVisitor类中的代码即可，与此同时，一旦需要新添加一些“零件”，例如再添加一个“尾翼”类，只需要改变访问者接口即可。<br>代码地址:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/visitor" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/visitor</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解释器模式</title>
      <link href="/2018/02/14/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于解释器模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>这个设计模式一般用来解释语句中的句子，实际开发中EL表达式或者正则表达式的解释器就是采用这种设计模式等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>Expression:抽象表达式,用来表明所有具体表达式需要实现的抽象接口。<br>Terminal Expression:终结符表达式,实现了抽象表达式所要求的接口。<br>Nonterminal Expression:非终结表达式<br>Context:环境,它的任务一般用来存放文法中各个终结符对应的具体值。<br>具体的UML示意图如下:<br><img src="http://img.hb.aicdn.com/f22d6065cb794ebd48c485956908e1bab1a59bb7452c-cFzR3c_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>这里参考了网络上的例子:<a href="https://www.cnblogs.com/chenpi/p/5222496.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenpi/p/5222496.html</a><br>具体就是自定义一个解释器用来解析一种类似后序表达式()的值。<br>下面是具体的代码:<br>首先我们定义一个接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**    </span></span><br><span class="line"><span class="comment">         *   </span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">         * <span class="doctag">@date</span> 2018/2/16 11:21  </span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> [variables]  </span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> int  </span></span><br><span class="line"><span class="comment">         */</span> </span><br><span class="line">         <span class="function"><span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String,Expression&gt; variables)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义符号识别类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    Expression left;</span><br><span class="line">    Expression right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Plus</span><span class="params">(Expression left, Expression right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret(variables)+right.interpret(variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Minus</span> <span class="keyword">implements</span> <span class="title">Expression</span></span>&#123;</span><br><span class="line">    Expression left;</span><br><span class="line">    Expression right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Minus</span><span class="params">(Expression left, Expression right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret(variables)-right.interpret(variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Number</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义解析类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Variable</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span>==variables.get(name))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> variables.get(name).interpret(variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Evaluator</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Expression syntaxTree;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Evaluator</span><span class="params">(String expression)</span></span>&#123;</span><br><span class="line">        Stack&lt;Expression&gt; expressions=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String token:expression.split(<span class="string">" "</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (token.equals(<span class="string">"+"</span>))&#123;</span><br><span class="line">                Expression subExpression=<span class="keyword">new</span> Plus(expressions.pop(),expressions.pop());</span><br><span class="line">                expressions.push(subExpression);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(token.equals(<span class="string">"-"</span>))&#123;</span><br><span class="line">                Expression right=expressions.pop();</span><br><span class="line">                Expression left=expressions.pop();</span><br><span class="line">                Expression subExpression=<span class="keyword">new</span> Minus(left,right);</span><br><span class="line">                expressions.push(subExpression);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                expressions.push(<span class="keyword">new</span> Variable(token));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        syntaxTree=expressions.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> syntaxTree.interpret(variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后，编写测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String expression=<span class="string">"w x z - +"</span>;</span><br><span class="line">        Evaluator evaluator=<span class="keyword">new</span> Evaluator(expression);</span><br><span class="line">        Map&lt;String,Expression&gt; variables=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        variables.put(<span class="string">"w"</span>,<span class="keyword">new</span> Number(<span class="number">5</span>));</span><br><span class="line">        variables.put(<span class="string">"w"</span>,<span class="keyword">new</span> Number(<span class="number">5</span>));</span><br><span class="line">        variables.put(<span class="string">"w"</span>,<span class="keyword">new</span> Number(<span class="number">5</span>));</span><br><span class="line">        <span class="keyword">int</span> result=evaluator.interpret(variables);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>解释器模式主要用于需要自定义语法分析工具的场景，如果需要增加操作，只需要添加具体的类即可。在实际开发中使用率较低。<br>项目链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/interpreter" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/interpreter</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>命令模式</title>
      <link href="/2018/02/14/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于命令模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>所谓命令模式就是将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。在数据库的事务处理部分就使用了命令模式。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在命令模式中通常包含以下的几组对象:<br>2.1Invoker调用者/请求者<br>2.2Receiver接收者<br>2.3Client客户端<br>具体的UML示意图如下:<br><img src="http://img.hb.aicdn.com/df99f59b2da75c79e48ee9e69a0360d92e5bb41d3b24-3KplcG_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>定义一个Command接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/14 15:45</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编写Command实体:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;<span class="comment">//命令真正的执行者</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行相关的处理</span></span><br><span class="line">        receiver.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义一个Invoke类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoke</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invoke</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//业务方法，用于调用命令类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编写receiver类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Receiver.action()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后，我们通过一个简单的例子来进行测试:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Command c=<span class="keyword">new</span> ConcreteCommand(<span class="keyword">new</span> Receiver());</span><br><span class="line">        Invoke i=<span class="keyword">new</span> Invoke(c);</span><br><span class="line">        i.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>可以看到，调用者Client并不会直接和接收者Receiver类发生关系，这么做有什么好处？这样做的好处一是可以实现类之间的解耦，二是Command类的扩展性会比较好，但同时这也会造成类膨胀的问题，所以命令模式通常会和我们前面介绍的责任链模式结合。<br>下面给出项目的链接:<a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/command" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/command</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>中介者模式</title>
      <link href="/2018/02/14/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于中介者模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>系统中的关系比较复杂，存在网状的关系。例如经典的MVC模式中的”C”-Controller就是一个中介者对象还有例如Java反射中的invoke()方法中也是使用到了中介者模式。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>2.1 Mediator：抽象中介者角色，定义了同事对象到中介者对象的接口，一般以抽象类的方式实现。<br>2.2 ConcreteMediator：具体中介者角色，继承于抽象中介者，实现了父类定义的方法，它从具体的同事对象接受消息，向具体同事对象发出命令。<br>2.3 Colleague：抽象同事类角色，定义了中介者对象的接口，它只知道中介者而不知道其他的同事对象。<br>2.4 ConcreteColleague1、ConcreteColleague2：具体同事类角色，继承于抽象同事类，每个具体同事类都知道本身在小范围的行为，而不知道在大范围内的目的。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/56e2c518a9e443b6841077b52dc3cf26f62852da831b-b3TF63_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>定义中介者接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/14 16:43  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [dName, dt]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(String dName,Department dt)</span></span>;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/14 16:43  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [dName]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">command</span><span class="params">(String dName)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>实现接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">President</span> <span class="keyword">implements</span> <span class="title">Mediator</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Department&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String dName, Department dt)</span> </span>&#123;</span><br><span class="line">        map.put(dName,dt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">command</span><span class="params">(String dName)</span> </span>&#123;</span><br><span class="line">        map.get(dName).selfAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义Department接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/14 16:45  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> []  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span></span>;<span class="comment">//</span></span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/14 16:45  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> []  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们定义一个研发部来实现这个接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Development</span> <span class="keyword">implements</span> <span class="title">Department</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Mediator m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Development</span><span class="params">(Mediator m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"研发"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"需要资金"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>限于篇幅，这里省略其他的部门类。<br>最后，我们通过一个简单的例子进行测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Mediator m=<span class="keyword">new</span> President();<span class="comment">//中介者对象</span></span><br><span class="line">        Market market=<span class="keyword">new</span> Market(m);</span><br><span class="line">        market.selfAction();</span><br><span class="line">        market.outAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>中介者模式用于解耦多个对象之间的关系。每个对象都会持有一个中介者的对象，然后通过中介者统一管理这些交互的关系。<br>下面给出项目的链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/mediator" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/mediator</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>迭代器模式</title>
      <link href="/2018/02/13/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于迭代器模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>1.1访问一个聚合对象的内容而无需暴露它的内部表示<br>1.2支持对聚合对象的多种遍历<br>1.3为遍历不同的聚合结构提供一个统一的接口<br>其实就是为方便遍历数据服务，像JDK的内置迭代器，就是采用的这种模式。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>迭代器模式主要有以下的角色构成:<br>2.1迭代器角色:定义遍历元素所需要的方法。<br>2.2具体迭代角色：实现迭代器接口中定义的方法，完成集合的迭代。<br>2.3容器角色:一个接口,提供iterator()方法，对比于java中的Collection接口、List接口、Set接口等。<br>2.4具体容器角色<br>抽象容器的具体实现类，比如:List接口中的ArrayList、LinkedList等。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/5f25cea7ee76e28881699988cb59b9af474448e97d93-RH02Rp_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个例子来对这个设计模式进行讲解:<br>首先，我们定义一个迭代器的接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyIterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isFirst</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isLast</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">getCurrentObj</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>实现具体的迭代器:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreateIterator</span> <span class="keyword">implements</span> <span class="title">MyIterator</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cursor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreateIterator</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cursor=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cursor&lt;list.size())&#123;</span><br><span class="line">            cursor++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cursor&lt;list.size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor==<span class="number">0</span>?<span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor == (list.size() - <span class="number">1</span>) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCurrentObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(cursor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义容器角色：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyAggregate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addObject</span><span class="params">(Object object)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObject</span><span class="params">(Object object)</span></span>;</span><br><span class="line">    <span class="function">MyIterator <span class="title">createIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>具体容器类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMyAggregate</span> <span class="keyword">implements</span> <span class="title">MyAggregate</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteMyAggregate</span><span class="params">(List&lt;Object&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObject</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list.add(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObject</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list.remove(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**获取迭代器*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyIterator <span class="title">createIterator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreateIterator(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>通过迭代器模式，简化了遍历的方式，由于迭代器内部已经实现了迭代算法，所以我们不需要了解遍历的算法，使得代码的封装性比较好。<br>下面给出代码:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/iterator" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/iterator</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>责任链模式</title>
      <link href="/2018/02/13/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于责任链模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>Tomcat中的过滤器链，springmvc中的拦截器链等等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在责任链模式中通常用以下的几类对象:<br>Handler：定义出一个处理请求的接口。如果需要，接口可以定义 出一个方法以设定和返回对下家的引用。这个角色通常由一个Java抽象类或者Java接口实现。<br>ConcreteHandler：具体处理者接到请求后，可以选择将请求处理掉，或者将请求传给下家。由于具体处理者持有对下家的引用，因此，如果需要，具体处理者可以访问下家。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/09a7239ca5142727bac233dede8f1b1b250d94dd4b07-Px07MZ_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个员工请假的例子对责任链模式进行讲解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> Leader nextLeader;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Leader <span class="title">getNextLeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextLeader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLeader</span><span class="params">(Leader nextLeader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextLeader = nextLeader;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(LeaveRequest request)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义领导类，判断的标准根据员工的请假的天数为准。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Groupleader</span> <span class="keyword">extends</span> <span class="title">Leader</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Groupleader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(LeaveRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getLeaveDays()&lt;<span class="number">3</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"小组长同意"</span>+request.getEmpName());</span><br><span class="line">            System.out.println(<span class="string">"主任"</span>+<span class="keyword">this</span>.name+<span class="string">"，"</span>+<span class="string">"审批通过"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.nextLeader!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.nextLeader.handleRequest(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br>下面是我们进行测试，假设有一个员工打算请假:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Leader a=<span class="keyword">new</span> Groupleader(<span class="string">"小明"</span>);</span><br><span class="line">        Leader b=<span class="keyword">new</span> GeneralManager(<span class="string">"小红"</span>);</span><br><span class="line">        Leader c=<span class="keyword">new</span> BOSS(<span class="string">"小刚"</span>);</span><br><span class="line">        a.setNextLeader(b);</span><br><span class="line">        b.setNextLeader(c);</span><br><span class="line">        LeaveRequest request=<span class="keyword">new</span> LeaveRequest(<span class="string">"小强"</span>,<span class="number">10</span>,<span class="string">"玩"</span>);</span><br><span class="line">        a.handleRequest(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看到责任关系是在客户端调用的时候确定的。                        </p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>责任链模式将处理同一类请求的对象连城一条链，所提交的请求沿着链传递，链上的对象会逐个判断有没有能力去处理这个请求，如果能则处理，如果不能就传递给链的下一个对象。<br>相关的源代码:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/chainOfResp" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/chainOfResp</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>享元模式</title>
      <link href="/2018/02/13/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于享元模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>内存资源比较稀缺,不要随便浪费，如果有很多相同或者类似的对象，通过使用享元模式的方法，节省内存，例如线程池以及String类等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在享元模式中通常用以下的几类对象:<br>2.1FlyweightFactory(享元工厂，创建并且管理享元对象)<br>2.2FlyWeight享元抽象类<br>2.3ConcreteFlyWeight具体享元类<br>2.4UnsharedConcreteFlyWeight非共享享元类<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/d406e297b0d7df5e39172507475f235a62f7ac599644-lcBu9p_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>首先，定义一个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChessFlyWeight</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(Coordinate coordinate)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义棋子类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteChess</span> <span class="keyword">implements</span> <span class="title">ChessFlyWeight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteChess</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color=color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Coordinate coordinate)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"棋子颜色："</span>+color);</span><br><span class="line">        System.out.println(<span class="string">"棋子位置："</span>+coordinate.getX()+<span class="string">"-----"</span>+coordinate.getY());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>再定义坐标类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x,y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Coordinate</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后是我们的享元工厂:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChessWeightFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,ChessFlyWeight&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ChessFlyWeight <span class="title">getChess</span><span class="params">(String color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.get(color)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(color);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ChessFlyWeight chessFlyWeight=<span class="keyword">new</span> ConcreteChess(color);</span><br><span class="line">            map.put(color,chessFlyWeight);</span><br><span class="line">            <span class="keyword">return</span>  chessFlyWeight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后，给出一个简单的测试程序:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChessFlyWeight chessFlyWeight1= ChessWeightFactory.getChess(<span class="string">"黑色"</span>);</span><br><span class="line">        ChessFlyWeight chessFlyWeight2= ChessWeightFactory.getChess(<span class="string">"黑色"</span>);</span><br><span class="line">        System.out.println(chessFlyWeight1.equals(chessFlyWeight2));</span><br><span class="line">        System.out.println(<span class="string">"增加外部状态的处理"</span>);</span><br><span class="line">        chessFlyWeight1.display(<span class="keyword">new</span> Coordinate(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        chessFlyWeight2.display(<span class="keyword">new</span> Coordinate(<span class="number">10</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>享元模式以共享的方式高效的支持大量细粒度对象的重用。共享的关键是使用了内部状态以及外部状态，其中：<br>内部状态指的是可以共享,不会随着环的变化而变化的属性；而外部状态指的是不可以共享，会随着环境变化而变化的属性。对于外部状态，使用外部类来进行处理，而对于内部状态，我们单独通过享元类来进行处理。<br>下面给出项目的链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/facade" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/facade</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>外观模式</title>
      <link href="/2018/02/12/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于外观模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>为子系统提供一个统一的入口。封装子系统的复杂性，便于客户调用，常用于一些工具类的封装。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>外观模式包含如下两个角色：<br>(1) Facade（外观角色）：在客户端可以调用它的方法，在外观角色中可以知道相关的（一个或者多个）子系统的功能和责任；在正常情况下，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理。<br>(2) SubSystem（子系统角色）：在软件系统中可以有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能；每一个子系统都可以被客户端直接调用，或者被外观角色调用，它处理由外观类传过来的请求；子系统并不知道外观的存在，对于子系统而言，外观角色仅仅是另外一个客户端而已。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/ab84efb345de8d26ed55ada84d7eb96b3a0721283df3-LDLUSy_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个启动计算机的程序来对外观模式进行一个简要的说明:<br>计算机的启动通常有以下的几个流程:</p><p><img src="https://images2015.cnblogs.com/blog/607348/201512/607348-20151229231206354-919070678.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBIOS</span> <span class="keyword">implements</span> <span class="title">BIOS</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BiosCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"BIOS自检"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyKernel</span> <span class="keyword">implements</span> <span class="title">Kernel</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"系统引导"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySystems</span> <span class="keyword">implements</span> <span class="title">Systems</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"系统初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这时候如果我们需要在主程序中进行调用:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">        MyBIOS myBIOS=<span class="keyword">new</span> MyBIOS();</span><br><span class="line">        myBIOS.BiosCheck();</span><br><span class="line">        MyKernel myKernel=<span class="keyword">new</span> MyKernel();</span><br><span class="line">        myKernel.run();</span><br><span class="line">        MySystems mySystems=<span class="keyword">new</span> MySystems();</span><br><span class="line">        mySystems.init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>结果就是编写的代码相当的松散，这时候我们可以通过定义一个类，然后在类中将上述的代码进行包装，并向外提供一个方法来供调用者进行调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CentOS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyBIOS myBIOS=<span class="keyword">new</span> MyBIOS();</span><br><span class="line">        myBIOS.BiosCheck();</span><br><span class="line">        MyKernel myKernel=<span class="keyword">new</span> MyKernel();</span><br><span class="line">        myKernel.run();</span><br><span class="line">        MySystems mySystems=<span class="keyword">new</span> MySystems();</span><br><span class="line">        mySystems.init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这时候，我们在主程序中直接调用这个类即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       CentOS centOS=<span class="keyword">new</span> CentOS();</span><br><span class="line">       centOS.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>下面给出项目的链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/facade" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/facade</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>装饰模式</title>
      <link href="/2018/02/12/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于装饰模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>在已有的功能上边需要动态的添加新的功能。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在装饰器模式中通常用以下的几类对象:<br>抽象构件角色(Project)：给出一个接口，以规范准备接收附加责任的对象<br>具体构件角色(Employe)：定义一个将要接收附加责任的类<br>装饰角色(Manager)：持有一个构件对象的实例，并定义一个与抽象构件接口一致的接口<br>具体装饰角色(ManagerA，ManagerB)：负责给构件对象“贴上”附加的责任<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/ca3f24ba1a8a81438c8e0cb28d20b31f243b3bda674d-j4M0k8_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个人不断学习技能的例子来对装饰模式进行一个讲解:<br>首先，我们定义一个Human接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>随后我们编写一个Man类-也就是那个需要被加强的类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"直立行走"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>接下来定义SuperMan类，基于此类，我们会不断派生出新的类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Superman</span> <span class="keyword">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Human human;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Superman</span><span class="params">(Human human)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.human = human;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            human.move();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoctorS</span> <span class="keyword">extends</span> <span class="title">Superman</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoctorS</span><span class="params">(Human human)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(human);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">magic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"魔法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.move();</span><br><span class="line">        magic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其他的例子这里限于篇幅进行适当的省略。<br>最后是我们的测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Man man=<span class="keyword">new</span> Man();<span class="comment">//需要被加强的对象</span></span><br><span class="line">        man.move();</span><br><span class="line">        System.out.println(<span class="string">"增加钢铁侠的技能"</span>);</span><br><span class="line">        Ironman ironman =<span class="keyword">new</span> Ironman(man);</span><br><span class="line">        ironman.move();</span><br><span class="line">        System.out.println(<span class="string">"增加奇异博士的技能"</span>);</span><br><span class="line">        DoctorS doctorS=<span class="keyword">new</span> DoctorS(ironman);</span><br><span class="line">        doctorS.move();</span><br><span class="line">        System.out.println(<span class="string">"增加蚁人的技能"</span>);</span><br><span class="line">        AntMan antMan=<span class="keyword">new</span> AntMan(doctorS);</span><br><span class="line">        antMan.move();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>装饰模式主要是用来解决编程中使用继承，所导致的类”膨胀”问题，在本例中，我们可以看到桥接模式和前面的装饰模式有着比较类似的目的，但实际上它们是完全不同的。因为两者的诱因不一样。桥接模式是对象自身现有的机制沿着多维度的变化，既有部分不稳定。而装饰模式则是为了增加新的功能。<br>项目链接：<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/decorator" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/decorator</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>组合模式</title>
      <link href="/2018/02/11/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于组合模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>部分和整体之前通过树状结构进行显示,调用者需要达到可以使用统一的方式处理部分对象以及整体对象的目的。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>组合模式主要包括下面的几个角色:<br>2.1抽象构件:定义叶子和容器构件的共同点。<br>2.2叶子构件。<br>2.3容器构件:能够包含子节点。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/89924f7071f66eb8fbffaf45fc08fa6cbeafccae7b7e-naeNHL_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个模拟的杀毒程序对这一设计模式进行讲解：<br>首先定义我们的抽象构件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span></span>;<span class="comment">//杀毒</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>随后，定义文本文件以及图片文件类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TextFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查杀文本文件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查杀图像文件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后是文件夹类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;AbstractFile&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Folder</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile file)</span></span>&#123;</span><br><span class="line">        list.add(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile file)</span></span>&#123;</span><br><span class="line">        list.remove(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractFile <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对文件夹进行查杀"</span>);</span><br><span class="line">        <span class="keyword">for</span> (AbstractFile file:list)&#123;</span><br><span class="line">            file.killVirus();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-结论"><a href="#4-结论" class="headerlink" title="4.结论"></a>4.结论</h2><p>组合模式通常用来解决存在树形关系结构的问题，上例中的TextFile、ImageFile类正是组合模式中的叶子节点，Folder类对应容器构件，在容器构件中包含叶子节点的引用，例如上例中的list中就包含了多个叶子节点的引用。<br>下面是例子的链接:</p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>桥接模式</title>
      <link href="/2018/02/11/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于桥接模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>分离<strong>两个</strong>变化的维度，通过组合的方式来减少系统中臃肿繁琐的代码,例如JDBC中的驱动程序。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>2.1 实现（Implementor）：定义具体行为，具体特征的应用接口。<br>2.2 具体实现（ConcreteImplementor）：实现Implementor。<br>2.3目标接口（Target）: 包含实现具体行为、具体特征的Implementor接口或者类。<br><img src="http://img.hb.aicdn.com/a6e27d83a8435bcf59a99690ef9e11bb52872bf35a6d-Uf3Imq_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>这里边的类代码比较的多，而且每一个类又比较的简单，所以直接通过UML图来进行讲解:<br>在未使用桥接模式之前，代码结构如下:<br><img src="http://img.hb.aicdn.com/e36bfa6680c42de4d1c0d16810093c59301167a020ab-4LaCAt_fw658" alt=""><br>通过使用桥接模式，这时候的代码结构变成下面的情形:<br><img src="http://img.hb.aicdn.com/e67024c9eddd11aa152c161ba355940bed5d98843b3a-U4aniu_fw658" alt=""><br>具体的代码可以下面的链接进行下载:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/bridge" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/bridge</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>代理模式</title>
      <link href="/2018/02/10/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于代理模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>需要为其他的对象提供一种代理，来控制该对象的访问。Spring中的AOP技术就使用了代理模式。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>代理模式种有以下的几种对象:<br>2.1.抽象角色<br>包含有代理角色和真实角色的公共对外方法。<br>2.2.真实角色<br>真实抽象角色，定义真实角色需要实现的一些业务逻辑(真正干事的家伙)。<br>2.3.代理角色<br>实现抽象角色，是真实角色的代理通过真实角色的业务逻辑方法来实现抽象方法，并且可以附加自己另外的一些操作。(用来做流程控制)<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/1a6165419ac7cccadce663e0d3906b710885c3a63da5-QrfE1x_fw658" alt=""></p><h2 id="3-代理模式的分类"><a href="#3-代理模式的分类" class="headerlink" title="3.代理模式的分类"></a>3.代理模式的分类</h2><p>代理模式主要分为以下两类:<br>3.1.静态代理:<br>3.2.动态代理<br>  3.2.1基于JDK的动态代理<br>  3.2.2基于cglib的动态代理</p><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h2><p>下面我们通过一个例子，来对代理模式进行一个简单的说明:<br>4.1静态代理<br>什么叫静态代理呢?静态代理就是代理类需要我们手动编码实现。<br>定义接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dunk</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>;<span class="comment">//喝水</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">championWay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原始的类，实现上边的接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KevinDurant</span> <span class="keyword">implements</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Large contract!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dunk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"duang！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bath water！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">championWay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Join the warrior！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编写代理类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyKD</span> <span class="keyword">implements</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Player player;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyKD</span><span class="params">(Player player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Large contract!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dunk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"duang！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            player.drink();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">championWay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Join the warrior！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>4.2基于JDK的动态代理<br>JDK动态代理，通过java反射机制实现。<br>代理类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    Player player;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayerHandler</span><span class="params">(Player player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//进行流程控制</span></span><br><span class="line">        System.out.println(method.getName());</span><br><span class="line">        Object object=method.invoke(player,args);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>4.3基于cglib的动态代理<br>前面介绍的JDK动态代理都必须实现InvocationHandler，没有实现接口的类就不能进行代理。针对没有实现这一接口的类我们可以通过cglib来实现动态代理。cglib是通过继承以及回调来实现的，通过字节码技术生成代理类，所以我们在项目中除了引入cglib相关的依赖之外，还要添加asm的jar包。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerCgLib</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Player player;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayerCgLib</span><span class="params">(Player player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Player <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Enhancer enhancer=<span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(player.getClass());</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"KD的代理人"</span>);</span><br><span class="line">                method.invoke(player,objects);</span><br><span class="line">                System.out.println(<span class="string">"KD的代理人"</span>);</span><br><span class="line">                <span class="keyword">return</span> methodProxy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> (Player) enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>代理模式在实际开发中的应用还是比较多的，这里分别实现了静态代理以及基于java反射技术以及cgLib的动态代理实现代码。<br>项目的链接如下:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/proxy" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/proxy</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>适配器模式</title>
      <link href="/2018/02/10/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于适配器模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>由于接口不兼容，需要通过“适配器”来进行协调工作。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>适配器模式中总共有3种角色:<br>2.1目标接口<br>客户期待的接口。目标可以是具体的或抽象的类，也可以是接口。<br>2.2需要适配的类<br>需要适配的类或者适配者类。<br>2.3适配器<br>通过包装一个需要适配的对象，将原有的接口转换成目标接口。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/c4861b7e3ecbc4f7975db26b2abc0cf83048e0a1336d-s4M31u_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面通过一个生活中的一个实际例子来对这种模式进行一个讲解:<br>串行口键盘类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ps2KeyBoard</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打字very快!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这和我们的LapTop类并不兼容，但是我们不想要改代码呀，怎么办?<br>这时候就需要我们的适配器来完成这任务了!当然，在编写这个适配器之前我们需要定义一个接口，来对这个类的行为做一下规范。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>实现适配器的方式有两种<br>方法1：继承方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Ps2KeyBoard</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>方法2:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter2</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Ps2KeyBoard keyBoard;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        keyBoard.request();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter2</span><span class="params">(Ps2KeyBoard keyBoard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.keyBoard = keyBoard;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>LapTop类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Laptop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">(Target target)</span></span>&#123;</span><br><span class="line">        target.handleRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Laptop laptop=<span class="keyword">new</span> Laptop();</span><br><span class="line">        Ps2KeyBoard ps2KeyBoard=<span class="keyword">new</span> Ps2KeyBoard();</span><br><span class="line">        Target target=<span class="keyword">new</span> Adapter();</span><br><span class="line">        laptop.test01(target);<span class="comment">//方法1</span></span><br><span class="line">        Target target1=<span class="keyword">new</span> Adapter2(ps2KeyBoard);</span><br><span class="line">        laptop.test01(target1);<span class="comment">//方法2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>适配器模式主要是用来解决接口的不兼容问题，具体的解决思想，就是通过创建适配器类来对无法直接调用的对象进行包装，然后通过适配器类来调用这个不兼容的对象，返回我们需要的东西。<br>项目链接:<a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/adapter" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/adapter</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>建造者模式</title>
      <link href="/2018/02/10/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于建造者模式的复习回顾，建造者，模式分离了对象的构造和装配过程，适用于某一个对象构建过程比较复杂的情况下使用，<br>同时，装配以及构造之间实现了解耦，不同的构造器，相同的装配也能够做出不同的对象。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>1.对象的建造非常复杂，需要很多的步骤处理。<br>2.构建过程的每一步都不是必须要执行的，但是建造出来的还是”同一个东西”，只是出来的产品有一些属性会稍微”弱”一些。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在建造者模式中有如下的一些对象:<br>2.1 Builder：给出一个抽象接口，以规范产品对象的各个组成成分的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。<br>2.2 ConcreteBuilder：实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。 在建造过程完成后，提供产品的实例。<br>2.3 Director：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。<br>2.4 Product：要创建的复杂对象。<br>具体的UML示意图如下:<br><img src="http://img.hb.aicdn.com/b1e35377704552fe11d867b7978f7d61f97a8ae44bbe-GStIAg_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>这里我们通过组装一台汽车的例子，来理解这个设计模式：<br>首先是建造汽车的接口定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function">Engine <span class="title">buildEngine</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Bettery <span class="title">buildbettery</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Suspension <span class="title">buildSuspension</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>装配零件的接口定义:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarDirector</span> </span>&#123;</span><br><span class="line">    <span class="function">Tesla <span class="title">createTesla</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Engine类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String power;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Engine</span><span class="params">(String power)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.power = power;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> power;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPower</span><span class="params">(String power)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.power = power;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>汽车类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tesla</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line">    <span class="keyword">private</span> Bettery bettery;</span><br><span class="line">    <span class="keyword">private</span> Suspension suspension;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Engine <span class="title">getEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(Engine engine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bettery <span class="title">getBettery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bettery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBettery</span><span class="params">(Bettery bettery)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bettery = bettery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Suspension <span class="title">getSuspension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suspension;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuspension</span><span class="params">(Suspension suspension)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suspension = suspension;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其他的几个汽车零部件代码的比较类似，这里省略。<br>下面是汽车的构建类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeslaBuilder</span> <span class="keyword">implements</span> <span class="title">CarBuilder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Engine <span class="title">buildEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"组装发动机中..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Engine(<span class="string">"10000P"</span>);<span class="comment">//实际使用中，这边通常和工厂模式搭配，通过工厂模式来返回一个对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bettery <span class="title">buildbettery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"安装电池中...."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bettery(<span class="string">"1024"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Suspension <span class="title">buildSuspension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"安装悬挂中..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Suspension(<span class="string">"112"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最后是汽车的装配类，使用TeslaBuilder类中的build方法来进行装配。</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeslaDirector</span> <span class="keyword">implements</span> <span class="title">CarDirector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TeslaBuilder teslaBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeslaDirector</span><span class="params">(TeslaBuilder teslaBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.teslaBuilder = teslaBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tesla <span class="title">createTesla</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Engine e=teslaBuilder.buildEngine();</span><br><span class="line">        Suspension s=teslaBuilder.buildSuspension();</span><br><span class="line">        Bettery b=teslaBuilder.buildbettery();</span><br><span class="line">        Tesla tesla=<span class="keyword">new</span> Tesla();</span><br><span class="line">        tesla.setBettery(b);</span><br><span class="line">        tesla.setEngine(e);</span><br><span class="line">        tesla.setSuspension(s);<span class="comment">//看到没?一步一步装的</span></span><br><span class="line">        <span class="keyword">return</span> tesla;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>建造者模式和前面讲的抽象工厂有点”像”,但本质是不一样的，建造者模式，它是通过一步一步的装配来完成对象的创建，而对于抽象工厂，这个装配的过程是不需要考虑的，它考虑的只是如何取不同的”原材料”然后组装成一个新东西。<br>项目链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/builder" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/builder</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>工厂模式</title>
      <link href="/2018/02/09/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于工厂模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>1.类不知道自己要创建哪一个对象<br>2.类用它的子类来指定创建哪个对象<br>3.客户需要清楚创建了哪一个对象</p><h2 id="2-三种不同工厂的区别"><a href="#2-三种不同工厂的区别" class="headerlink" title="2.三种不同工厂的区别"></a>2.三种不同工厂的区别</h2><p>简单工厂：针对一种产品。缺点是破坏了开放，封闭原则。<br>工厂模式: 对简单工厂做了相应的改进，改正了简单工厂破坏开放封闭原则的错误。<br>抽象工厂：针对于多种产品，和简单工厂以及工厂模式并无太大的关联。</p><h2 id="3-UML表示"><a href="#3-UML表示" class="headerlink" title="3.UML表示"></a>3.UML表示</h2><p>简单工厂：<br><img src="http://img.hb.aicdn.com/916c32275fa5a2862bbd6f75554d704736ac9a6352e0-TAijhT_fw658" alt=""><br>工厂模式:<br><img src="http://img.hb.aicdn.com/3432d48b509befcc539183a26a88b670c167601b578c-VYYZqT_fw658" alt=""><br>抽象工厂:<br><img src="http://img.hb.aicdn.com/13149049e34fccae194138e013ef85f44f8e4c568355-N4Gnol_fw658" alt=""></p><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h2><p>首先是简单工厂的代码实现：<br>我们以一个手机加工厂的例子展开，首先是Phone接口的相关代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>接下来是每一个具体厂商的手机：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuanWei</span> <span class="keyword">implements</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"不用不是中国人？"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMi</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"燃烧吧!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Iphone</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"只要$999"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>普通工厂类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Phone <span class="title">createPhone</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"小米"</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> XiaoMi();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"华为"</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> HuanWei();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"Iphone"</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Iphone();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span>  <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其次是工厂模式的代码实现，Phone接口与简单工厂类似，新增手机工厂接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line">     <span class="function">Phone <span class="title">createPhone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Iphone</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"只要$999"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IphoneFactory</span> <span class="keyword">implements</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">createPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iphone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后是抽象工厂的代码实现，抽象工厂主要是整合多个不同的对象，例如下面的例子：分别使用不同的零件就能整合出手机以及个人PC。<br>CPU接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CPU</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其他零部件的接口类似，这里省略。<br>电子加工工厂接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ElectronicFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">CPU <span class="title">createCpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">GraphicsProcessor <span class="title">createG</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Screen <span class="title">createScreen</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>手机加工工厂类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneFactory</span> <span class="keyword">implements</span> <span class="title">ElectronicFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CPU <span class="title">createCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pcpu();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GraphicsProcessor <span class="title">createG</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PhoneG();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Screen <span class="title">createScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PhoneScreen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>PC机加工工厂类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PcFactory</span> <span class="keyword">implements</span> <span class="title">ElectronicFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CPU <span class="title">createCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pcpu();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GraphicsProcessor <span class="title">createG</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PcG();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Screen <span class="title">createScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PcScreen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后，给出项目的代码连接：<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/factory" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/factory</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>单例模式</title>
      <link href="/2018/02/08/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于单例模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>单例模式的作用主要是保证一个类只有一个实例，并且提供一个访问这个实例的全局访问点，通常在以下的场景中使用：<br>1.读取配置文件<br>2.设计数据库连接池等等</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p><img src="http://img.hb.aicdn.com/0beda02b7655c492d6394df1c891edf4fc547d6938e7-BcXyYr_fw658" alt=""><br>从上图中可以看出，单例模式结构图中只包含了一个单例的角色。</p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>常见的单例模式总共有6种，下面分别对这6种单例模式进行实现：<br>3.1 懒汉式<br>特点：懒汉式加载，能够实现延时加载，缺点是调用的效率不高。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lasy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lasy s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Lasy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Lasy <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s==<span class="keyword">null</span>)&#123;</span><br><span class="line">            s=<span class="keyword">new</span> Lasy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.2 饿汉式<br>特点：饿汉式加载,线程安全,效率极高。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hungry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Hungry instance=<span class="keyword">new</span> Hungry();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hungry</span><span class="params">()</span> </span>&#123;<span class="comment">//防止被反射创建</span></span><br><span class="line">        <span class="keyword">if</span>(instance!=<span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.3 双重检测<br>特点：减少了锁的粒度，比懒汉式更有效率。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheck</span> </span>&#123;</span><br><span class="line">   <span class="keyword">volatile</span> <span class="keyword">private</span> <span class="keyword">static</span> DoubleCheck instance=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheck <span class="title">getInstance</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">           Thread.sleep(<span class="number">300</span>);</span><br><span class="line">           <span class="keyword">synchronized</span> (DoubleCheck.class)&#123;</span><br><span class="line">               <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                   instance=<span class="keyword">new</span> DoubleCheck();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.4 枚举方式<br>特点：<br>通过枚举的方式实现单例，缺点是无法实现懒加载。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumSingleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singletonOperation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//功能处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.5 内部类方式<br>特点：<br>类加载的过程是线程安全的，所以线程安全。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticInner instance=<span class="keyword">new</span> StaticInner();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInner <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.6 序列化和反序列化实现单例<br>特点：<br>添加readResolve()方法，防止序列化和反序列化机制对单例的破坏，具体可以查看:<a href="http://www.hollischuang.com/archives/1144" target="_blank" rel="noopener">http://www.hollischuang.com/archives/1144</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BetterLasy</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BetterLasy s;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> BetterLasy <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s==<span class="keyword">null</span>)&#123;</span><br><span class="line">            s=<span class="keyword">new</span> BetterLasy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后附上代码的连接：<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/singleton" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/singleton</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原型模式</title>
      <link href="/2018/02/07/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于原型模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>1.1.对象类型只有在运行期才能够确定。<br>1.2.克隆一直对象的副本。<br>1.3.大同小异的一些对象。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在原型模式中通常用以下的几类对象:<br>Client角色：使用原型对象的客户程序<br>Prototype角色：规定了具体原型对象必须实现的接口（如果要提供深拷贝，则必须具有实现clone的规定）<br>ConcretePrototype：从抽象原型派生而来，是客户程序使用的对象，即被复制的对象。此角色需要实现抽象原型角色所要求的接口。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/6494dd27a94eba0101c37441bace3cf13fb9b83b38aa-UjlbSN_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面举一个忍者使用影分身术的例子：<br>定义普通忍者类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ninjia_A</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rp;<span class="comment">//血槽</span></span><br><span class="line">    <span class="keyword">private</span> Ninjutsu ninjutsu;<span class="comment">//忍术</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ninjia_A</span><span class="params">(String name, <span class="keyword">int</span> rp,Ninjutsu ninjutsu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.rp = rp;</span><br><span class="line">        <span class="keyword">this</span>.ninjutsu=ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Ninjutsu <span class="title">getNinjutsu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNinjutsu</span><span class="params">(Ninjutsu ninjutsu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ninjutsu = ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">         Ninjia_A nn;</span><br><span class="line">         nn= (Ninjia_A) <span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="keyword">return</span> nn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRp</span><span class="params">(<span class="keyword">int</span> rp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rp = rp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>S级忍者:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ninjia_S</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2169380777227967513L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rp;<span class="comment">//血槽</span></span><br><span class="line">    <span class="keyword">private</span> Ninjutsu ninjutsu;<span class="comment">//忍术</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ninjia_S</span><span class="params">(String name, <span class="keyword">int</span> rp,Ninjutsu ninjutsu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.rp = rp;</span><br><span class="line">        <span class="keyword">this</span>.ninjutsu=ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Ninjutsu <span class="title">getNinjutsu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNinjutsu</span><span class="params">(Ninjutsu ninjutsu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ninjutsu = ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRp</span><span class="params">(<span class="keyword">int</span> rp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rp = rp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">dclone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException, IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line">        ByteArrayInputStream bis=<span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>忍术类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ninjutsu</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> damage;<span class="comment">//破坏力</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ninjutsu</span><span class="params">(<span class="keyword">int</span> damage, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.damage = damage;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDamage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> damage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDamage</span><span class="params">(<span class="keyword">int</span> damage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.damage = damage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        Ninjia_A kakaxi=<span class="keyword">new</span> Ninjia_A(<span class="string">"旗木.卡卡西"</span>,<span class="number">50</span>,<span class="keyword">new</span> Ninjutsu(<span class="number">500</span>,<span class="string">"影分身"</span>));</span><br><span class="line"></span><br><span class="line">        Ninjia_A kk;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             kk= (Ninjia_A) kakaxi.clone();</span><br><span class="line"></span><br><span class="line">             System.out.println(kakaxi.getNinjutsu()==kk.getNinjutsu());</span><br><span class="line">            <span class="comment">// System.out.println(kk.getNinjutsu().getName()+"  "+kk.getNinjutsu().getDamage());</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Ninjia_S naturo=<span class="keyword">new</span> Ninjia_S(<span class="string">"漩涡.那乳托"</span>,<span class="number">500</span>,<span class="keyword">new</span> Ninjutsu(<span class="number">1000</span>,<span class="string">"影分身"</span>));</span><br><span class="line">        Ninjia_S nn;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nn= (Ninjia_S) naturo.dclone();</span><br><span class="line">            System.out.println(naturo.getNinjutsu()==nn.getNinjutsu());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试结果:<br><img src="http://img.hb.aicdn.com/5a48aaa1121b2205e3a42bc20467d2df713f01ecd5d-IVzWPz_fw658" alt=""></p><p>结论：原型模式更像一种编程的技巧，很少单独使用，注意的是在Java中，除了基本数据类型外，其他的都是引用类型，这个必须注意。<br>最后，附上文章的代码下载连接：<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/prototype" title="源代码下载" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/prototype</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>每个极客都应该知道的Linux技巧</title>
      <link href="/2018/01/14/%E6%AF%8F%E4%B8%AA%E6%9E%81%E5%AE%A2%E9%83%BD%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84Linux%E6%8A%80%E5%B7%A7/"/>
      <content type="html"><![CDATA[<p>摘要:<br>转载自:<a href="http://blog.csdn.net/ww122081351/article/details/22716067" target="_blank" rel="noopener">http://blog.csdn.net/ww122081351/article/details/22716067</a><br><a id="more"></a><br>正文:<br>是什么区分开普通的Linux用户和超级极客的呢？很简单：用在学习那些使长时工作转变为一瞬间工作的技巧、诀窍、秘诀和技术上的时间。如果你想提高效率而又不用做这些搜集资料的跑腿活儿，那我们已经收集了50多条简单易学的Linux技巧，以帮助你更潇洒地工作，并且最大限度的利用你的电脑。开始享受吧！</p><p>1：检查不是由你运行的程序</p><p>难度：高级</p><p>应用程序：bash（译注：UNIX或者LINUX的shell）</p><p>想象下这个场景-你已经准备好了要和同事在办公室里对战一局快速的Crack Attack（译注：一款免费的OpenGL游戏，类似俄罗斯方块），不料却发现，当你正准备要击败你这个傲慢的下属时，方块却停止了-是什么让你的机器变得这么慢？这肯定是因为其他的用户运用他们娴熟的经验来盗取你宝贵的CPU时间、服务器或者其他的诡异方式，真烦人！</p><p>好，让我们列举出系统中所有不是由你运行的程序！</p><p>ps aux | grep -v <code>whoami</code> </p><p>或者，更巧妙些的是，为什么不列出最占用时间的前十个程序呢：</p><p>ps aux–sort=-%cpu | grep -m 11 -v <code>whoami</code> </p><p>也许最好使用root权限来运行这条指令，因为这样可以过滤出大部分活跃的后台程序。现在你有了这些信息，你可以终止他们的进程，但是更“卑鄙”的是反复地在他们的桌面上运行xeyes（译注：Linux下的一条好玩的命令）！</p><p>2：在多个文件中替换掉相同的文本</p><p>难度：中等</p><p>应用程序：find（译注：Linux下的一条命令）/Perl</p><p>如果你有个文件，想在多个位置进行替换，这里有很多方法来实现。调用test[someting]把当前目录里所有文件中的Windows替换成Linux，你可以像这样运行它：</p><p>perl -i -pe ’s/Windows/Linux/;’ test* </p><p>要替换当前目录以及下层目录里所有文件中的Windows为Linux，你可以这样运行：</p><p>find . -name ’<em>.txt’ -print | xargs perl -pi -e’s/Windows/Linux/ig’ </em>.txt </p><p>或者如果你更需要让它只作用于普通文件上：</p><p>find -type f -name ’*.txt’ -print0 | xargs –null perl -pi -e ’s/Windows/Linux/’ </p><p>节省了大量的时间并且获得了高水平的大师等级！</p><p>3：合并一个不稳定的终端</p><p>难度：简单</p><p>应用程序：bash</p><p>我们都已经做过这件事了-偶尔使用less或者cat来列出一个文件，或者以浏览二进制文件而结束，这通常包含各种可以轻易弄乱你的终端显示的控制代码、警报声、一些有趣的字符，以及一些奇怪的颜色组合，最后，你的字体将会被一些难以辨认的字符所替代，而你却不知道该怎么办。显然bash仍然继续工作着，但是你就是不能明白到底发生了什么！发送一个初始化命令给这个终端：</p><p>reset </p><p>然后一切就再次恢复正常了。</p><p>4：创造Mozilla关键词</p><p>难度：简单</p><p>应用程序：Firefox/Mozilla</p><p>在浏览器上的一个有用的特征是，它们有一种能力，可以通过输入gg onion来通过Google搜索onion这个词的一切。同一功能在Mozilla上也可实现，通过单击Bookmarks（书签）&gt;Manage Bookmarks（管理书签）然后添加一个新的书签，添加的URL就像这样：</p><p><a href="http://www.google.com/search?q=%s" target="_blank" rel="noopener">http://www.google.com/search?q=%s</a> </p><p>现在选择书签编辑器中的条目并且点击Properties（属性）按钮，现在输入一个类似gg的关键字（或者可以是你选择的任何字符）就行了。在URL中的%s将被关键字之后的文本内容替代。你可以用这种方法向其他一些依赖你当前URL信息的网站发送请求。</p><p>或者，右击一个搜索区域然后选择菜单选项“为这个搜索添加一个关键词…”。接下来的会话将允许你使用一个指定的关键词。</p><p>5：运行多种X会话</p><p>难度：简单</p><p>应用程序：X</p><p>如果你给别人分享了你的Linux box（），而厌烦了不断的登入、登出，当你知道了这不是必要的时候，可能会如释重负。假设你的电脑以图形模式启动（runlevel 5），通过同时按下Control+Alt+F1键-你将得到一个登陆提示。输入你的登录名以及密码然后执行：</p><p>startx – :1 </p><p>来进入你的图形环境。按下Ctrl+Alt+F7来回到在你之前的用户会话，如果想回到你自己的用户会话则按下Ctrl+Alt+F8。</p><p>你可以重复使用这项技巧：F1键到F6键可以识别六个控制台会话，而F7到F12可以识别六个X会话。警告：尽管这在多数情况下是适用的，但是不同的变种可能用不同的方式来实现这项功能。</p><p>6：更快地浏览</p><p>难度：简单</p><p>应用程序：KDE（译注：一种Linux的桌面环境）</p><p>KDE是一个虽然小众，但是在提升你的网页浏览经验方面很有用的选择。启动一个KDE控制中心，然后从工具条中选择System（系统）&gt;KDE performance。现在你可以选择预加载浏览器实例。实际上，这意味著浏览器在开机的时候就开始运行，在你用之前都保持隐藏状态。当你想要使用它的时候，它几乎是瞬间出现。</p><p>7：简单地备份你的网站</p><p>难度：简单</p><p>应用程序：Backups</p><p>如果你想要从一台电脑上备份一个目录，但你仅仅想要复制改变的文件到它的备份而不是复制所有的东西到各自的备份，你可以使用工具rsync来实现它。你需要在这个远程的源备份计算机上有一个账户。下面是这条命令：</p><p>rsync -vare ssh <a href="mailto:jono@192.168.0.2" target="_blank" rel="noopener">jono@192.168.0.2</a>:/home/jono/importantfiles/* /home/jono/backup/ </p><p>这样我们就备份了192.168.0.2地址上/home/jono/importantfiles/目录下的所有文件到当前机器上的/home/jono/backup目录下。</p><p>8：使你的时钟保持准时</p><p>难度：简单</p><p>应用程序：NTP</p><p>如果你发现电脑上的时钟似乎与时间脱轨了，你可以使用一个特殊的NTP工具，来确保它准到只有穿实验服的人才会需要的程度。你需要安装ntpdate工具，它通常包含在NTP包中，然后你就可以与NTP服务器保持同步了：</p><p>ntpdate ntp.blueyonder.co.uk </p><p>可以在<a href="http://www.eecis.udel.edu/~mills/ntp/clock1b.html上获得相应的NTP服务器的列表。如果你修改了你的开机程序并且在脚本中包含这些命令，就可以确保无论何时你启动电脑都是完全准时的。你还可以运行一个定时任务来校对时间。" target="_blank" rel="noopener">www.eecis.udel.edu/~mills/ntp/clock1b.html上获得相应的NTP服务器的列表。如果你修改了你的开机程序并且在脚本中包含这些命令，就可以确保无论何时你启动电脑都是完全准时的。你还可以运行一个定时任务来校对时间。</a></p><p>9：找到最大的文件</p><p>难度：简单</p><p>应用程序：Shell</p><p>计算机中一个常见的问题是，你可能想删一部分大的文件（类似音频或视频片段）。如下你可以找到当前目录中最大的那个文件：</p><p>ls -lSrh </p><p>“r”的作用是将大的文件列在后面，而“h”则是给出易于人们阅读的输出(MB或者诸如此类)。你也可以搜寻最大的MP3/MPEG文件：</p><p>ls -lSrh <em>.mp</em> </p><p>你也可以通过下面这条命令搜寻最大的目录：</p><p>du -kx | egrep -v ”./.+/” | sort -n </p><p>10：Nautilus快捷键</p><p>难度：简单</p><p>应用程序：Nautilus（译注：Linux图形界面中的一个文件管理器）</p><p>尽管很多文件管理器近日来被设计为使用鼠标进行管理，但有时用键盘还是方便些。Nautilus有一些键盘快捷键，可以使你快速浏览文件：</p><p>打开一个定位文件 – Ctrl+L<br>打开父文件夹 – Ctrl+Up<br>用方向键来浏览当前文件夹<br>你也可以使用‘emblems’来定制文件图标。这里有少量的应用于个别文件或者组的图象展示。打开Edit(编辑) &gt; Backgrounds and Emblems(背景和符号)菜单条目，然后拖放你想要的图片即可。</p><p>11：整理你的数据库</p><p>难度：简单</p><p>应用程序：MySQL</p><p>无论何时你改变一个MySQL数据库的结构，或者从中删掉大量的数据，文件都有可能被分散，并导致一些性能损失。尤其是当运行查询命令时这个情况最容易发生。每当你要改动数据库的时候，记得运行这个优化器：</p><p>mysqlcheck -o <databasename> </databasename></p><p>也许你会发现，如果你使用VARCHAR文件，有必要定期的整理你的数据库表：这个变长列（variable-length columns）是非常倾向于分裂的。</p><p>12：更快的邮件</p><p>难度：简单</p><p>应用程序：KMail</p><p>连三秒钟都不想花费在找邮箱客户端上面？不想被桌面上堆积成山日渐腐烂的图标搞得找不到鼠标指针？不管你正在KDE里干什么，按几下键盘就可以发邮件了。输入：</p><p>mailto:<a href="mailto:plop@ploppypants.com" target="_blank" rel="noopener">plop@ploppypants.com</a> </p><p>按下return，KMail将会自动启动，为你的至理名言做好准备。你甚至不需要填写完整的邮件地址。这对Internet地址也是有效的：尝试输入<a href="http://www.slashdot.org来启动浏览器。" target="_blank" rel="noopener">www.slashdot.org来启动浏览器。</a></p><p>13：同化你的构造</p><p>难度：简单</p><p>应用程序：GCC</p><p>如果你运行一个拥有适量RAM的多处理机系统（SMP），你会发现，在写代码时，运行一个parallel make很有好处。与按照默认方式运行make并执行serial builds相比，parallel build 是一种很有效的改善方法。让make在building的时候允许同时存在多个child，用如下的-j转换即可：</p><p>make -j4; make -j4 modules </p><p>14：节省电池电源</p><p>难度：中等</p><p>应用程序：hdparm</p><p>很可能你已经对使用hdparm来调整一个硬件驱动很熟悉了，但是它还能节约你的笔记本的电池寿命，或者通过降低硬盘转速来使生活更宁静。</p><p>hdparm -y /dev/hdb </p><p>hdparm -Y /dev/hdb </p><p>hdparm -S 36 /dev/hdb </p><p>按顺序，这些命令将让硬件转换成Standby（待命）模式，再转换成Sleep（睡眠）模式，并且最终设置Automatic（自动）旋转超时。这个结尾包含一个以5秒为单位的一块块数字变量（例如，值为12就等同于一分钟）。</p><p>顺便说一下，这个降低旋转时间至5秒为单位的习惯真值得拿一个特别的用户友好奖——这个值的设置也许有什么历史原因，但我们不知道。如果你恰好知道为什么，请来信告知我们！</p><p>15：无线速度管理</p><p>难度：中等</p><p>应用程序：iwconfig</p><p>一个radio发送/接受设备和其他设备间的传输速度，取决于有多少可用信号。在信号减弱的时候如需维持传输，就需要降低radio的传输速度。一般情况下，radio都会自己找到可用信号，并自动选择最快的速度。</p><p>在边缘区域中，信号强度勉强够用，这时候就可能因radio不断调试连接速度而造成不必要的包丢失。如果不能加强天线增益，或移动设备位置来获取更充足的信号，可以尝试强制让card同步到一个较低的速率。这样，radio就会减少调试频率，实际上，还会比使用持续触发的链接传输得快一些。不同的驱动器有不同的链接速度设置方法。在Linux中，可用iwconfig来设置速度：</p><p>iwconfig eth0 rate 2M </p><p>这个指令能强制使广播总是同步在2Mbps，即使还存在其他可用速度。你也可以设置一个明确的速度作为上限，允许卡自动按照任何低于这个上限的速度来工作，但是不能高于它。例如，你可以把它作用于上文举例的连接上：</p><p>iwconfig eth0 rate 5.5M auto </p><p>如上的指令可以让驱动器将速度上限设为5.5Mbps，只慢不快。想要将card恢复为全自动缩放，只需要制定它自己自动工作。</p><p>iwconfig eth0 rate auto </p><p>通常卡在1Mbps时比它们在11Mbps时可以延伸的更远。在这两种速率之间，Orinoco卡有12dB的差别，即降低数据速率可获得的潜在传输距离的四倍。</p><p>16：疏通开端口</p><p>难度：中等</p><p>应用程序：netstat</p><p>要获取在Linux服务器上处于监听状态的网络服务器的列表，可使用netstat程序：</p><p>root@catlin:~# netstat -lnp </p><p>Active Internet connections (only servers) </p><p>Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name </p><p>tcp 0 0 0.0.0.0:5280 0.0.0.0:* LISTEN 698/perl </p><p>tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 217/httpd </p><p>tcp 0 0 10.42.3.2:53 0.0.0.0:* LISTEN 220/named </p><p>tcp 0 0 10.42.4.6:53 0.0.0.0:* LISTEN 220/named </p><p>tcp 0 0 127.0.0.1:53 0.0.0.0:* LISTEN 220/named </p><p>tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 200/sshd </p><p>udp 0 0 0.0.0.0:32768 0.0.0.0:* 220/named </p><p>udp 0 0 10.42.3.2:53 0.0.0.0:* 220/named </p><p>udp 0 0 10.42.4.6:53 0.0.0.0:* 220/named </p><p>udp 0 0 127.0.0.1:53 0.0.0.0:* 220/named </p><p>udp 0 0 0.0.0.0:67 0.0.0.0:* 222/dhcpd </p><p>raw 0 0 0.0.0.0:1 0.0.0.0:* 7 222/dhcpd </p><p>如上消息告诉你PID为698的进程是一个绑定在5280端口的Perl进程。如果你不是超级用户，系统将不会显示哪个程序是运行在哪个端口上的。</p><p>17：更快的硬件驱动</p><p>难度：高级</p><p>应用程序：hdparm</p><p>也许你已经知道hkparm工具可以用于测试硬盘速度和更改一些设置。它还可以用于优化驱动性能，并且开启一些默认关闭的功能。在我们开始之前，敬告您，改变驱动选项可能会造成数据损坏，所以首先请备份你所有的重要数据。如下命令可以用来测试速度：</p><p>hdparm -Tt /dev/hda </p><p>你将会看到类似于这样的东西：</p><p>/dev/hda: </p><p>Timing buffer-cache reads: 128 MB in1.64 seconds =78.05 MB/sec </p><p>Timing buffered disk reads:64 MB in 18.56 seconds = 3.45MB/sec </p><p>现在我们可以尝试让它提速。找出你的驱动目前设置使用的是哪个选项，然后传递给hdparm这个硬件的名称:</p><p>hdparm /dev/hda </p><p>/dev/hda: </p><p>multcount=16 (on) </p><p>I/O support=0 (default 16-bit) </p><p>unmaskirq=0 (off) </p><p>using_dma=0 (off) </p><p>keepsettings =0 (off) </p><p>readonly =0 (off) </p><p>readahead=8 (on) </p><p>geometry = 40395/16/63, sectors = 40718160, start = 0 </p><p>这相当于一个默认设置。多数的Linux发行版本都会选择一个可以运行在多数硬件上的安全选项。为了获得更快的速度，你可能想要激活dma模式，然后当然要调整I/O支持。多数现代计算机支持模式3，这是一个近乎双倍通量的32位转换模式。你也可以尝试：</p><p>hdparm -c3 -d1/dev/hda </p><p>然后返回这个速度，查看一下不同。检验你的硬件支持哪些模式，然后可以在hdparm的man手册中学习如何设置它们。</p><p>18：在你手中的可用时间</p><p>难度：高级</p><p>应用程序：Perl</p><p>对计算来说，浪费的资源就是那些本可以派上更好的用场的资源。不管你还运行了什么别的程序，为什么不尝试运行一个进程，在终端标题栏实时显示当前的平均负载呢？</p><p>将这个存为一个脚本并命名为tl，然后把它存到你的~/bin目录下：</p><p>#!/usr/bin/perl -w </p><p>use strict; </p><p>$|++; </p><p>my $host=<code>/bin/hostname</code>; </p><p>chomp $host; </p><p>while(1) { </p><p>open(LOAD,”/proc/loadavg”) || die ”Couldn’t open /proc/loadavg: $!\n”; </p><p>my @load=split(/ /,<load>); </load></p><p>close(LOAD); </p><p>print ”$host: $load[0] $load[1] $load[2] at ”, scalar(localtime); </p><p>print ”07″; </p><p>sleep 2; </p><p>} </p><p>如果你想用用load average和你登陆的机器的当前时间，来替换titlebar名字，与西宁tl&amp;即可。它会很恰当的在后台运行，即使你运行一个类似Vim的交互式程序。</p><p>19：不使用X完成抓取一次屏幕截图</p><p>难度：简单</p><p>应用程序：Shell</p><p>确实有很多屏幕捕获的工具，但是他们大部分都是基于X的。这导致了一个问题，当你运行一个X应用程序时，将会干扰这个你想要抓取的应用程序——或许是一个游戏或者甚至是一个Linux安装程序。但如果你使用了超棒的ImageMagick（译注：一个开源的图片处理工具集和开发包）导入命令，你就可以通过控制台来对X模块进行抓取。很简单，打开一个虚拟终端（例如Ctrl+Alt+F1）然后输入如下：</p><p>chvt 7; sleep 2; import -display :0.0 -window root sshot1.png; chvt 1; </p><p>chvt命令改变了虚拟终端，而sleep命令给重绘屏幕提供了一个时间。导入命令会在最后的chvt命令把你再次打回到虚拟终端之前，捕获所有的显示并且保存到一个文件中。请确保你把所有的命令都输入在同一行中。</p><p>这是甚至在Linux安装程序上也是有效的，很多安装程序都只留下一个控制台而转去后台运行——一个一流的到处运行的屏幕抓取器只需要加载一些它所需要的库到一个floppy（译注：磁盘）/CD上。</p><p>20：远程访问你的程序</p><p>难度：简单</p><p>应用程序:X</p><p>如果你想要躺在床上使用你的Linux笔记本从你的Window机器上访问你的应用程序，可以使用SSH来实现。首先你需要在/etc/ssh/sshd_config中激活以下设置：</p><p>X11Forwarding yes </p><p>现在我们可以使用如下命令在192.168.0.2上运行GIMP：</p><p>ssh -X 192.168.0.2 gimp </p><p>21：用到man手册</p><p>难度：简单</p><p>应用程序：man</p><p>如果你在一个特殊的项目或者命令中需要帮助，man手册是一个好的入门。通常你使用man<command>来访问man手册，但是你也可以通过一个特殊的man页描述的关键词来搜索man页。举例来说，搜索所有详述login的man页：</p><p>man -k login </p><p>当你访问了一个man页，你也可以使用斜杠键来搜索一个特定的词而不是用man页本身。在你的键盘上按下“ / ”然后输入搜索项是非常简单的。</p><p>22：和你的医生对话</p><p>难度：简单</p><p>应用程序：Emacs</p><p>如果说Emacs只是个文本编辑器，就好像说Triumph只是个摩托车，或者说世界杯就是个四年一度的足球赛。好吧，它确实是个文本编辑器，但那只是一小~~~部分。举个栗子？打开编辑器，按下Esc键，紧接着按下X，然后进入doctor：你将会进入到一个离奇的对话中，有一个假想的但是熟练的精神治疗师。如果你想要磨蹭你的时间，这是一个很好的方法。</p><p>Esc-X tetris </p><p>会将你的‘编辑器’转变成一个老的、受欢迎的游乐场游戏。</p><p>疯狂到此为止了吗？绝对没有！检查你的发行版本的包，列出他们在你的Emacs上捆绑的其他功能：我们看到有国际象棋，Perl集成，IRC chat（译注：一种聊天工具），法文翻译，HTML转换，一个Java开发环境，灵巧的编辑，甚至还有一个被称为“semantic bovinator”（语义纠错）的东西。我们确实对最后一个能做什么的毫无头绪，但是我们断定无论如何你都敢尝试它！（请先阅读免责声明！）</p><p>23：生成包关联图表</p><p>难度：简单</p><p>应用程序：Debian</p><p>Debian系统最受争议的是它能安装一个包，并自动满足其附属（dependency）。如果你想要以图形形式表现这些包之间的关系（这对于了解系统如何协调工作是非常有用的），你可以使用Debian中非自由的Graphviz包（apt-get install graphviz）然后使用如下命令：</p><p>apt-cache dotty &gt; debian.dot </p><p>这个命令会生成图片文件并存入dotty：</p><p>dotty debian.dot </p><p>24：卸载忙碌状态的驱动</p><p>难度：简单</p><p>应用程序：bash</p><p>你应该很熟悉这种情况-尝试去卸载一个驱动，但是系统却告诉你它处于忙碌状态。但是什么程序在占用呢？一个短小的单行代码将告诉你：</p><p>lsof +D /mnt/windows </p><p>这将返回命令和进程ID以及任何正在访问/mnt/windows目录的任务。接下来你就可以定位它们，或者使用kill命令来终结它们。</p><p>25：文本文件的转换</p><p>难度：简单</p><p>应用程序：recode</p><p>recode是一个小而实用并且可以帮你在不同平台上使用文本文件时节省大量精力的工具。它的缺陷主要是源于换行符。一些系统使用一个换行字符，而其他的一些系统使用回车。更多其他的系统两个都用。最后的结果就是，如果你从一个平台移动文本文件到另一个平台上，你会有太多或太少的换行符，还会有很多奇怪的字符残留。</p><p>然而，recode命令的参数是有一些神秘的，所以为什么不把这种技巧和HACK 26结合到这个功能中，然后建立一些有用的别名：</p><p>alias dos2unix=‘recode dos/CR-LF..l1′ </p><p>alias unix2win=‘recode l1..windows-1250′ </p><p>alias unix2dos=‘recode l1..dos/CR-LF’ </p><p>还有很多recode选项-它们确实可以转换大量字符间的设置。查阅man手册来获取更多信息。</p><p>26：只列出今天的文件</p><p>难度：简单</p><p>应用程序：Various</p><p>你可能熟悉这个问题，今天早些时候你创建了一个文本文档，而现在立刻就需要它。然而，你想不起来你给它起了个什么可笑的名字，作为一个熟练的geek，你的家文件夹被836个不同的文件填满了。那你要如何找到它呢？哈哈，这里有很多方法，但是这个小技巧告诉你管道和结合使用两个强力的shell命令是多么有效：</p><p>ls -al –time-style=+%D | grep <code>date +%D</code> </p><p>ls命令的参数使得这个日期戳以一种特殊的方式呈现。这个狡猾的位就是这样传递给grep来输出的。grep的参数是它自己的命令（因为是倒引号所以执行），用来将当前的日期替代成匹配的字符。你可以轻易的修改它来搜索其他特别的日期、时间、文件大小或者任何东西。结合它与HACK 26是非常节省输入的。</p><p>27：避免常见的拼写错误和长命令</p><p>难度：简单</p><p>应用程序：Shell</p><p>这个alias命令对于设立长命令的快捷键是有用的，或者说是聪明的事情。HACK 25中，我们可以通过以下命令来得到一个新命令，lsnew：</p><p>alias lsnew=“ ls -al –time-style=+%D | grep <code>date +%D</code> ” </p><p>然而alias还有其他的用处。例如，解决常见的拼写错误。有多少次你在改变父目录时忽略了空格？不用再苦恼了！</p><p>alias cd..=“cd ..” </p><p>作为一种选择，试试重写一些已经存在的命令怎么样？</p><p>alias ls=“ls -al” </p><p>像我们一样节省一些按键，或者你总是想要完成清单。</p><p>要为每一个会话激活这些快捷键，只用添加alias命令到你的用户里家文件目录中的.bashrc文件中。</p><p>28：更改Mozilla的秘密设置</p><p>难度：简单</p><p>应用程序：Mozilla</p><p>如果你想要改变Mozilla操作，但是在首选项中并没有提供可以点击的选项来帮助你，这里有一个特殊的模式可以让你在Mozilla中激活，这样你就能改变一切了。要访问它，在地址栏中输入这些：</p><p>about:config </p><p>这样你就可以改变表中文件里每一个你感兴趣的设置的值。</p><p>其他有趣的模式包括总体信息（about：），插件详情（about:plugins），开发者信息（about:credits）和一些总体情况（about:mozilla）。</p><p>29：一个星星的背景</p><p>难度：简单</p><p>应用程序：KStars</p><p>你可能已经玩过KStars了，但是如何创造一个每次当你启动时就更新的KStars背景图呢？</p><p>KStars可以和–dump switch一起运行，它可以从你的启动设置中打印出一幅图片，但一点也不会增加GUI的负载。你可以写一个脚本来运行它生成一个每天都更换的桌面图片（或者你可以只是使用这个方法生成图片）。</p><p>像这样使用KStars：</p><p>kstars –dump –width 1024 –height 768 –filename = ~/kstarsback.png </p><p>你可以把它添加到~/.kde/Autostart文件夹的一个脚本中，一启动就开始运行。在浏览器中找到这个文件，把它拖到桌面上然后选择“设置为墙纸”，将它作为一个随机生成的背景图来使用。</p><p>30：直接打开一个SVG</p><p>难度：简单</p><p>应用程序：Inkscape</p><p>你可以通过shell运行Inkscape，然后直接通过一个URL来立刻编辑一张图片。只用输入：</p><p>inkscape <a href="http://www.somehost.com/graphic.svg" target="_blank" rel="noopener">http://www.somehost.com/graphic.svg</a> </p><p>记得要另存为一下！</p><p>31：不用编辑器来进行编辑</p><p>难度：中等</p><p>cut -c 8-15 file1 &gt; file2 </p><p>应用程序：好多</p><p>通常非常长的文件是很难用文本编辑器来进行操作的。如果你不时地要做这件事，可能你会发现用某些趁手的命令行工具会更快一些，就像下面这个例子一样。</p><p>从文件file1中打印第一列和第三列到文件file2中，我们可以使用awk：</p><p>awk ’{print $1, $3}’ file1 &gt; file2 </p><p>只输出file1中第八列到第十五列中的字符，我们可以使用cut：</p><p>cut -c 8-15 file1 &gt; file2 </p><p>要使用单词word2来替换文件file1中的单词word1，我们可以使用sed命令：</p><p>sed ”s/word1/word2/g” file1 &gt; file2 </p><p>通常这是一个比打开文本编辑器更快得到结果的方式。</p><p>32：只备份选中的文件</p><p>难度：中等</p><p>应用程序：tar</p><p>想要使用tar来备份一个目录中的某一文件？你可以使用-T标志。首先，用你想要备份的文件来创建一个文件：</p><p>cat &gt;&gt; /etc/backup.conf </p><h1 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h1><h1 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h1><h1 id="etc-yp-conf"><a href="#etc-yp-conf" class="headerlink" title="/etc/yp.conf"></a>/etc/yp.conf</h1><h1 id="etc-sysctl-conf"><a href="#etc-sysctl-conf" class="headerlink" title="/etc/sysctl.conf"></a>/etc/sysctl.conf</h1><p>EOF </p><p>然后运行tar，并使用-T标志指向刚刚创建的文件。</p><p>tar -cjf bck-etc-<code>date +%Y-%m-%d</code>.tar.bz2 -T /etc/backup.conf </p><p>现在你已经备份好了。</p><p>33：在文件中合并列</p><p>难度：中等</p><p>应用程序：bash</p><p>在文件中拆分列是非常简单的，合并它们稍微复杂一点。下面是一个简单的完成这项工作的脚本：</p><p>#!/bin/sh </p><p>length=<code>wc -l $1 | awk ’{print $1}’</code> </p><p>count=1 </p><p>[ -f $3 ] &amp;&amp; echo ”Optionally removing $3″ &amp;&amp; rm -i $3 </p><p>while [ “$count” -le “$length” ] ; do </p><p>a=<code>head -$count $1 | tail -1</code> </p><p>b=<code>head -$count $2 | tail -1</code> </p><p>echo ”$a$b” &gt;&gt; $3 </p><p>count=<code>expr $count + 1</code> </p><p>done </p><p>给这个脚本命名为merge.sh并且如下运行它：</p><p>chmod u+x merge.sh </p><p>现在，如果你想要合并file1和file2中的列到file3，下面是执行方法：</p><p>/path/to/merge.sh file1 file2 file3 </p><p>/path/to必须被你文件系统中的merge.sh位置所替代。</p><p>34：大小写敏感</p><p>难度：中等</p><p>应用程序：bash</p><p>有些时候，一个词在不同操作系统间没有任何区别，在Linux中，“Command”和“command”是不同的东西。当从Windows移动文件到Linux中时会造成一些麻烦。tr是一个小的shell功能，可以用于改变一堆文件。</p><p>#!/bin/sh </p><p>for i in <code>ls -1</code>; do </p><p>file1=<code>echo $i | tr [A-Z] [a-z]</code> </p><p>mv $i $file1 2&gt;/dev/null </p><p>done </p><p>通过执行这个，FILE1和fiLe2将被分别重命名为file1和file2.</p><p>35：Emacs中的宏指令</p><p>难度：中等</p><p>应用程序：Emacs</p><p>当编辑文件时，你通常会发现那些任务都是冗长和重复的，所以为了节约你的时间，你应该录制一个宏指令。在Emacs中，你将必须经历以下步骤：</p><p>1.按下 Ctrl+X 来开始一个记录。</p><p>2.插入所有你想要的按键和命令。</p><p>3.当你结束时按下Ctrl+X。</p><p>现在，你可以用以下命令来执行：</p><p>Ctrl -u <number> Ctrl -x e </number></p><p><number>是你想执行宏指令的次数。如果你输入的值为0，这个宏指令将被一直执行直到文件的结束。Ctrl -x e等同于Ctrl -u 1 Ctrl-x e。</number></p><p>36：简单的垃圾邮件清理</p><p>难度：中等</p><p>应用程序：KMail</p><p>垃圾邮件，或者不请自来的大批邮件，已经是个很普遍的问题，出于必要，现在几乎每个人都有某种形式的垃圾邮件保护。很多ISP包含垃圾邮件过滤，但是它并没有被设置的太过主动，而且通常很多都是简单的标记垃圾邮件，然后让它进来（ISP可不想因为丢失了你的邮件而被责备）。</p><p>所以，你在客户端上可能已经设置了反垃圾邮件的东西，要让它运行得更好，你可以写一些过滤器来移除被标记的垃圾邮件。标签是作为标题包含进来的。在KMail中，你可以只创建一个快速过滤器来将你的邮件装箱，或者干脆把它放到垃圾文件夹中。精确标题的使用将决定于你的ISP使用的软件，但是通常都是像SpamAssassin这样系统的类似X-Spam-Flag = YES。</p><p>在KMail中简单创建一个过滤器，选择Match Any of the Following（匹配下面的任何一个）然后输入标题细节和你需要的动作。应用过滤器到即将到来的邮件上，然后你的垃圾邮件的一半将不会再来打扰你了。</p><p>37：阅读OOo文档但不使用OOo</p><p>难度：中等</p><p>应用程序：OpenOffice.org（译注：一套跨平台办公室软件套件）</p><p>你曾经有没有过拿到一个OOo文档，但是没有OpenOffice.org来阅读？所以你就把它保存成普通的文本文件（.txt），但是被 StarOffice .sxw 格式所替代？这个文本文件可以得到拯救。首先，这个sxw文件是一个压缩文档，所以解压它：</p><p>unzip myfile.sxw </p><p>你想要的是名为’content.xml’的文件。不幸的是，它充满了xml的标签以至于非常难以辨认，所以要用一些Perl魔法将它们过滤出去：</p><p>cat content.xml | perl -p -e”s/&lt;[^&gt;]*&gt;/ /g;s/\n/ /g;s/ +/ /;” </p><p>这可能丢失了很多格式，但是至少现在它是可以阅读的。</p><p>38：搜索和执行</p><p>难度：中等</p><p>应用程序：find</p><p>find命令并不只是在寻找文件方面很有用，它在处理以下问题时也是非常有用的。这里有一个简短的例子。</p><p>假设我们有很多的压缩文件，现在我们想找到所有的压缩文件：</p><p>find . -name ’*.gz’ </p><p>将会定位出所有当前路径下的gzip文档。但是假设我们想要检查它们是否是有效文档，gunzip -vt选项将会帮我们实现这个，我们还可以机智地使用xargs结合这两个操作：</p><p>find . -name ’*.gz’ | xargs gunzip -vt </p><p>39：正确使用whois服务器</p><p>难度：中等</p><p>应用程序：whois</p><p>whois命令在追捕Internet上的恶棍以及给他们提供服务的ISP都是非常有用的。不幸的是，有很多whois服务器，如果你的反搜索一个域名，通常你不得不用一个指定的他们使用的TLD。然而，一些whois代理将自动转送你的查询到正确的服务器上。其中之一可以在<a href="http://whois.geektools.com/上获得。" target="_blank" rel="noopener">http://whois.geektools.com/上获得。</a></p><p>whois -h whois.geektools.complop.info </p><p>40：驱动挂载到哪里了？</p><p>难度：中等</p><p>应用程序：bash</p><p>人们常碰到的一个问题是，你刚接通电源时，就有太多的可挂载外设（USB驱动，flash内存卡，USB键驱动）消耗光了驱动？</p><p>实际上，所有的驱动都调用一个驱动——就像usb-storage，会在日志中存储很多有用的信息。尝试：</p><p>dmesg | grep SCSI </p><p>这将从dmesg输出过滤出指定的驱动规格。你可能发现一些这样的文本：</p><p>SCSI device sda: 125952 512-byte hdwr sectors (64 MB) </p><p>这个是说你的外设是在sda上。</p><p>41：自动执行USB装置</p><p>难度：高级</p><p>应用程序：hotplug脚本</p><p>当添加一个特殊的外设时想要运行一个指定的应用程序？USB hotplug后台进程可以帮你！当有USB装置添加到系统中时，这个服务就会得到通知。对于需要内核驱动的装置，hotplug后台进程将在/etc/hotplug/usb/下调用一个同名的脚本，例如，这里的一个名为usb-storage的脚本。你可以直接在这个脚本的后面添加你自己的命令（或者更好的是，在它的最后添加一行来让脚本在别的地方执行）。那么你就可以播放音乐，autosync文件（译注：影像文件），搜寻图片或者其他什么的。</p><p>对于不依赖于内核驱动的装置，有一个检查表，可以用来匹配USB产品和制造商ID。很多发行版已经设置好去做一些事情，但是你可以依据你的需要定制这些脚本。到<a href="http://jphoto.sourceforge.net/" target="_blank" rel="noopener">http://jphoto.sourceforge.net/</a> selected=sync去看一个我们能做什么的例子。</p><p>42：重命名和调整图片大小</p><p>难度：高级</p><p>应用程序：bash</p><p>很喜欢你的新相机但是不能容忍那个糟糕的名字？你也想要准备发布它们到网上吗？没问题，一个简单的bash脚本真是你所需要的：</p><p>#!/bin/sh </p><p>counter=1 </p><p>root=mypict </p><p>resolution=400×300 </p><p>for i in <code>ls -1 $1/*.jpg</code>; do </p><p>echo ”Now working on $i” </p><p>convert -resize $resolution $i ${root}_${counter}.jpg </p><p>counter=<code>expr $counter + 1</code> </p><p>done </p><p>保存这个脚本到一个名为picturename.sh的文件中，然后用一下命令执行它：</p><p>chmod u+x picturename.sh </p><p>然后在你的某个路径下存储它。现在，如果你在directory /path/to/pictdir下有一堆.jpg文件，所有你需要做的就是执行这个：</p><p>picturename.sh /path/to/pictdir </p><p>而在当前的目录下你会发现 mypict_1.jpg, mypict_2.jpg之类的，它们是你初始图片调整大小后的版本。你可以根据你的需要改变脚本，或者，你只是期待一个超级简单的图片大小调整，试着看看mogrify命令和它的-geometry参数。</p><p>43：安全登出</p><p>难度：简单</p><p>应用程序：bash</p><p>当你在一台共享机器上使用一个控制台，或者甚至只是在你自己的桌面使用控制台，都可能会发现当你登出时，屏幕仍然会显示谁已经登入正在做什么的痕迹。大多数发行版本将会清屏，但是有些不会。你可以通过编辑你的 ~/.bash_logout文件然后增加这个命令来解决问题：</p><p>clear </p><p>你也可以添加任何其他的有用命令在这里。</p><p>44：传输文件但不使用ftp或者scp</p><p>难度：简单</p><p>应用程序：netcat</p><p>需要传输一个目录给其他服务器但是没有FTP或者SCP使用权？那么这个小技巧将会帮助你使用netcat功能。在目的服务器上运行：</p><p>nc -l -p 1234 | uncompress -c | tar xvfp - </p><p>并且在发送服务器上运行：</p><p>tar cfp - /some/dir | compress -c | nc -w 3 [destination] 1234 </p><p>现在你就可以不需要FTP并且不需要root权限，就能传送文件了。</p><p>45：备份一个Debian包清单</p><p>难度：简单</p><p>应用程序：Debian</p><p>如果你正在运行Debian并且找不到你正在运行的包，为你当前正在安装的包做一个备份是非常有用的。你可以运行如下得到一个清单：</p><p>dpkg –get-selections &gt; debianlist.txt </p><p>这将把全部的清单放到debianlist.txt中，这样你就可以通过如下代码在不同的计算机上安装相同的包。</p><p>dpkg –set-selections &lt; debianlist.txt </p><p>当你复制你的系统到一个新的计算机上时，你要记住你还需要从/etc中复制配置文件。</p><p>要实际安装这些选项，使用如下指令：</p><p>apt-get -u dselect-upgrade </p><p>46：强化ssh</p><p>难度：简单</p><p>应用程序：ssh</p><p>尽管SSH是一个非常安全的连接服务器的方式，这里还有两个简单的改变，可以让你进一步增强它的安全性。首先，你当然不希望别人直接以root用户登入——他们应该以普通用户登陆，然后使用su命令来转换。你可以在/etc/ssh/ssh_config 文件中通过添加如下代码改变这个件事：</p><p>PermitRootLoginno </p><p>现在唯一能得到root特权的方式是通过su，这意味着入侵者现在需要破解两个密码来得到全部的使用权。当你编辑这个文件时，找到这样一行：</p><p>Protocol 2, 1 </p><p>然后把它改为如下：</p><p>Protocol 2 </p><p>这将消除最初的SSH协议中的撤销选项，现在被认为是非常易于攻击的。</p><p>47：停止回应ping</p><p>难度：简单</p><p>应用程序：sysctl</p><p>ping在找出网络拓扑结构时是非常有用的命令，缺点是它只能做这件事，而且会使得网络上的黑客们更容易瞄准现场服务器。但是你可以告诉Linux忽略所有的ping服务器将不会回应。这里有很多的方法来实现它，但是最好的是使用sysctl。关掉ping回应：</p><p>sysctl -w net.ipv4.icmp_echo_ignore_all=1 </p><p>想要打开它，使用：</p><p>sysctl -w net.ipv4.icmp_echo_ignore_all=0 </p><p>关掉ping对你来说是非常严重的，看看接下来的技巧。</p><p>48：降低ping速率</p><p>难度：简单</p><p>应用程序：sysctl</p><p>可能你想要保持服务器回复ping的功能，但是又想从被熟知的“ping flood”（封包洪流）的攻击中保护自己。那么你要如何完成这一壮举呢？最简单的方法是降低回应ping服务器的速率。它们仍然是有效的，但不会使服务器过载。</p><p>sysctl -w net.ipv4.icmp_echoreply_rate=10 </p><p>当回复被当作一个信号地址发送时，这将会降低速率。</p><p>49：当登出的时候清理KDE</p><p>难度：简单</p><p>应用程序：bash</p><p>在Windows中有很多程序会做一些清除网络缓存，移除临时文件事情。Linux上如果也可以这样是不是很cool呢？使用KDE，你甚至不需要安装任何新的软件，startkde脚本将会自动的执行你放在特殊地方的脚本。</p><p>首先，你需要在你的.kde目录下创建一个命令shutdown的目录：</p><p>mkdir /home/username/.kde/shutdown </p><p>现在创建一个脚本，用来在关机时执行一些你想要的事情。这里是一个例子：</p><p>#!/bin/bash </p><p>#clear up temp folder </p><p>rm -rf ~/tmp/* </p><p>#clear out caches </p><p>rm -rf ~/.ee/minis/* </p><p>rm -rf ~/.kde/share/cache/http/* </p><h1 id="delete-konqueror-form-completions"><a href="#delete-konqueror-form-completions" class="headerlink" title="delete konqueror form completions"></a>delete konqueror form completions</h1><p>rm ~/.kde/share/apps/khtml/formcompletions </p><p>现在确保你设置了正确的权限：</p><p>chmod ug+x ~/.kde/shutdown/cleanup.sh </p><p>（或者随便你叫它什么）。可以清除敏感文件，也可以通过将脚本放在你的默认KDE文件夹中有一个名为shutdown的子文件夹里，给所有用户一个全局的关机脚本。找出你的默认KDE目录在哪里，试一下：</p><p>kde-config –path exe </p><p>50：无密码的ssh</p><p>难度：中等</p><p>应用程序：ssh</p><p>厌烦了每次登陆你的服务器时都要输入密码？ssh也支持密钥，所以当你登陆桌面时你只能输入你的密码。在你的桌面机器上生成一个密钥对：</p><p>ssh-keygen -t dsa -C your.email@ddress </p><p>为你的密钥输入一个口令。这会将密钥放到 ~/.ssh/id_dsa and the public key in ~/.ssh/id_dsa.pub中。现在看看你是否有了一个正在运行的ssh-agent。</p><p>echo $SSH_AGENT_PID </p><p>如果安装了ssh-agent，大部分窗口管理器都会自动运行它。如果没有安装，开启一个：</p><p>eval $(ssh-agent) </p><p>现在，告诉这个代理你的密钥：</p><p>ssh-add </p><p>然后输入你的口令。你需要在每次登陆时都输入口令，如果你是使用X，尝试添加：</p><p>SSH_ASKPASS=ssh-askpass ssh-add </p><p>到你的.xsession文件。（你可能需要安装ssh-askpass）现在为每个你需要登入的服务器都创建这个目录 ~/.ssh，然后复制这个文件~/.ssh/id_dsa.pub into it as ~/.ssh/authorized_keys 。如果你是手动开启ssh-agent，当你登出时，使用如下代码终止它：</p><p>ssh-agent -k </p><p>51：通过ssh使用rsync</p><p>难度：中等</p><p>应用程序：Shell</p><p>rsync使大型目录结构保持同步。通过SSH使用tar远程复制一个文件系统的一部分是非常理想的，sync甚至更适合保持两台机器之间的文件系统的同步。为了使用SSH运行一个rsyns，传递给它一个-e转换：</p><p>rsync -ave ssh greendome:/home/ftp/pub/ /home/ftp/pub/ </p><p>注意从源端（在greendome上）来的文件说明后面的 / ，在源说明中，一个尾部的 / 告诉rsync这个目录的内容，但不是目录本身。为了将目录放入正在复制的内容的最高等级丢掉这个 /：</p><p>rsync -ave ssh bcnu:/home/six . </p><p>这将在 ~/six/目录下保持一个与bcnu:/home/six/上的任何东西同步的复制品。rsync默认只拷贝文件和目录，但是当源端移除了文件时并不会在目的端移除它们的拷贝。为了保持复制的精确性，包含–delete这个标志：</p><p>rsync -ave ssh–delete greendome:~one/reports . </p><p>现在当老的报表从greendome上的~one/reports/中移除了，在同步版本中，每次这个命令运行时，它们也将会从~six/public_html/reports/中移除。如果你在corn中像这样运行一条命令，记得丢掉v。这将会使输出稳定（除非rsync在运行中出现问题，在这种情况下你将会收到一封有错误输出的邮件）。使用SSH作为你的rsync运输方式，这样做的好处是使数据在网络传输过程中加密，并可以方便使用任何你已经用SSH客户端密钥建立的信任关系。</p><p>52：资源扫描</p><p>难度：中等</p><p>应用程序：nmap</p><p>例如，简单的TCP连接扫描可以在不需要root特权时进行：</p><p>一般来说，当人们想到nmap时，都假设nmap是用来进行一些违法的网络侦查，并为恶意攻击做准备的。但是作为一个强大的工具，nmap可以成为一个白帽子，做一些比入侵网络有意义得多的事。</p><p>nmap rigel </p><p>nmap也可以通过指定范围或者CIDR符号来扫描IP地址：</p><p>nmap 192.168.0.1-254 </p><p>nmap 192.168.0.0/24 </p><p>nmap如果以root身份运行，可以提供更多的信息。当它以root身份运行时，通过使用-O标志，它可以使用特殊的数据包来决定远程机器的操作系统。此外，你可以通过使用-sS标志来实现半开的TCP扫描。nmap将会发送一个SYN数据包到远程的主机，然后等待接收它回应的ACK。如果nmap收到一个ACK，它就知道这个端口是开放的。</p><p>这不同于普通的TCP三次握手，客户端会发送一个SYN包，如果它收到了初始的服务器ACK，客户端随后会将一个ACK送回服务器。攻击者们时常使用这个选项来避免使他们的扫描登陆到远程机器上。</p><p>nmap -sS -O rigel  </p><p>Starting nmap V. 3.00 ( <a href="http://www.insecure.org/nmap/" target="_blank" rel="noopener">www.insecure.org/nmap/</a> )  </p><p>Interesting ports on rigel.nnc (192.168.0.61):  </p><p>(The 1578 ports scanned but not shown below are in state: filtered)  </p><p>Port State Service  </p><p>7/tcpopen echo  </p><p>9/tcpopen discard  </p><p>13/tcp open daytime  </p><p>19/tcp open chargen  </p><p>21/tcp open ftp  </p><p>23/tcp open telnet  </p><p>25/tcp open smtp  </p><p>37/tcp open time  </p><p>79/tcp open finger  </p><p>111/tcpopen sunrpc  </p><p>512/tcpopen exec  </p><p>513/tcpopen login  </p><p>514/tcpopen shell  </p><p>587/tcpopen submission  </p><p>7100/tcp open font-service  </p><p>32771/tcpopen sometimes-rpc5  </p><p>32772/tcpopen sometimes-rpc7  </p><p>32773/tcpopen sometimes-rpc9  </p><p>32774/tcpopen sometimes-rpc11  </p><p>32777/tcpopen sometimes-rpc17  </p><p>Remote operating system guess: Solaris 9 Beta through Release on SPARC  </p><p>Uptime 44.051 days (since Sat Nov1 16:41:50 2003)  </p><p>Nmap run completed – 1 IP address (1 host up) scanned in 166 seconds  </p><p>伴随着OS探测的激活，nmap可以确认OS是Solaris，但是现在你还可以知道，它可能是运行在SPARC处理器上的Version 9。</p><p>一个强大的功能是可以被用于和你的nmap的XML输出性能保持联系。使用-oX命令行转换而激活，就像这样：</p><p>nmap -sS -O -oX scandata.xml rigel </p><p>这在扫描IP地址范围或者你全部的网络时是特别有用的，你可以将所有通过扫描收集起来的信息放到一个XML文件里，并经过解析后插入到数据库中。这里是一个开放的端口的XML入口：</p><port protocol="“tcp”" portid="“22″"><br><br><state state="“open”"><br><br><service name="“ssh”" method="“table”" conf="“3″"><br><br></service></state></port> <p>nmap是一个强大的工具。通过使用它的XML输出性能，一点点的脚本，还有一个数据库，你可以创造一个更强大的可以在你的网络上监测未授权的服务和机器的工具。</p><p>53：备份你的bootsector(引导扇区)</p><p>难度：高级</p><p>应用程序：Shell</p><p>妨碍引导装入，双启动和很多其他下热闹的程序会留给你一个混乱的引导扇区。为什么不在你可以备份的时候给它创建一个备份呢：</p><p>引导装载器混乱、双启动及许多其他的可怕的进程可能造成乱七八糟的启动区。</p><p>dd if=/dev/hda of=bootsector.img bs=512 count=1 </p><p>很显然，你应该改变这个装置来显示你的boot驱动（有可能是SCSI的sda）。还要非常小心，别把事情搞砸——你可能会轻而易举地毁掉你的驱动！恢复时使用：</p><p>dd if=bootsector.img of=/dev/hda </p><p>54：保护日志文件</p><p>难度：高级</p><p>应用程序：很多</p><p>在一个入侵过程中，一个入侵者将会很可能在很多系统日志中留下能反映他行为的迹象：一个有价值的审计追踪应该被保护。没有可靠的日志，就很难发现攻击者是如何侵入，或者是从哪里来的攻击。这个信息在分析事件、联系相关方面并给予反馈上，是很关键的。但是，如果入侵成功，什么才能阻止他来移除他的这些错误行为的痕迹呢？</p><p>这就是文件属性能发挥作用、挽回败局的地方（或者至少使事情没那么糟）。Linux和BSD都有给文件和目录分配额外的属性这个功能。这不同于标准的Unix权限方案中，系统为所有的用户提供的普遍的属性设置，而且它们比文件权限或者ACL都要更深层次影响文件访问。</p><p>在Linux中，你可以看到并且通过lsattr和chattr命令分别修改一个给出文件的设置。在写这篇文章时，Linux的文件属性只能在你使用ext2和ext3时获得。这还有些XFS和ReiserFS的关于获得属性支持的内核补丁。一个保护日志文件的有用的属性是append-only。当这个属性被设置后，文件不能被删除，而且写操作只能被允许在文件的最后追加。</p><p>在Linux下要设置append-only标志，运行这条命令：</p><p>chattr +afilename </p><p>看看+a属性是如何工作的：创建一个文件然后设置它的append-only属性：</p><p>touch /var/log/logfile </p><p>echo ”append-only not set” &gt; /var/log/logfile </p><p>chattr +a /var/log/logfile </p><p>echo ”append-only set” &gt; /var/log/logfile </p><p>bash: /var/log/logfile: Operation not permitted </p><p>企图第二次写文件失败，因为它将覆盖这个文件。然而，在文件的末尾追加仍然是被允许的：</p><p>echo ”appending to file” &gt;&gt; /var/log/logfile  </p><p>cat /var/log/logfile  </p><p>append-only not set  </p><p>appending to file  </p><p>显而易见，一个获得root特权的侵入者能意识到使用了文件属性，并且可以通过运行chattr -a来移除append-only标志。为了防止这种情况，我们需要禁用移除append-only属性的性能，在Linux下使用功能机制完成这个。</p><p>Linux功能模型分割特权给全能的root账户，并且允许你有选择的禁用它们。为了防止一个用户移除一个文件的append-only属性，我们需要移除CAP_LINUX_IMMUTABLE功能。当体现在当前运行系统中时，这个功能允许append-only属性被修改。为了当前系统中获得修改这个功能的设置，我们将简单有效地调用lcap(<a href="http://packetstormsecurity.org/linux/admin/lcap-0.0.3.tar.bz2)" target="_blank" rel="noopener">http://packetstormsecurity.org/linux/admin/lcap-0.0.3.tar.bz2)</a>.</p><p>为了解压和编译这个工具，运行这条命令：</p><p>tar xvfj lcap-0.0.3.tar.bz2 &amp;&amp; cd lcap-0.0.3 &amp;&amp; make </p><p>然后，不允许修改append-only标志，运行：</p><p>./lcap CAP_LINUX_IMMUTABLE </p><p>./lcap CAP_SYS_RAWIO </p><p>第一条命令移除了改变append-only标志的功能，然后第二条移除了原始I/O的功能。这是很有必要的，因为这样就能保护文件不被访问块设备时驻留在其上的东西修改。这阻止了访问/dev/mem和/dev/kmem，有可能给入侵者提供恢复CAP_LINUX_IMMUTABLE功能的漏洞。为了在boot上移除这项功能，添加之前的两条命令到你的系统启动脚本中（例如/etc/rc.local）。你应该确保这个功能在boot命令中被移除了，防止其他启动脚本出问题。一旦lcap移除了内核功能，就只能通过重启系统来恢复了。</p><p>在做这些之前，你应该明白，给你的日志文件添加append-only标志，将会造成日志循环脚本失败。然而，做这件事将会极大的提升你的审计追踪的安全性。安全性的提升在突发事件中会被证明是很有用的。</p><p>55：自动加密连接</p><p>难度：高级</p><p>应用程序：FreeS/WAN</p><p>一个FreeS/WAN支持的特别cool的功能是，当其他主机运行FreeS/WAN时随机加密。这允许FreeS/WAN在所有支持随机加密的主机间透明传输。为了这个，每台主机必须使用FreeS/WAN生成一个公钥，这个公钥可以存储于那台主机的一个DNS TXT记录中。当一台主机要与另一个主机建立一个随机加密，希望初始化一个加密连接时，将会通过DNS查询这台主机的公钥并且初始化这个连接。</p><p>一开始，你想使用这个功能时，需要为每一台主机生成一个公钥。你可以通过运行如下命令来实现它：</p><p>ipsec newhostkey –output /tmp/<code>hostname</code>.key </p><p>现在你需要添加通过那条命令创建的文件的内容到/etc/ipsec.secrets中。</p><p>cat /tmp/<code>hostname</code>.key &gt;&gt; /etc/ipsec.secrets </p><p>然后，你需要生成一个TXT记录来存放你的DNS区域。你可以通过运行如下命令来实现它：</p><p>ipsec showhostkey –txt @colossus.nnc </p><p>现在添加这条记录到你的空间然后重载它。你会证实DNS已经通过这条命令正确的运行了：</p><p>ipsec verify </p><p>Checking your system to see if IPsec got installed and started correctly </p><p>Version check and ipsec on-path[OK] </p><p>Checking for KLIPS support in kernel [OK] </p><p>Checking for RSA private key (/etc/ipsec.secrets) [OK] </p><p>Checking that pluto is running [OK] </p><p>DNS checks. </p><p>Looking for TXT in forward map: colossus [OK] </p><p>Does the machine have at least one non-private address [OK] </p><p>现在只需要重启FreeS/WAN-你现在应该能连接到任何支持随机加密的主机上了。但是如果其他的主机想要连接你该怎么办？要授权连接，你需要在你的DNS反向查找区域为你的机器创建一个TXT记录。</p><p>你可以通过运行一个简单的命令来生成一条记录：</p><p>ipsec showhostkey –txt 192.168.0.64 </p><p>为你的子网添加这条记录到反向查找区域，然后其他的机器就可以和你的机器初始化随机加密了。伴随着随机加密的使用，所有主机间的传输将被自动加密，同时保护所有的服务。</p><p>56：消除二进制suid</p><p>难度：中等</p><p>应用程序：find</p><p>如果你的服务器有比你自身多的shell用户，你应该在你的系统上定期的审核setuid和setgid的二进制文件。可能你会惊讶你找到了那么多文件。这里有一个搜寻所有setuid或者setgid的文件的命令位设置：</p><p>find / -perm +6000 -type f -exec ls -ld {} \; &gt; setuid.txt &amp; </p><p>这将会创建一个名为setuid.txt的文件，包含了所有当前系统上匹配的文件的细节。要移除任何你不用的工具的s位，输入：</p><p>chmod a-s program  </p><p>57：Mac过滤Host AP</p><p>难度：高级</p><p>应用程序：iwpriv</p><p>你可以在链路层使用iptables或者ebtables执行MAC过滤，那比让Host AP为你做这些更安全。这不仅仅是阻碍指向你的网络传输，也是预防邪恶的人关联你的站。这能帮助组织某些人给你的其他无线客户端造成麻烦的可能，即使他们没有更多的网络通道。</p><p>当使用MAC过滤时，很多人会列出一个他们希望允许的无线装置清单，然后拒绝所有其他的。使用iwpriv命令完成这个功能：</p><p>iwpriv wlan0 addmac 00:30:65:23:17:05 </p><p>iwpriv wlan0 addmac 00:40:96:aa:99:fd </p><p>… </p><p>iwpriv wlan0 maccmd 1 </p><p>iwpriv wlan0 maccmd 4 </p><p>addmac指示添加一个MAC地址到内部表。只要你喜欢你就可以通过执行更多的addmac命令添加更多的MAC地址到表中。然后你需要告诉Host AP对你已经建好的表做什么。maccmd 1命令告诉Host AP就像使用一个“允许”清单一样使用这个表，并且拒绝所有其他的MAC地址来关联。最终，maccmd 4命令去除掉所有的关联客户端，强制使它们重新关联。对表中的客户端来说是自动发生的，但是其他的任何企图关联的客户端都是被拒绝的。</p><p>有时，你只需要禁止一个或者两个捣蛋鬼，而不是设置一个详细的被允许的硬件规则。如果你需要禁止两三个MAC地址而允许其他所有的地址，尝试这个：</p><p>iwpriv wlan0 addmac 00:30:65:fa:ca:de </p><p>iwpriv wlan0 maccmd 2 </p><p>iwpriv wlan0 kickmac 00:30:65:fa:ca:de </p><p>像以前一样，你可以不限次数的使用addmac，只要你乐意。Maccmd2命令会将规则设置为“拒绝”，而如果该MAC恰巧已经关联，kickmac会立刻将特定的MACboot。这也许比只为了禁止一个捣蛋鬼而消除所有关联然后让他们重新邻接要好一些。顺便说一下，如果你想要消除所有的MAC过滤，尝试maccmd 0。</p><p>如果你错误的输入了一个MAC地址，你可以像使用addmac一样使用delmac命令，然后它（可以预见）就会从表中删掉这个给出的MAC地址。你有时会需要完全清除当前的MAC表但是保留它当前的规则，使用这条命令：</p><p>iwpriv wlan0 maccmd 3 </p><p>最后，你可以通过使用/proc浏览正在运行的MAC表：</p><p>cat /proc/net/hostap/wlan0/ap_control </p><p>iwpriv程序操纵正在运行的Host AP驱动，但是重启后不保留设置。一旦你对你的MAC过滤表感到满意，请确保你在一个rc脚本中添加了相关命令在启动时间运行。</p><p>注意，未关联的客户端仍然可以监听网络传输，所以MAC过滤实际上只能预防一点点窃取。为了与被动的监听技巧搏斗，你需要加密你的数据。</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux,geek </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解读redis配置文件</title>
      <link href="/2018/01/01/%E8%A7%A3%E8%AF%BBredis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <content type="html"><![CDATA[<p>摘要:<br><a id="more"></a><br>正文:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"># 绑定端口。只接受来自这个IP的请求。如果不设置，将接受所有请求。可以配置多个地址</span><br><span class="line">bind <span class="number">127.0</span>.0.1</span><br><span class="line"># 保护模式。默认开启。当没有绑定IP并且没有设置密码的时候，保护模式起作用，只接受本地地址的请求。</span><br><span class="line"><span class="keyword">protected</span>-mode yes</span><br><span class="line"># 监听端口，默认是6379，TCP连接</span><br><span class="line">port <span class="number">6379</span></span><br><span class="line"># 高并发环境话，对连接的优化参数。并受linux系统内核的影响，需要同时修改内核参数以互相适应</span><br><span class="line">tcp-backlog <span class="number">511</span></span><br><span class="line"># 超时时间，单位为秒，客户端超时时间内没有发出任何命令，关闭该连接。0表示禁用该设置。</span><br><span class="line">timeout <span class="number">0</span></span><br><span class="line"># 连接保持确定时间。如果确定断开连接需要双倍的时间。有的内核也会影响这个参数。</span><br><span class="line"># 据说合理值是300秒。这个选项从redis 3.2.1开始设置。</span><br><span class="line">tcp-keepalive <span class="number">300</span></span><br><span class="line"># 默认情况下，redis不是后台运行的，如果需要后台运行，需要把该项设置为yes</span><br><span class="line">daemonize no</span><br><span class="line"># 定义是upstart还是systemd接管redis进程</span><br><span class="line">supervised no</span><br><span class="line"># 配置后台运行时，redis会生成pid文件，如果不进行配置，默认放置在/var/run/redis.pid下。运行多个redis服务时，需要指定不同的pid文件和端口</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"># 配置记录log的等级。分为四个等级，debug\verbose\notice\warining</span><br><span class="line">loglevel notice</span><br><span class="line"># 配置log文件地址，设置为空时，将日志打印在屏幕上。如果设置为空且设置了后台运行，则将日志发送至/dev/null</span><br><span class="line">logfile <span class="string">""</span></span><br><span class="line"># 设置数据库个数。使用命令“SELECT &lt;dbid&gt;”切换数据库，默认数据库是DB 0</span><br><span class="line">databases <span class="number">16</span></span><br><span class="line"># 设置保存频率，条目格式为：save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line"># 默认配置的含义是这样的：</span><br><span class="line">#900秒内有一个key发生了变化就进行保存</span><br><span class="line">#300秒内有10个key发生了变化就进行保存</span><br><span class="line">#60秒内有10000个key发生了变化就进行保存</span><br><span class="line"># 只要符合以上条件就进行保存</span><br><span class="line">save <span class="number">900</span> <span class="number">1</span></span><br><span class="line">save <span class="number">300</span> <span class="number">10</span></span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span></span><br><span class="line"># 后台保存至磁盘发生错误时禁止再对redis进行写操作，否则会产生影响。</span><br><span class="line"># 如果后台保存又恢复正常，redis会自动的允许写操作</span><br><span class="line"># 如果有自己的监控，可以关闭这个选项，以达到更好的交互性</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"># 进行备份时，是否进行压缩</span><br><span class="line">rdbcompression yes</span><br><span class="line"># 是否进行检查校验码</span><br><span class="line">rdbchecksum yes</span><br><span class="line"># 备份文件的镜像名</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"># redis的工作目录。redis会把备份文件也放入到这个工作目录</span><br><span class="line">dir ./</span><br><span class="line"># 设置该数据库为其它数据库的从数据库，默认不启用</span><br><span class="line"># slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"># 如果连接主数据库时需要密码验证，这里指定密码。默认不启用。</span><br><span class="line"># masterauth &lt;master-password&gt;</span><br><span class="line"># 设置从数据库对客户端写入的处理方式。</span><br><span class="line"># 如果设置为“yes”未完全同步的时候也可以提供客户端连接并操作</span><br><span class="line"># 如果设置为“no”时，则只返回错误，除了IINFO和SLAVEOF</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"># 从数据库是否是只读属性。</span><br><span class="line">slave-read-only yes</span><br><span class="line"># 是否启用无磁盘复制，即直接通过网络进行复制。这个功能目前还在实验阶段</span><br><span class="line">repl-diskless-sync no</span><br><span class="line"># 启用无磁盘复制时，配置传输开始的延时时间</span><br><span class="line">repl-diskless-sync-delay <span class="number">5</span></span><br><span class="line">#在slave和master同步后（发送psync/sync），后续的同步是否设置成TCP_NODELAY。如果设置成yes，则redis会合并小TCP包节省带宽，但会增加延迟。如果设置成no，则redis master会立即发送同步数据，延迟减小，但会增加带宽占用。</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"># 从数据库的优先级，数字越小优先级越高。如果主数据库不工作，数字最小的从数据库接替为主数据库。但是数字0代表不会成为主数据库。</span><br><span class="line">slave-priority <span class="number">100</span></span><br><span class="line"># 设置密码。客户端连接后进行操作之前需要使用“AUTH &lt;PASSWORD&gt;”进行验证之后再进行操作。</span><br><span class="line">#因为redis速度非常快，所以一个外部用户可以一秒钟进行150K次的密码尝试，这意味着如果你对外发布你的redis服务器，你需要一个强壮的密码防止暴力破解。</span><br><span class="line"># requirepass foobared</span><br><span class="line">#重命名某个比较敏感的命令，使这个命令不能被外部命令利用，如CONFIG。</span><br><span class="line">#但是这个配置不适合普通用户并且可能会引起从数据库传输等的一些问题。</span><br><span class="line"># rename-command CONFIG ""</span><br><span class="line"># 限制同时连接的客户端数量。超过数量将不再接受新的请求并返回错误信息。</span><br><span class="line"># maxclients 10000</span><br><span class="line"># 设置redis能够使用的最大内存。当内存满了的时候，根据maxmemory-policy进行删除key，当无法再删除时，返回错误信息。</span><br><span class="line"># maxmemory &lt;bytes&gt;</span><br><span class="line"># 内存删除规则。默认是noeviction方式</span><br><span class="line"># maxmemory-policy noeviction</span><br><span class="line"># 默认情况下，后台异步的把数据备份到磁盘，但是这个备份十分耗时切不能很频繁，如果发生意外，则会丢失一段时间的数据。如果开启append only模式，redis会把接收到的每一次写操作都追加到appendonly.aof中。</span><br><span class="line">appendonly no</span><br><span class="line"># append only文件的名字，默认为appendonly.aof</span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"># 设置对append only文件进行同步的频率。always表示每次有写操作都进行同步，everysec表示对写操作进行累积，每秒同步一次。</span><br><span class="line"># 设置在rewrite的时候是否对新的写操作进行fsync。no表示进行fsync</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"># 当append only文件增长了这个比例（这里是增加了一倍），则后台rewrite自动运行</span><br><span class="line">auto-aof-rewrite-percentage <span class="number">100</span></span><br><span class="line"># 进行后面rewrite要求的最小AOF文件大小。这两个选项共同决定了后面rewrite进程是否到达运行的时机</span><br><span class="line">auto-aof-rewrite-min-size <span class="number">64</span>mb</span><br><span class="line"># 当aof文件被损坏时,redis将返回错误并退出</span><br><span class="line">aof-load-truncated yes</span><br><span class="line"># LUA scripts最大执行时间,单位(毫秒),超出后返回查询错误并写日志</span><br><span class="line">lua-time-limit <span class="number">5000</span></span><br><span class="line"># 开启redis集群</span><br><span class="line"># cluster-enabled yes</span><br><span class="line"># 集群节点配置文件名。不主动手动修改，但是需要确保每一个节点配置文件名不同。</span><br><span class="line"># cluster-config-file nodes-6379.conf</span><br><span class="line"># 节点连接超时时间</span><br><span class="line"># cluster-node-timeout 15000</span><br><span class="line"># 主从数据库无法建立联系的时间倍数</span><br><span class="line">cluster-slave-validity-factor <span class="number">10</span></span><br><span class="line"># 主数据库需要保留最少从服务器个数。这时其它从服务器能够灾备迁移到其它主服务器，否则不允许进行迁移。</span><br><span class="line">cluster-migration-barrier <span class="number">1</span></span><br><span class="line"># 集群是否需要全量覆盖</span><br><span class="line"># cluster-require-full-coverage yes</span><br><span class="line"># 执行超过多少毫秒的会被记录在慢日志上</span><br><span class="line">slowlog-log-slower-than <span class="number">10000</span></span><br><span class="line"># 设置保存多少条慢日志</span><br><span class="line">slowlog-max-len <span class="number">128</span></span><br><span class="line"># 延时监控</span><br><span class="line">latency-monitor-threshold <span class="number">0</span></span><br><span class="line"># 键空间通知，为空关闭功能</span><br><span class="line">notify-keyspace-events <span class="string">""</span></span><br><span class="line"># hash对象开始存储的时候使用ziplist进行存储</span><br><span class="line"># 只有达到一定的范围时</span><br><span class="line">hash-max-ziplist-entries <span class="number">512</span></span><br><span class="line">hash-max-ziplist-value <span class="number">64</span></span><br><span class="line"># 列表编码方式</span><br><span class="line">list-max-ziplist-size -<span class="number">2</span></span><br><span class="line"># 列表压缩方式，0代表不进行压缩</span><br><span class="line">list-compress-depth <span class="number">0</span></span><br><span class="line"># 集合的特殊编码形式</span><br><span class="line">set-max-intset-entries <span class="number">512</span></span><br><span class="line"># 有序集合设置</span><br><span class="line">zset-max-ziplist-entries <span class="number">128</span></span><br><span class="line">zset-max-ziplist-value <span class="number">64</span></span><br><span class="line"># 开启后，每100毫秒有1毫秒对hash表进行重新hash</span><br><span class="line">activerehashing yes</span><br><span class="line"># 客户端缓冲区限制</span><br><span class="line">client-output-buffer-limit normal <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">client-output-buffer-limit slave <span class="number">256</span>mb <span class="number">64</span>mb <span class="number">60</span></span><br><span class="line">client-output-buffer-limit pubsub <span class="number">32</span>mb <span class="number">8</span>mb <span class="number">60</span></span><br><span class="line"># 设置redis程序命令执行频率</span><br><span class="line">hz <span class="number">10</span></span><br><span class="line"># rewrite过程中,每32M数据进行一次文件同步,这样可以减少"aof大文件"写入对磁盘的操作次数</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 非关系型数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo工作原理</title>
      <link href="/2017/12/31/hexo%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <content type="html"><![CDATA[<p>摘要:<br>转载自:<a href="http://coderunthings.com/2017/08/20/howhexoworks/" target="_blank" rel="noopener">http://coderunthings.com/2017/08/20/howhexoworks/</a><br><a id="more"></a><br>正文:<br><img src="http://coderunthings.com/images/howhexoworks/hexo_logo.png" alt=""><br> 你可能用过hexo(或者jekyll)来搭建自己的博客网站。通常我们在安装、配置完成hexo之后，借助hexo，一般通过以下步骤，就可以完成一篇博客的编写及发布，真是方便极了：</p><p><table><tr><td bgcolor="#F0F8FF"><br>$ hexo init           // 创建一个新的hexo项目<br>$ hexo new mynewblog  // 新建一篇标题为mynewblog的文章<br>$ hexo server         // 为hexo在本地起一个http server, 然后通过浏览器访问博客<br>$ hexo generate       // 生成将要发布的博客网站包含html在内的静态资源<br>$ hexo deploy         // 将generate的结果发布到_config.yml中指定的仓库<br></td></tr></table><br>可是，从hexo init到hexo deploy中间发生了什么呢？为了搞清楚这一过程、理解hexo的工作原理，本文将试着回答以下问题:<br>命令行中的hexo是什么<br>hexo是怎么将我们写好的markdown转换成html的<br>hexo插件是如何工作的<br>本地的hexo项目和git page有什么关系<br>本文不是:</p><p>hexo的安装、使用教程<br>git page的使用教程<br>命令行中的hexo是什么?</p><p>hexo项目在github上已经有超过17k的star了，但是你知道吗，日常我们在命令行”操作”hexo时所输入的hexo(例如hexo init)并不是这个17k个star的项目! 是的，我们在命令行中所输入的”hexo”实际是hexo-cli项目，该项目在github上的star还不足50个。</p><p><table><tr><td bgcolor="#F0F8FF"><br>hexo可以粗略分为三个子项目，分别是:<br>hexo-cli<br>hexo (下文中用hexo core来指代)<br>hexo plugins<br>其中hexo plugins不是指某一个单独的项目，而是泛指所有的hexo plugin项目。<br>请看下图:</td></tr></table></p><p><img src="http://coderunthings.com/images/howhexoworks/hexo_projects.png" alt=""><br>让我们结合这张图来大致看看这三个项目的作用(下面的链接均是指向Github中相关的源码):<br>hexo-cli: hexo命令行项目，作用是:<br>启动hexo命令(进程)，及其参数解析机制。每次我们输入’hexo xxx’命令后，都会通过node调用hexo-cli中的entry函数(比如，可以把’hexo init’视为’node hexo-cli/entry.js init’)<br>实现hexo命令的三个初始参数(功能): init / version / help<br>加载hexo核心模块，并初始化<br>hexo core: hexo核心，他的主要作用如下:<br>实现了hexo功能扩展对象<br>实现了hexo核心功能, 如new, publish, generate等（其实是一些hexo插件，下文中会详细分析）<br>hexo plugins: 指一些能够扩展hexo的插件。插件可以按功能分成两类:<br>扩展hexo命令的参数，如hexo-server(安装这个插件以后才能使用hexo server命令)<br>扩展hexo解析文件的”能力”，如增加jade模版解析功能的hexo-render-jade插件<br><br>从markdown到html的旅程</p><p>简单来说，hexo中，从markdown到html的generate过程中做了两件事：</p><p>模板渲染<br>模板渲染<br>是的，就是这样，就是两次模板渲染。只不过两次渲染的输入、渲染模板的引擎、输出不一样。此处应该有一个表格：<br><img src="http://coderunthings.com/images/howhexoworks/render.png" alt=""><br>还得有一张图:<br><img src="http://coderunthings.com/images/howhexoworks/post.png" alt=""> </p><p><table><tr><td bgcolor="#F0F8FF"><br>对上面表格和图的说明:<br>hexo core在generate的过程中会产生一个对象，我们在这里把这个对象称为article。第一次渲染的主要目的就是给这个对象添加title,content等属性。其中:<br>article.title, article.date, article.tags, article.categories等属性来自yml front的部分<br>article.content是markdown文章解析后的html片段<br>hexo项目目录下包含三个子目录，<br>source目录，写博客的主要工作目录。这个目录下存放的是我们的markdown文章以及js, images, css<br>themes目录，主题目录，定义了即将生成的html的layout, 和html中需要加载的css, js, images<br>public目录, hexo generate的最终输出目录。里面包含了整个博客网站的html, css, js, images<br>第二次渲染，需要引入对应模板文件格式的插件，如.ejs文件就需要使用hexo-render-ejs插件，.jade文件需要使用hexo-render-jade插件，而.sass文件则需要hexo-render-sass插件来转换成css文件。hexo的这一设计有点类似webpack中的loader。<br></td></tr></table><br>hexo插件是如何工作的</p><p>hexo和webpack还有一点类似的地方就是插件驱动理念。即hexo(和webpack)是先实现一套(插件)扩展系统，然后再往扩展系统中添加插件来实现自身的功能。即我们日常使用的hexo init, hexo new，hexo generate等等功能都是通过一个个插件(其实就是一个个function)实现的。</p><p><table><tr><td bgcolor="#F0F8FF"><br>具体来讲就是:<br>hexo.extend这个对象的每个属性都是一个用来绑定(特定)插件的对象。（所谓”绑定”，其实就是对象的register方法）<br>hexo初始化过程中先加载内部插件，再加载外部插件<br>而这些插件的功能分为两大类: 命令行插件和generate过程相关功能，例如：<br>命令行插件, hexo new, 是在hexo.extend.console对象上绑定的一个插件<br>generate过程相关的插件，如上文提到的往article对象添加title,content等属性的功能，是通过往hexo.extend.processer对象上绑定post插件来实现的<br>所以，当我们想自己动手写插件时，就是像hexo官网给出的这样,调用某个对象的register方法，如hexo.extend.console.register。<br></td></tr></table><br>hexo和git page<br><img src="http://coderunthings.com/images/howhexoworks/deploy.png" alt=""><br>如上图，(用户通过浏览器访问到的)git page上的博客网站其实是hexo generate之后生成的public目录下的内容。</p><p><table><tr><td bgcolor="#F0F8FF"><br>所以，一个hexo博客项目应该有两个仓库:<br>(基于hexo init结果的)博客编写仓库。可以把这个项目看成一个代码库，用来”开发”博客网站(包含写博客，生成博客等任务)<br>存放(hexo generate结果的)public目录仓库。这个项目是”只读”的，我们不会直接修改这个仓库的内容，我们也不会对这个仓库直接进行git pull、git commit、git push等常规操作。这个仓库的内容就是public目下的内容，即是通过hexo generate产生、hexo deploy提交的。<br></td></tr></table><br>总结</p><p>hexo简洁、强大的功能来自于自身优雅的系统设计:</p><p>hexo进程启动、hexo核心对象封装、插件系统分别独立<br>自身采用插件驱动，生来就具备高可扩展性<br>希望读完这篇文章你能对hexo本身有更深入的理解，也能通过hexo的代码设计，对自己以后写出更优雅的代码有所启发。</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cookie被浏览器禁用后的解决方法</title>
      <link href="/2017/12/30/cookie%E8%A2%AB%E6%B5%8F%E8%A7%88%E5%99%A8%E7%A6%81%E7%94%A8%E5%90%8E%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <content type="html"><![CDATA[<p>摘要:<br>转载自:<a href="http://blog.csdn.net/github_36301064/article/details/53412600" target="_blank" rel="noopener">http://blog.csdn.net/github_36301064/article/details/53412600</a><br><a id="more"></a><br>正文:<br>我们都知道session依赖cookie，因为服务器需要在每次请求中获取sessionId，然后找到客户端的session对象，如果浏览器禁用了cookie呢？</p><p>这个时候，就需要用到URL重写了，这种方法让服务器收到的每个请求中都带有sessioinId。</p><p>URL重写的具体方法是：在每个页面中的每个链接和表单中都添加名为jSessionId的参数，值为当前sessionid。当用户点击链接或提交表单时也服务器可以通过获取jSessionId这个参数来得到客户端的sessionId，找到sessoin对象，来看看具体的例子：</p><p>方法一：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">------------链接------------</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'/jsp/index.jsp;jsessionid=&lt;%=session.getId() %&gt;'</span> &gt;</span>主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br><span class="line">------------表单------------</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">'/jsp/index.jsp;jsessionid=&lt;%=session.getId() %&gt;'</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br>方法二（使用response.encodeURL()对每个请求的URL处理，这个方法会自动追加jsessionid参数，与上面我们手动添加是一样的效果。）：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">------------链接------------</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'&lt;%=response.encodeURL("/jsp/index.jsp") %&gt;'</span> &gt;</span>主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br><span class="line">------------表单------------</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">'&lt;%=response.encodeURL("/jsp/index.jsp") %&gt;'</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span>  </span><br></pre></td></tr></table></figure><br>使用response.encodeURL()更加“智能”，它会判断客户端浏览器是否禁用了Cookie，如果禁用了，那么这个方法在URL后面追加jsessionid，否则不会追加。<br>所以说，建议使用方法二。</p>]]></content>
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie,session </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面经</title>
      <link href="/2017/12/30/%E9%9D%A2%E7%BB%8F/"/>
      <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 请输入密码 " /> <label for="pass"> 请输入密码 </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> 面试经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经,面试题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二维数组的查找</title>
      <link href="/2017/12/29/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
      <content type="html"><![CDATA[<p>摘要:<br>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br><a id="more"></a><br>正文:<br>题目描述<br>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br>思路1：<br>在数组中的元素都是按照顺序排列的，故采用二分的思想对数组元素进行查找:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(array[<span class="number">0</span>].length==<span class="number">0</span>||array.length==<span class="number">0</span>||array==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(binSearch(array[i],<span class="number">0</span>,array[i].length-<span class="number">1</span>,target)==target) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binSearch</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> start,<span class="keyword">int</span> end,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start&gt;end) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(start+end)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid]==target) <span class="keyword">return</span> a[mid];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[mid]&lt;target) <span class="keyword">return</span> binSearch(a,mid+<span class="number">1</span>,end,target);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> binSearch(a,start,mid-<span class="number">1</span>,target);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>思路2:<br>从左下角开始，如果要找的那个数&gt;左下角的数,那么向右找，如果想找的那个数比左下角的那个数小，那么向上移动一层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> [][] array,<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = array.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len &gt;= <span class="number">0</span>)&amp;&amp; (i &lt; array[<span class="number">0</span>].length))&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[len][i] &gt; target)&#123;</span><br><span class="line">                len--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[len][i] &lt; target)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 基础算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法,面试题 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
