<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>项目开发中数据库哪些雷区不能踩?</title>
      <link href="/2019/07/06/MySql%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<p>摘要:<br>本篇整理了平时开发过程中关于数据库开发的规范性问题，仅供参考。<br><a id="more"></a><br>正文:</p><p><font color="#FFD700" size="5">1.数据库设计规范</font></p><p>1.1.所有数据库的对象名称都必须为小写字母，并且使用下划线进行分割。</p><p>1.2.所有数据库的名称禁止使用mysql的保留关键字。</p><p>1.3.数据库对象的命名要做到见名识义，并且最好不要超过32个字符。</p><p>1.4.临时表使用tmp作为前缀并以日期作为后缀。</p><p>1.5.备份库，备份表必须使用bak作为前缀并且使用日期作为后缀。</p><p>1.6.存储相同数据库的列名以及列类型必须保持一致，比方说有两张表，都是存储的相同的一个字段，那么这个字段的所有信息都必须保持一致。</p><p>1.7.所有的数据表都必须使用innodb来作为存储引擎。</p><p>1.8.数据库以及表统一使用utf8mb4来进行编码，mysql中的utf-8并不是真正意义上的utf-8，不要使用这种类型。</p><p>1.9.分区表在物理上分为多个文件，在逻辑上表现为一个表，谨慎使用分区键，跨分区查询效率可能会比较低，建议使用分表的方式来管理大的数据。</p><p>1.10.冷热数据分离，减少表的宽度。</p><p>1.11.禁止在表中建立预留字段，所以无法选择合适的类型，原因是因为对预留的类型进行修改，会直接锁表。</p><p>1.12.图片以及文件等二进制数据禁止存储到数据库中。</p><p>1.13.禁止在线上进行数据库压力测试，应该使用专门的压力机器，禁止生产环境以及开发环境使用相同的数据库。</p><p>1.14.单张表上的索引数量最好不要超过5个。</p><p>1.15.建立innodb表时必须有一个主键，建立主键的时候不要使用UUID,MD5,HASH，字符串列作为主键，因为主键需要自动增长，而上面的几种类型并不会保证自增长。</p><p>1.16.在SELECT，UPDATE，DELETE中WHERE后面从句中的列中选择相应的列来建立索引,包含在ORDER BY ，GROUP BY ,DISTINCT中的字段，多表JOIN的关联列上边。</p><p>1.17.联合索引中 区分度最高的列放在联合索引的最左侧 ，其次尽量把字段长度小的列放在字段的最左侧，因为字段长度越小，存储的数据量越大，IO性能越好，使用比较频繁的列放在最左侧，主要是减少重复索引，例如index(a,b,c)、index(a,b)、index(a)都是冗余的索引。</p><p>1.18.严禁使用外键。</p><p>1.19.尽可能将所有的列定义为NOT_NULL,因为索引NULL列需要占用额外的空间来保存，需要暂用更多的空间。</p><p>1.20.禁止使用字符串类型存储日期，尽量使用DATETIME或者TIMESTAMP类型来存储时间。</p><p><font color="#FFD700" size="5">2.数据库字段设计规范 </font></p><p>2.1 优先选择符合存储需要的最小数据类型<br>              —–将字符串转化为数字进行存储<br>eg:   inet_aton(‘255.255.255.255’)=4294967295<br>      INET_NTOA(4294967295);</p><p>2.2 对于非负数据采用无符号整形进行存储。</p><p>2.3 varcher(N)中的N表示的字符数而不是字节数，使用时需要注意。<br>    比如UTF-8存储汉字Varchar(255)，那么实际暂用的字节数目为255*3个字符。</p><p>2.4 避免使用TEXT、BLOB类型的数据<br>    建议将BLOB或者TEXT列分离到单独的扩展表中、TEXT或者BLOB类型。</p><p>2.5 使用DATETIME或者TIMESTAMP类型来存储时间类型<br>    而使用TIMESTAMP使用的存储空间会更小，TIMESTAMP  可以存储的时间范围为:1970-01-01  00:00:01~2038-01-19  03:14:07<br>TIMESTAMP占用4个字节的数据和INT类型的相同，但是可读性比INT类型的要高，超出范围的类型需要使用DATETIME类型进行存储。</p><p>2.6 和财务相关的数据，必须使用decimal类型进行存储<br>    原因:Decimal为精准浮点数，在计算时不会丢失精度，占用的空间由定义的宽度决定，该类型可以用于存储比bigint更大的数据类型。</p><p><font color="#FFD700" size="5"> 3.SQL开发规范 </font></p><p>3.1.使用预编译对数据库进行处理</p><p>3.2.避免数据类型的隐式转换，<br>    eg:<br>    select name,key from table where id = ‘123’ ;<br>    这里的id如果是整形，那么有可能会造成索引实效。</p><p>3.3.充分利用表上已经存在的索引<br>    避免使用双%号的查询条件。如  a like ‘%123%’,而使用 a like ‘123%’可以使用到索引。</p><p>3.4.程序连接不同的数据库使用不同的账号进行登录，禁止跨库查询，为数据库迁移和分库，分表留出余地，降低业务耦合度，并避免权限过大而产    生的安全风险。</p><p>3.5.严禁使用SELECT * 必须使用SELECT &lt;字段列表&gt;进行查询,因为会消耗更多的cpu以及io资源，无法使用复合索引，可以减少表结构变更带来的影响。</p><p>3.6.禁止使用不含字段列表的INSERT语句,目的是减少表结构变更带来的影响。<br>eg:<br>    错误写法:insert into  t  values(‘a’,’b’,’c’)<br>    正确写法:insert into t(c1,c2,c3)  values(‘a’,’b’,’c’)</p><p>3.7.避免使用子查询，可以把子查询优化为JOIN操作，原因是子查询的结果集无法使用索引，并且子查询会产生零时表操作，如果子查询数据量很大，那么会严重影响查询效率,消耗过多的CPU以及IO。</p><p>3.8.避免使用过多的JOIN来关联过多的表，MySQL允许关联的表为61个，这里建议关联的表个数不超过5个。</p><p>3.9. 减少和数据库的交互次数,严禁在循环体中进行数据库的增删改查操作，原因是：<br>数据库适合进行批量的操作，将多个相同的操作合并到一起，可以提交数据库的处理效率。</p><p>3.10.对于同一个查询条件，建议使用in来替换or，但是in中的值不要超过500个,in可以有效的使用索引。</p><p>3.11.禁止使用order by rand()来进行随机排序，替代方案可以在程序中生成随机值，然后在数据库中order by这个随机值。</p><p>3.12.严禁在WHERE从句中对列进行函数转换以及计算，因为对列进行函数转换会造成索引无法使用。<br>   eg:  where date(createtime)= ‘20180707’可以改进为：<br>where  createtime  &gt;= ‘20180707’  and createtime  &lt; ‘20180707’</p><p>3.13.在不会有重复数据值得时候，建议使用UNION  ALL 而不是  UNION ,原因是UNION会把所有的数据存放到临时表中再进行去重操作，而UNION  ALL  不会再对结果集进行区重的操作。</p><p>3.14.合理的拆分多个大SQL为多个小的SQL，由于一个SQL只能使用一个CPU进行计算，无法并行计算，所以有必要将一个sql拆分为多个sql来提升效率。</p><p><font color="#FFD700" size="5">4.数据库操作规范</font></p><p>4.1 超过100万行的批量写操作，要分批次进行操作，大批量的操作会造成严重的主从延迟，binlog日志为row格式时会产生大量的日志<br>避免产生大事务操作。</p><p>4.2 对大表数据结构修改一定要谨慎，会造成严重的锁表操作，建议对大表使用pt-online-schema-change修改表的结构，<br>禁止程序使用的账号赋予super 权限，由于达到数据库连接限制的时候，还允许1个使用super权限的连接。</p><p>4.3 对于程序连接数据库账号，遵循权限最小的原则，程序使用的数据库账号只能在一个DB下进行使用，不允许跨库进行使用，程序使用的账号原则上不应该有drop的权限。</p><p>….</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java8垃圾回收总结</title>
      <link href="/2018/09/16/Java8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 请输入密码 " /> <label for="pass"> 请输入密码 </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker使用心得</title>
      <link href="/2018/04/29/docker%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
      <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 请输入密码 " /> <label for="pass"> 请输入密码 </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>备忘录模式</title>
      <link href="/2018/02/15/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于备忘录模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>一系列的操作之后恢复原来的状态。实际的使用场景有事务的回滚操作等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在备忘录模式中有以下的几种对象:<br>2.1源发器:Originator<br>2.2备忘录类:Memento<br>2.3负责人CareTake<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/ca9112807235929b4720840b6a08f0dcbe14993d9999-RHTHvJ_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>首先定义Emp类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行备忘录操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmpMemento <span class="title">memento</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmpMemento(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进行数据恢复,恢复成备忘录对象的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recovery</span><span class="params">(EmpMemento emto)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=emto.getName();</span><br><span class="line">        <span class="keyword">this</span>.age=emto.getAge();</span><br><span class="line">        <span class="keyword">this</span>.salary=emto.getSalary();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义EmpMemento类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpMemento</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmpMemento</span><span class="params">(Emp e)</span> </span>&#123;<span class="comment">//这是关键</span></span><br><span class="line">        <span class="keyword">this</span>.name=e.getName();</span><br><span class="line">        <span class="keyword">this</span>.age=e.getAge();</span><br><span class="line">        <span class="keyword">this</span>.salary=e.getSalary();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编写CareTaker类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CareTaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> EmpMemento memento;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmpMemento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(EmpMemento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后给出测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CareTaker careTaker=<span class="keyword">new</span> CareTaker();</span><br><span class="line">        Emp emp=<span class="keyword">new</span> Emp(<span class="string">"小强"</span>,<span class="number">90</span>,<span class="number">900</span>);</span><br><span class="line">        System.out.println(emp.getName()+<span class="string">" "</span>+emp.getAge()+<span class="string">" "</span>+emp.getSalary());</span><br><span class="line">        careTaker.setMemento(emp.memento());</span><br><span class="line">        emp.setAge(<span class="number">9</span>);</span><br><span class="line">        System.out.println(emp.getName()+<span class="string">" "</span>+emp.getAge()+<span class="string">" "</span>+emp.getSalary());</span><br><span class="line">        emp.recovery(careTaker.getMemento());</span><br><span class="line">        System.out.println(emp.getName()+<span class="string">" "</span>+emp.getAge()+<span class="string">" "</span>+emp.getSalary());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>备忘录模式保存了内部状态的拷贝，以后直接恢复即可。<br>代码地址:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/memeto" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/memeto</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>观察者模式</title>
      <link href="/2018/02/15/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于观察者模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>Android开发中的广播机制,Servlet中监听器的实现。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>观察者模式包含如下的一些角色:<br>2.1 Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。<br>2.2 ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。<br>2.3 Observer：抽象观察者，是观察者者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。<br>2.4 ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/8aa6b22bc8a4bd3d62c44bc72aa3d9728c727e977899-lIdJ3p_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>首先，定义Observer接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/15 11:41</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [subject]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject subject)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserverA</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        state=((ConcreteSubject)subject).getState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        list.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        list.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAlls</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer:list)&#123;</span><br><span class="line">            observer.update(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span>  <span class="keyword">extends</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        <span class="keyword">this</span>.notifyAlls();<span class="comment">//更新所有的订阅者</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义普通测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//目标对象</span></span><br><span class="line">        ConcreteSubject subject=<span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">        <span class="comment">//创建多个观察者</span></span><br><span class="line">        ConcreteObserverA coa=<span class="keyword">new</span> ConcreteObserverA();</span><br><span class="line">        ConcreteObserverA coa2=<span class="keyword">new</span> ConcreteObserverA();</span><br><span class="line">        ConcreteObserverA coa3=<span class="keyword">new</span> ConcreteObserverA();</span><br><span class="line">        <span class="comment">//让这三个观察者添加到subject观察者队伍中</span></span><br><span class="line">        subject.register(coa);</span><br><span class="line">        subject.register(coa2);</span><br><span class="line">        subject.register(coa3);</span><br><span class="line">        subject.setState(<span class="number">1234</span>);</span><br><span class="line">        System.out.println(coa.getState());</span><br><span class="line">        System.out.println(coa2.getState());</span><br><span class="line">        System.out.println(coa3.getState());</span><br><span class="line">        subject.removeObserver(coa3);</span><br><span class="line">        subject.setState(<span class="number">5678</span>);</span><br><span class="line">        System.out.println(coa3.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>上边我们通过代码手动实现了一个观察者模式，然而，jdk也提供了一些接口来方便我们实现这一功能。有兴趣的可以研究以下。<br>项目链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/observer" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/observer</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>状态模式</title>
      <link href="/2018/02/15/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于状态模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>常见的应用场景有线程对象各个状态之间的切换或者各种账号状态的管理等</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>状态模式中主要有以下的几大角色:<br>2.1Context:环境类<br>环境类中维护一个State对象，定义了当前的对象<br>2.2State:抽象状态类<br>2.3ConcreteState:具体状态类<br>每一类封装了一个对应的行为<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/b5b0aa3b24a36ac3dff3f69edf63bef36f1bd9363182-meSgJ1_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个图书馆借书的例子来对这个设计模式进行讲解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BorrowState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"书籍已经被借走"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreeState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"书本在馆!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderedState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"书本已经被预订！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改状态"</span> );</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        state.handle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后是一个简单的测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       BookContext ctx=<span class="keyword">new</span> BookContext();</span><br><span class="line">       ctx.setState(<span class="keyword">new</span> FreeState());</span><br><span class="line">       ctx.setState(<span class="keyword">new</span> OrderedState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>项目链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/state" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/state</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模板方法模式</title>
      <link href="/2018/02/14/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于模板方法模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>当实现一个算法的时候，这个算法的整体步骤是固定的，但是某一些算法可能会进行更改。易变的部分我们可以抽取出来，供子类实现。比较常见的应用有Junit单元测试Spring中的JDBCTemplate类等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>模板方法模式包含如下两个角色：<br>2.1 AbstractClass（抽象类）：在抽象类中定义了一系列基本操作(PrimitiveOperations)，这些基本操作可以是具体的，也可以是抽象的，每一个基本操作对应算法的一个步骤，在其子类中可以重定义或实现这些步骤。同时，在抽象类中实现了一个模板方法(Template Method)，用于定义一个算法的框架，模板方法不仅可以调用在抽象类中实现的基本方法，也可以调用在抽象类的子类中实现的基本方法，还可以调用其他对象中的方法。<br>2.2 ConcreteClass（具体子类）：它是抽象类的子类，用于实现在父类中声明的抽象基本操作以完成子类特定算法的步骤，也可以覆盖在父类中已经实现的具体基本操作。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/ae69fa772bb1102d56adbd94660d8130fd551a3f5116-88tGer_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>定义一个银行办理业务步骤的类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"取号排队"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"反馈评分"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.takeNumber();</span><br><span class="line">        <span class="keyword">this</span>.transact();</span><br><span class="line">        <span class="keyword">this</span>.evaluate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>再定义一个具有特殊需求的类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Withdrawals</span> <span class="keyword">extends</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"取款!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后是一个简单的测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BankTemplateMethod bankTemplateMethod=<span class="keyword">new</span> BankTemplateMethod() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"存点零花钱"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        bankTemplateMethod.process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>模板方法定义了操作中算法的骨架，新的子类可以在不改变一个算法结构的前提下重新定义该算法的某些特定的步骤，也即是通过模板方法，处理的步骤已经在父类中定义好了，而具体的实现则延迟到子类中定义。<br>项目链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/templateMethod" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/templateMethod</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>策略模式</title>
      <link href="/2018/02/14/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于策略模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>我们需要根据不同的需求给出不同的解决方案，如果使用条件判断，这时候如果有新增的类型就会破坏开放封闭原则，这时候就需要使用策略模式。常用的使用场景有Spring框架中的Resource接口等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在策略模式中有以下的几种对象:<br>2.1环境(Context)角色：持有一个Strategy的引用。<br>2.2抽象策略(Strategy)角色：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。<br>2.3具体策略(ConcreteStrategy)角色：包装了相关的算法或行为。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/b73288c2de5376667d351ab520b559db21ce454d6ed9-LMAkUn_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>首先，定义Strategy接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义Context类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;<span class="comment">//当前的算法对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printArea</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"图形面积:"</span>+strategy.getArea(a,b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义计算各种图形面积的方法(写的不是太严谨,这里只是用作演示):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circular</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a==b)</span><br><span class="line">        <span class="keyword">return</span> Math.PI*a*b;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a*b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a*b/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>简单测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Strategy s1=<span class="keyword">new</span> Rectangle();</span><br><span class="line">        Strategy s2=<span class="keyword">new</span> Triangle();</span><br><span class="line">        Strategy s3=<span class="keyword">new</span> Circular();</span><br><span class="line">        Context ctx=<span class="keyword">new</span> Context(s3);</span><br><span class="line">        ctx.printArea(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>策略模式实际就是一种对算法进行分离的设计模式，客户端能够自行判断调用哪个算法。<br>代码链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/strategy" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/strategy</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>访问者模式</title>
      <link href="/2018/02/14/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于访问者模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>在一个集合中有一些不同的子类对象，需要分别对这些子类对象做处理。常常应用于XML文档的解析、编辑器的解析等。</p><h2 id="2-UML表示："><a href="#2-UML表示：" class="headerlink" title="2.UML表示："></a>2.UML表示：</h2><p>2.1 Visitor（抽象访问者）：抽象访问者为对象结构中每一个具体元素类ConcreteElement声明一个访问操作，从这个操作的名称或参数类型可以清楚知道需要访问的具体元素的类型，具体访问者则需要实现这些操作方法，定义对这些元素的访问操作。<br>2.2 ConcreteVisitor（具体访问者）：具体访问者实现了抽象访问者声明的方法，每一个操作作用于访问对象结构中一种类型的元素。<br>2.3 Element（抽象元素）：一般是一个抽象类或接口，定义一个Accept方法，该方法通常以一个抽象访问者作为参数。<br>2.4 ConcreteElement（具体元素）：具体元素实现了Accept方法，在Accept方法中调用访问者的访问方法以便完成一个元素的操作。<br>2.5 ObjectStructure（对象结构）：对象结构是一个元素的集合，用于存放元素对象，且提供便利其内部元素的方法。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/45e2f1a96e486aa63d973a659a68b74e078bab4faad7-cnVfK1_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>参考了一个例子:<a href="http://www.cnblogs.com/chenpi/p/5222390.html" title="链接" target="_blank" rel="noopener">http://www.cnblogs.com/chenpi/p/5222390.html</a><br>定义一个visitor接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/16 16:05  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [wheel]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Wheel wheel)</span></span>;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/16 16:06  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [engine]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Engine engine)</span></span>;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/16 16:06  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [body]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Body body)</span></span>;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/16 16:06  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [car]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Car car)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>具体的访问者类，定义一些行为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Wheel wheel)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"轮子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Engine engine)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"引擎"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Body body)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"车身"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"整车"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义Visitable接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义各部件类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engine</span> <span class="keyword">implements</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> <span class="keyword">implements</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wheel</span> <span class="keyword">implements</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Visitable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Engine engine=<span class="keyword">new</span> Engine();</span><br><span class="line">    <span class="keyword">private</span> Body body=<span class="keyword">new</span> Body();</span><br><span class="line">    <span class="keyword">private</span> Wheel wheel=<span class="keyword">new</span> Wheel();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">          visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">          engine.accept(visitor);</span><br><span class="line">          body.accept(visitor);</span><br><span class="line">          wheel.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单的测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car car=<span class="keyword">new</span> Car();</span><br><span class="line">        Visitor visitor=<span class="keyword">new</span> PrintVisitor();</span><br><span class="line">        car.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>通过上面的例子，我们可以看出，一旦操作逻辑发生改变，我们只要更改PrintVisitor类中的代码即可，与此同时，一旦需要新添加一些“零件”，例如再添加一个“尾翼”类，只需要改变访问者接口即可。<br>代码地址:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/visitor" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/visitor</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解释器模式</title>
      <link href="/2018/02/14/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于解释器模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>这个设计模式一般用来解释语句中的句子，实际开发中EL表达式或者正则表达式的解释器就是采用这种设计模式等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>Expression:抽象表达式,用来表明所有具体表达式需要实现的抽象接口。<br>Terminal Expression:终结符表达式,实现了抽象表达式所要求的接口。<br>Nonterminal Expression:非终结表达式<br>Context:环境,它的任务一般用来存放文法中各个终结符对应的具体值。<br>具体的UML示意图如下:<br><img src="http://img.hb.aicdn.com/f22d6065cb794ebd48c485956908e1bab1a59bb7452c-cFzR3c_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>这里参考了网络上的例子:<a href="https://www.cnblogs.com/chenpi/p/5222496.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenpi/p/5222496.html</a><br>具体就是自定义一个解释器用来解析一种类似后序表达式()的值。<br>下面是具体的代码:<br>首先我们定义一个接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**    </span></span><br><span class="line"><span class="comment">         *   </span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">         * <span class="doctag">@date</span> 2018/2/16 11:21  </span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> [variables]  </span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> int  </span></span><br><span class="line"><span class="comment">         */</span> </span><br><span class="line">         <span class="function"><span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String,Expression&gt; variables)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义符号识别类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    Expression left;</span><br><span class="line">    Expression right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Plus</span><span class="params">(Expression left, Expression right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret(variables)+right.interpret(variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Minus</span> <span class="keyword">implements</span> <span class="title">Expression</span></span>&#123;</span><br><span class="line">    Expression left;</span><br><span class="line">    Expression right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Minus</span><span class="params">(Expression left, Expression right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret(variables)-right.interpret(variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Number</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义解析类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Variable</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span>==variables.get(name))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> variables.get(name).interpret(variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Evaluator</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Expression syntaxTree;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Evaluator</span><span class="params">(String expression)</span></span>&#123;</span><br><span class="line">        Stack&lt;Expression&gt; expressions=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String token:expression.split(<span class="string">" "</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (token.equals(<span class="string">"+"</span>))&#123;</span><br><span class="line">                Expression subExpression=<span class="keyword">new</span> Plus(expressions.pop(),expressions.pop());</span><br><span class="line">                expressions.push(subExpression);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(token.equals(<span class="string">"-"</span>))&#123;</span><br><span class="line">                Expression right=expressions.pop();</span><br><span class="line">                Expression left=expressions.pop();</span><br><span class="line">                Expression subExpression=<span class="keyword">new</span> Minus(left,right);</span><br><span class="line">                expressions.push(subExpression);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                expressions.push(<span class="keyword">new</span> Variable(token));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        syntaxTree=expressions.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Map&lt;String, Expression&gt; variables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> syntaxTree.interpret(variables);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后，编写测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String expression=<span class="string">"w x z - +"</span>;</span><br><span class="line">        Evaluator evaluator=<span class="keyword">new</span> Evaluator(expression);</span><br><span class="line">        Map&lt;String,Expression&gt; variables=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        variables.put(<span class="string">"w"</span>,<span class="keyword">new</span> Number(<span class="number">5</span>));</span><br><span class="line">        variables.put(<span class="string">"w"</span>,<span class="keyword">new</span> Number(<span class="number">5</span>));</span><br><span class="line">        variables.put(<span class="string">"w"</span>,<span class="keyword">new</span> Number(<span class="number">5</span>));</span><br><span class="line">        <span class="keyword">int</span> result=evaluator.interpret(variables);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>解释器模式主要用于需要自定义语法分析工具的场景，如果需要增加操作，只需要添加具体的类即可。在实际开发中使用率较低。<br>项目链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/interpreter" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/interpreter</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>命令模式</title>
      <link href="/2018/02/14/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于命令模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>所谓命令模式就是将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。在数据库的事务处理部分就使用了命令模式。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在命令模式中通常包含以下的几组对象:<br>2.1Invoker调用者/请求者<br>2.2Receiver接收者<br>2.3Client客户端<br>具体的UML示意图如下:<br><img src="http://img.hb.aicdn.com/df99f59b2da75c79e48ee9e69a0360d92e5bb41d3b24-3KplcG_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>定义一个Command接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/14 15:45</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编写Command实体:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;<span class="comment">//命令真正的执行者</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行相关的处理</span></span><br><span class="line">        receiver.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义一个Invoke类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoke</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invoke</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//业务方法，用于调用命令类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编写receiver类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Receiver.action()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后，我们通过一个简单的例子来进行测试:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Command c=<span class="keyword">new</span> ConcreteCommand(<span class="keyword">new</span> Receiver());</span><br><span class="line">        Invoke i=<span class="keyword">new</span> Invoke(c);</span><br><span class="line">        i.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>可以看到，调用者Client并不会直接和接收者Receiver类发生关系，这么做有什么好处？这样做的好处一是可以实现类之间的解耦，二是Command类的扩展性会比较好，但同时这也会造成类膨胀的问题，所以命令模式通常会和我们前面介绍的责任链模式结合。<br>下面给出项目的链接:<a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/command" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/command</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>中介者模式</title>
      <link href="/2018/02/14/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于中介者模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>系统中的关系比较复杂，存在网状的关系。例如经典的MVC模式中的”C”-Controller就是一个中介者对象还有例如Java反射中的invoke()方法中也是使用到了中介者模式。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>2.1 Mediator：抽象中介者角色，定义了同事对象到中介者对象的接口，一般以抽象类的方式实现。<br>2.2 ConcreteMediator：具体中介者角色，继承于抽象中介者，实现了父类定义的方法，它从具体的同事对象接受消息，向具体同事对象发出命令。<br>2.3 Colleague：抽象同事类角色，定义了中介者对象的接口，它只知道中介者而不知道其他的同事对象。<br>2.4 ConcreteColleague1、ConcreteColleague2：具体同事类角色，继承于抽象同事类，每个具体同事类都知道本身在小范围的行为，而不知道在大范围内的目的。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/56e2c518a9e443b6841077b52dc3cf26f62852da831b-b3TF63_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>定义中介者接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/14 16:43  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [dName, dt]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(String dName,Department dt)</span></span>;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/14 16:43  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [dName]  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">command</span><span class="params">(String dName)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>实现接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">President</span> <span class="keyword">implements</span> <span class="title">Mediator</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Department&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String dName, Department dt)</span> </span>&#123;</span><br><span class="line">        map.put(dName,dt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">command</span><span class="params">(String dName)</span> </span>&#123;</span><br><span class="line">        map.get(dName).selfAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义Department接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/14 16:45  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> []  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span></span>;<span class="comment">//</span></span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lsj  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2018/2/14 16:45  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> []  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void  </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们定义一个研发部来实现这个接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Development</span> <span class="keyword">implements</span> <span class="title">Department</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Mediator m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Development</span><span class="params">(Mediator m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"研发"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"需要资金"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>限于篇幅，这里省略其他的部门类。<br>最后，我们通过一个简单的例子进行测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Mediator m=<span class="keyword">new</span> President();<span class="comment">//中介者对象</span></span><br><span class="line">        Market market=<span class="keyword">new</span> Market(m);</span><br><span class="line">        market.selfAction();</span><br><span class="line">        market.outAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>中介者模式用于解耦多个对象之间的关系。每个对象都会持有一个中介者的对象，然后通过中介者统一管理这些交互的关系。<br>下面给出项目的链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/mediator" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/mediator</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>迭代器模式</title>
      <link href="/2018/02/13/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于迭代器模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>1.1访问一个聚合对象的内容而无需暴露它的内部表示<br>1.2支持对聚合对象的多种遍历<br>1.3为遍历不同的聚合结构提供一个统一的接口<br>其实就是为方便遍历数据服务，像JDK的内置迭代器，就是采用的这种模式。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>迭代器模式主要有以下的角色构成:<br>2.1迭代器角色:定义遍历元素所需要的方法。<br>2.2具体迭代角色：实现迭代器接口中定义的方法，完成集合的迭代。<br>2.3容器角色:一个接口,提供iterator()方法，对比于java中的Collection接口、List接口、Set接口等。<br>2.4具体容器角色<br>抽象容器的具体实现类，比如:List接口中的ArrayList、LinkedList等。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/5f25cea7ee76e28881699988cb59b9af474448e97d93-RH02Rp_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个例子来对这个设计模式进行讲解:<br>首先，我们定义一个迭代器的接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyIterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isFirst</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isLast</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">getCurrentObj</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>实现具体的迭代器:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreateIterator</span> <span class="keyword">implements</span> <span class="title">MyIterator</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cursor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreateIterator</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cursor=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cursor&lt;list.size())&#123;</span><br><span class="line">            cursor++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cursor&lt;list.size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor==<span class="number">0</span>?<span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor == (list.size() - <span class="number">1</span>) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCurrentObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(cursor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义容器角色：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyAggregate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addObject</span><span class="params">(Object object)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObject</span><span class="params">(Object object)</span></span>;</span><br><span class="line">    <span class="function">MyIterator <span class="title">createIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>具体容器类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMyAggregate</span> <span class="keyword">implements</span> <span class="title">MyAggregate</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteMyAggregate</span><span class="params">(List&lt;Object&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObject</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list.add(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObject</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list.remove(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**获取迭代器*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyIterator <span class="title">createIterator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreateIterator(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>通过迭代器模式，简化了遍历的方式，由于迭代器内部已经实现了迭代算法，所以我们不需要了解遍历的算法，使得代码的封装性比较好。<br>下面给出代码:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/iterator" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/iterator</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>责任链模式</title>
      <link href="/2018/02/13/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于责任链模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>Tomcat中的过滤器链，springmvc中的拦截器链等等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在责任链模式中通常用以下的几类对象:<br>Handler：定义出一个处理请求的接口。如果需要，接口可以定义 出一个方法以设定和返回对下家的引用。这个角色通常由一个Java抽象类或者Java接口实现。<br>ConcreteHandler：具体处理者接到请求后，可以选择将请求处理掉，或者将请求传给下家。由于具体处理者持有对下家的引用，因此，如果需要，具体处理者可以访问下家。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/09a7239ca5142727bac233dede8f1b1b250d94dd4b07-Px07MZ_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个员工请假的例子对责任链模式进行讲解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> Leader nextLeader;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Leader <span class="title">getNextLeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextLeader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLeader</span><span class="params">(Leader nextLeader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextLeader = nextLeader;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(LeaveRequest request)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义领导类，判断的标准根据员工的请假的天数为准。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Groupleader</span> <span class="keyword">extends</span> <span class="title">Leader</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Groupleader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(LeaveRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getLeaveDays()&lt;<span class="number">3</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"小组长同意"</span>+request.getEmpName());</span><br><span class="line">            System.out.println(<span class="string">"主任"</span>+<span class="keyword">this</span>.name+<span class="string">"，"</span>+<span class="string">"审批通过"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.nextLeader!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.nextLeader.handleRequest(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br>下面是我们进行测试，假设有一个员工打算请假:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Leader a=<span class="keyword">new</span> Groupleader(<span class="string">"小明"</span>);</span><br><span class="line">        Leader b=<span class="keyword">new</span> GeneralManager(<span class="string">"小红"</span>);</span><br><span class="line">        Leader c=<span class="keyword">new</span> BOSS(<span class="string">"小刚"</span>);</span><br><span class="line">        a.setNextLeader(b);</span><br><span class="line">        b.setNextLeader(c);</span><br><span class="line">        LeaveRequest request=<span class="keyword">new</span> LeaveRequest(<span class="string">"小强"</span>,<span class="number">10</span>,<span class="string">"玩"</span>);</span><br><span class="line">        a.handleRequest(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看到责任关系是在客户端调用的时候确定的。                        </p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>责任链模式将处理同一类请求的对象连城一条链，所提交的请求沿着链传递，链上的对象会逐个判断有没有能力去处理这个请求，如果能则处理，如果不能就传递给链的下一个对象。<br>相关的源代码:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/chainOfResp" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/chainOfResp</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>享元模式</title>
      <link href="/2018/02/13/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于享元模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>内存资源比较稀缺,不要随便浪费，如果有很多相同或者类似的对象，通过使用享元模式的方法，节省内存，例如线程池以及String类等。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在享元模式中通常用以下的几类对象:<br>2.1FlyweightFactory(享元工厂，创建并且管理享元对象)<br>2.2FlyWeight享元抽象类<br>2.3ConcreteFlyWeight具体享元类<br>2.4UnsharedConcreteFlyWeight非共享享元类<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/d406e297b0d7df5e39172507475f235a62f7ac599644-lcBu9p_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>首先，定义一个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChessFlyWeight</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(Coordinate coordinate)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义棋子类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteChess</span> <span class="keyword">implements</span> <span class="title">ChessFlyWeight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteChess</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color=color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Coordinate coordinate)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"棋子颜色："</span>+color);</span><br><span class="line">        System.out.println(<span class="string">"棋子位置："</span>+coordinate.getX()+<span class="string">"-----"</span>+coordinate.getY());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>再定义坐标类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x,y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Coordinate</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后是我们的享元工厂:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChessWeightFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,ChessFlyWeight&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ChessFlyWeight <span class="title">getChess</span><span class="params">(String color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.get(color)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(color);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ChessFlyWeight chessFlyWeight=<span class="keyword">new</span> ConcreteChess(color);</span><br><span class="line">            map.put(color,chessFlyWeight);</span><br><span class="line">            <span class="keyword">return</span>  chessFlyWeight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后，给出一个简单的测试程序:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChessFlyWeight chessFlyWeight1= ChessWeightFactory.getChess(<span class="string">"黑色"</span>);</span><br><span class="line">        ChessFlyWeight chessFlyWeight2= ChessWeightFactory.getChess(<span class="string">"黑色"</span>);</span><br><span class="line">        System.out.println(chessFlyWeight1.equals(chessFlyWeight2));</span><br><span class="line">        System.out.println(<span class="string">"增加外部状态的处理"</span>);</span><br><span class="line">        chessFlyWeight1.display(<span class="keyword">new</span> Coordinate(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        chessFlyWeight2.display(<span class="keyword">new</span> Coordinate(<span class="number">10</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>享元模式以共享的方式高效的支持大量细粒度对象的重用。共享的关键是使用了内部状态以及外部状态，其中：<br>内部状态指的是可以共享,不会随着环的变化而变化的属性；而外部状态指的是不可以共享，会随着环境变化而变化的属性。对于外部状态，使用外部类来进行处理，而对于内部状态，我们单独通过享元类来进行处理。<br>下面给出项目的链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/facade" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/facade</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>外观模式</title>
      <link href="/2018/02/12/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于外观模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>为子系统提供一个统一的入口。封装子系统的复杂性，便于客户调用，常用于一些工具类的封装。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>外观模式包含如下两个角色：<br>(1) Facade（外观角色）：在客户端可以调用它的方法，在外观角色中可以知道相关的（一个或者多个）子系统的功能和责任；在正常情况下，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理。<br>(2) SubSystem（子系统角色）：在软件系统中可以有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能；每一个子系统都可以被客户端直接调用，或者被外观角色调用，它处理由外观类传过来的请求；子系统并不知道外观的存在，对于子系统而言，外观角色仅仅是另外一个客户端而已。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/ab84efb345de8d26ed55ada84d7eb96b3a0721283df3-LDLUSy_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个启动计算机的程序来对外观模式进行一个简要的说明:<br>计算机的启动通常有以下的几个流程:</p><p><img src="https://images2015.cnblogs.com/blog/607348/201512/607348-20151229231206354-919070678.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBIOS</span> <span class="keyword">implements</span> <span class="title">BIOS</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BiosCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"BIOS自检"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyKernel</span> <span class="keyword">implements</span> <span class="title">Kernel</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"系统引导"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySystems</span> <span class="keyword">implements</span> <span class="title">Systems</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"系统初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这时候如果我们需要在主程序中进行调用:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">        MyBIOS myBIOS=<span class="keyword">new</span> MyBIOS();</span><br><span class="line">        myBIOS.BiosCheck();</span><br><span class="line">        MyKernel myKernel=<span class="keyword">new</span> MyKernel();</span><br><span class="line">        myKernel.run();</span><br><span class="line">        MySystems mySystems=<span class="keyword">new</span> MySystems();</span><br><span class="line">        mySystems.init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>结果就是编写的代码相当的松散，这时候我们可以通过定义一个类，然后在类中将上述的代码进行包装，并向外提供一个方法来供调用者进行调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CentOS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyBIOS myBIOS=<span class="keyword">new</span> MyBIOS();</span><br><span class="line">        myBIOS.BiosCheck();</span><br><span class="line">        MyKernel myKernel=<span class="keyword">new</span> MyKernel();</span><br><span class="line">        myKernel.run();</span><br><span class="line">        MySystems mySystems=<span class="keyword">new</span> MySystems();</span><br><span class="line">        mySystems.init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这时候，我们在主程序中直接调用这个类即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       CentOS centOS=<span class="keyword">new</span> CentOS();</span><br><span class="line">       centOS.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>下面给出项目的链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/facade" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/facade</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>装饰模式</title>
      <link href="/2018/02/12/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于装饰模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>在已有的功能上边需要动态的添加新的功能。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在装饰器模式中通常用以下的几类对象:<br>抽象构件角色(Project)：给出一个接口，以规范准备接收附加责任的对象<br>具体构件角色(Employe)：定义一个将要接收附加责任的类<br>装饰角色(Manager)：持有一个构件对象的实例，并定义一个与抽象构件接口一致的接口<br>具体装饰角色(ManagerA，ManagerB)：负责给构件对象“贴上”附加的责任<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/ca3f24ba1a8a81438c8e0cb28d20b31f243b3bda674d-j4M0k8_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个人不断学习技能的例子来对装饰模式进行一个讲解:<br>首先，我们定义一个Human接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>随后我们编写一个Man类-也就是那个需要被加强的类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"直立行走"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>接下来定义SuperMan类，基于此类，我们会不断派生出新的类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Superman</span> <span class="keyword">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Human human;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Superman</span><span class="params">(Human human)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.human = human;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            human.move();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoctorS</span> <span class="keyword">extends</span> <span class="title">Superman</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoctorS</span><span class="params">(Human human)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(human);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">magic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"魔法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.move();</span><br><span class="line">        magic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其他的例子这里限于篇幅进行适当的省略。<br>最后是我们的测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Man man=<span class="keyword">new</span> Man();<span class="comment">//需要被加强的对象</span></span><br><span class="line">        man.move();</span><br><span class="line">        System.out.println(<span class="string">"增加钢铁侠的技能"</span>);</span><br><span class="line">        Ironman ironman =<span class="keyword">new</span> Ironman(man);</span><br><span class="line">        ironman.move();</span><br><span class="line">        System.out.println(<span class="string">"增加奇异博士的技能"</span>);</span><br><span class="line">        DoctorS doctorS=<span class="keyword">new</span> DoctorS(ironman);</span><br><span class="line">        doctorS.move();</span><br><span class="line">        System.out.println(<span class="string">"增加蚁人的技能"</span>);</span><br><span class="line">        AntMan antMan=<span class="keyword">new</span> AntMan(doctorS);</span><br><span class="line">        antMan.move();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>装饰模式主要是用来解决编程中使用继承，所导致的类”膨胀”问题，在本例中，我们可以看到桥接模式和前面的装饰模式有着比较类似的目的，但实际上它们是完全不同的。因为两者的诱因不一样。桥接模式是对象自身现有的机制沿着多维度的变化，既有部分不稳定。而装饰模式则是为了增加新的功能。<br>项目链接：<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/decorator" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/decorator</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>组合模式</title>
      <link href="/2018/02/11/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于组合模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>部分和整体之前通过树状结构进行显示,调用者需要达到可以使用统一的方式处理部分对象以及整体对象的目的。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>组合模式主要包括下面的几个角色:<br>2.1抽象构件:定义叶子和容器构件的共同点。<br>2.2叶子构件。<br>2.3容器构件:能够包含子节点。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/89924f7071f66eb8fbffaf45fc08fa6cbeafccae7b7e-naeNHL_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面我们通过一个模拟的杀毒程序对这一设计模式进行讲解：<br>首先定义我们的抽象构件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span></span>;<span class="comment">//杀毒</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>随后，定义文本文件以及图片文件类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TextFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查杀文本文件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查杀图像文件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后是文件夹类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;AbstractFile&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Folder</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile file)</span></span>&#123;</span><br><span class="line">        list.add(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile file)</span></span>&#123;</span><br><span class="line">        list.remove(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractFile <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对文件夹进行查杀"</span>);</span><br><span class="line">        <span class="keyword">for</span> (AbstractFile file:list)&#123;</span><br><span class="line">            file.killVirus();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-结论"><a href="#4-结论" class="headerlink" title="4.结论"></a>4.结论</h2><p>组合模式通常用来解决存在树形关系结构的问题，上例中的TextFile、ImageFile类正是组合模式中的叶子节点，Folder类对应容器构件，在容器构件中包含叶子节点的引用，例如上例中的list中就包含了多个叶子节点的引用。<br>下面是例子的链接:</p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>桥接模式</title>
      <link href="/2018/02/11/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于桥接模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>分离<strong>两个</strong>变化的维度，通过组合的方式来减少系统中臃肿繁琐的代码,例如JDBC中的驱动程序。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>2.1 实现（Implementor）：定义具体行为，具体特征的应用接口。<br>2.2 具体实现（ConcreteImplementor）：实现Implementor。<br>2.3目标接口（Target）: 包含实现具体行为、具体特征的Implementor接口或者类。<br><img src="http://img.hb.aicdn.com/a6e27d83a8435bcf59a99690ef9e11bb52872bf35a6d-Uf3Imq_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>这里边的类代码比较的多，而且每一个类又比较的简单，所以直接通过UML图来进行讲解:<br>在未使用桥接模式之前，代码结构如下:<br><img src="http://img.hb.aicdn.com/e36bfa6680c42de4d1c0d16810093c59301167a020ab-4LaCAt_fw658" alt=""><br>通过使用桥接模式，这时候的代码结构变成下面的情形:<br><img src="http://img.hb.aicdn.com/e67024c9eddd11aa152c161ba355940bed5d98843b3a-U4aniu_fw658" alt=""><br>具体的代码可以下面的链接进行下载:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/bridge" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/bridge</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>代理模式</title>
      <link href="/2018/02/10/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于代理模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>需要为其他的对象提供一种代理，来控制该对象的访问。Spring中的AOP技术就使用了代理模式。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>代理模式种有以下的几种对象:<br>2.1.抽象角色<br>包含有代理角色和真实角色的公共对外方法。<br>2.2.真实角色<br>真实抽象角色，定义真实角色需要实现的一些业务逻辑(真正干事的家伙)。<br>2.3.代理角色<br>实现抽象角色，是真实角色的代理通过真实角色的业务逻辑方法来实现抽象方法，并且可以附加自己另外的一些操作。(用来做流程控制)<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/1a6165419ac7cccadce663e0d3906b710885c3a63da5-QrfE1x_fw658" alt=""></p><h2 id="3-代理模式的分类"><a href="#3-代理模式的分类" class="headerlink" title="3.代理模式的分类"></a>3.代理模式的分类</h2><p>代理模式主要分为以下两类:<br>3.1.静态代理:<br>3.2.动态代理<br>  3.2.1基于JDK的动态代理<br>  3.2.2基于cglib的动态代理</p><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h2><p>下面我们通过一个例子，来对代理模式进行一个简单的说明:<br>4.1静态代理<br>什么叫静态代理呢?静态代理就是代理类需要我们手动编码实现。<br>定义接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dunk</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>;<span class="comment">//喝水</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">championWay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原始的类，实现上边的接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KevinDurant</span> <span class="keyword">implements</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Large contract!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dunk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"duang！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bath water！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">championWay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Join the warrior！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编写代理类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyKD</span> <span class="keyword">implements</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Player player;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyKD</span><span class="params">(Player player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Large contract!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dunk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"duang！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            player.drink();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">championWay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Join the warrior！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>4.2基于JDK的动态代理<br>JDK动态代理，通过java反射机制实现。<br>代理类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    Player player;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayerHandler</span><span class="params">(Player player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//进行流程控制</span></span><br><span class="line">        System.out.println(method.getName());</span><br><span class="line">        Object object=method.invoke(player,args);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>4.3基于cglib的动态代理<br>前面介绍的JDK动态代理都必须实现InvocationHandler，没有实现接口的类就不能进行代理。针对没有实现这一接口的类我们可以通过cglib来实现动态代理。cglib是通过继承以及回调来实现的，通过字节码技术生成代理类，所以我们在项目中除了引入cglib相关的依赖之外，还要添加asm的jar包。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerCgLib</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Player player;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayerCgLib</span><span class="params">(Player player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Player <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Enhancer enhancer=<span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(player.getClass());</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"KD的代理人"</span>);</span><br><span class="line">                method.invoke(player,objects);</span><br><span class="line">                System.out.println(<span class="string">"KD的代理人"</span>);</span><br><span class="line">                <span class="keyword">return</span> methodProxy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> (Player) enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>代理模式在实际开发中的应用还是比较多的，这里分别实现了静态代理以及基于java反射技术以及cgLib的动态代理实现代码。<br>项目的链接如下:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/proxy" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/proxy</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>适配器模式</title>
      <link href="/2018/02/10/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于适配器模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>由于接口不兼容，需要通过“适配器”来进行协调工作。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>适配器模式中总共有3种角色:<br>2.1目标接口<br>客户期待的接口。目标可以是具体的或抽象的类，也可以是接口。<br>2.2需要适配的类<br>需要适配的类或者适配者类。<br>2.3适配器<br>通过包装一个需要适配的对象，将原有的接口转换成目标接口。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/c4861b7e3ecbc4f7975db26b2abc0cf83048e0a1336d-s4M31u_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面通过一个生活中的一个实际例子来对这种模式进行一个讲解:<br>串行口键盘类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ps2KeyBoard</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打字very快!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这和我们的LapTop类并不兼容，但是我们不想要改代码呀，怎么办?<br>这时候就需要我们的适配器来完成这任务了!当然，在编写这个适配器之前我们需要定义一个接口，来对这个类的行为做一下规范。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>实现适配器的方式有两种<br>方法1：继承方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Ps2KeyBoard</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>方法2:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter2</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Ps2KeyBoard keyBoard;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        keyBoard.request();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter2</span><span class="params">(Ps2KeyBoard keyBoard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.keyBoard = keyBoard;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>LapTop类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Laptop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">(Target target)</span></span>&#123;</span><br><span class="line">        target.handleRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Laptop laptop=<span class="keyword">new</span> Laptop();</span><br><span class="line">        Ps2KeyBoard ps2KeyBoard=<span class="keyword">new</span> Ps2KeyBoard();</span><br><span class="line">        Target target=<span class="keyword">new</span> Adapter();</span><br><span class="line">        laptop.test01(target);<span class="comment">//方法1</span></span><br><span class="line">        Target target1=<span class="keyword">new</span> Adapter2(ps2KeyBoard);</span><br><span class="line">        laptop.test01(target1);<span class="comment">//方法2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>适配器模式主要是用来解决接口的不兼容问题，具体的解决思想，就是通过创建适配器类来对无法直接调用的对象进行包装，然后通过适配器类来调用这个不兼容的对象，返回我们需要的东西。<br>项目链接:<a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/adapter" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/adapter</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>建造者模式</title>
      <link href="/2018/02/10/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于建造者模式的复习回顾，建造者，模式分离了对象的构造和装配过程，适用于某一个对象构建过程比较复杂的情况下使用，<br>同时，装配以及构造之间实现了解耦，不同的构造器，相同的装配也能够做出不同的对象。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>1.对象的建造非常复杂，需要很多的步骤处理。<br>2.构建过程的每一步都不是必须要执行的，但是建造出来的还是”同一个东西”，只是出来的产品有一些属性会稍微”弱”一些。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在建造者模式中有如下的一些对象:<br>2.1 Builder：给出一个抽象接口，以规范产品对象的各个组成成分的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。<br>2.2 ConcreteBuilder：实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。 在建造过程完成后，提供产品的实例。<br>2.3 Director：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。<br>2.4 Product：要创建的复杂对象。<br>具体的UML示意图如下:<br><img src="http://img.hb.aicdn.com/b1e35377704552fe11d867b7978f7d61f97a8ae44bbe-GStIAg_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>这里我们通过组装一台汽车的例子，来理解这个设计模式：<br>首先是建造汽车的接口定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function">Engine <span class="title">buildEngine</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Bettery <span class="title">buildbettery</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Suspension <span class="title">buildSuspension</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>装配零件的接口定义:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarDirector</span> </span>&#123;</span><br><span class="line">    <span class="function">Tesla <span class="title">createTesla</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Engine类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String power;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Engine</span><span class="params">(String power)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.power = power;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> power;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPower</span><span class="params">(String power)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.power = power;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>汽车类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tesla</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line">    <span class="keyword">private</span> Bettery bettery;</span><br><span class="line">    <span class="keyword">private</span> Suspension suspension;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Engine <span class="title">getEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(Engine engine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bettery <span class="title">getBettery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bettery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBettery</span><span class="params">(Bettery bettery)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bettery = bettery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Suspension <span class="title">getSuspension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suspension;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuspension</span><span class="params">(Suspension suspension)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suspension = suspension;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其他的几个汽车零部件代码的比较类似，这里省略。<br>下面是汽车的构建类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeslaBuilder</span> <span class="keyword">implements</span> <span class="title">CarBuilder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Engine <span class="title">buildEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"组装发动机中..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Engine(<span class="string">"10000P"</span>);<span class="comment">//实际使用中，这边通常和工厂模式搭配，通过工厂模式来返回一个对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bettery <span class="title">buildbettery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"安装电池中...."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bettery(<span class="string">"1024"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Suspension <span class="title">buildSuspension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"安装悬挂中..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Suspension(<span class="string">"112"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最后是汽车的装配类，使用TeslaBuilder类中的build方法来进行装配。</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeslaDirector</span> <span class="keyword">implements</span> <span class="title">CarDirector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TeslaBuilder teslaBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeslaDirector</span><span class="params">(TeslaBuilder teslaBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.teslaBuilder = teslaBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tesla <span class="title">createTesla</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Engine e=teslaBuilder.buildEngine();</span><br><span class="line">        Suspension s=teslaBuilder.buildSuspension();</span><br><span class="line">        Bettery b=teslaBuilder.buildbettery();</span><br><span class="line">        Tesla tesla=<span class="keyword">new</span> Tesla();</span><br><span class="line">        tesla.setBettery(b);</span><br><span class="line">        tesla.setEngine(e);</span><br><span class="line">        tesla.setSuspension(s);<span class="comment">//看到没?一步一步装的</span></span><br><span class="line">        <span class="keyword">return</span> tesla;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>建造者模式和前面讲的抽象工厂有点”像”,但本质是不一样的，建造者模式，它是通过一步一步的装配来完成对象的创建，而对于抽象工厂，这个装配的过程是不需要考虑的，它考虑的只是如何取不同的”原材料”然后组装成一个新东西。<br>项目链接:<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/builder" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/builder</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>工厂模式</title>
      <link href="/2018/02/09/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于工厂模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>1.类不知道自己要创建哪一个对象<br>2.类用它的子类来指定创建哪个对象<br>3.客户需要清楚创建了哪一个对象</p><h2 id="2-三种不同工厂的区别"><a href="#2-三种不同工厂的区别" class="headerlink" title="2.三种不同工厂的区别"></a>2.三种不同工厂的区别</h2><p>简单工厂：针对一种产品。缺点是破坏了开放，封闭原则。<br>工厂模式: 对简单工厂做了相应的改进，改正了简单工厂破坏开放封闭原则的错误。<br>抽象工厂：针对于多种产品，和简单工厂以及工厂模式并无太大的关联。</p><h2 id="3-UML表示"><a href="#3-UML表示" class="headerlink" title="3.UML表示"></a>3.UML表示</h2><p>简单工厂：<br><img src="http://img.hb.aicdn.com/916c32275fa5a2862bbd6f75554d704736ac9a6352e0-TAijhT_fw658" alt=""><br>工厂模式:<br><img src="http://img.hb.aicdn.com/3432d48b509befcc539183a26a88b670c167601b578c-VYYZqT_fw658" alt=""><br>抽象工厂:<br><img src="http://img.hb.aicdn.com/13149049e34fccae194138e013ef85f44f8e4c568355-N4Gnol_fw658" alt=""></p><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h2><p>首先是简单工厂的代码实现：<br>我们以一个手机加工厂的例子展开，首先是Phone接口的相关代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>接下来是每一个具体厂商的手机：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuanWei</span> <span class="keyword">implements</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"不用不是中国人？"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMi</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"燃烧吧!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Iphone</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"只要$999"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>普通工厂类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Phone <span class="title">createPhone</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"小米"</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> XiaoMi();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"华为"</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> HuanWei();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"Iphone"</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Iphone();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span>  <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其次是工厂模式的代码实现，Phone接口与简单工厂类似，新增手机工厂接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line">     <span class="function">Phone <span class="title">createPhone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Iphone</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"只要$999"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IphoneFactory</span> <span class="keyword">implements</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">createPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iphone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后是抽象工厂的代码实现，抽象工厂主要是整合多个不同的对象，例如下面的例子：分别使用不同的零件就能整合出手机以及个人PC。<br>CPU接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CPU</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其他零部件的接口类似，这里省略。<br>电子加工工厂接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ElectronicFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">CPU <span class="title">createCpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">GraphicsProcessor <span class="title">createG</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Screen <span class="title">createScreen</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>手机加工工厂类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneFactory</span> <span class="keyword">implements</span> <span class="title">ElectronicFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CPU <span class="title">createCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pcpu();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GraphicsProcessor <span class="title">createG</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PhoneG();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Screen <span class="title">createScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PhoneScreen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>PC机加工工厂类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PcFactory</span> <span class="keyword">implements</span> <span class="title">ElectronicFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CPU <span class="title">createCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pcpu();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GraphicsProcessor <span class="title">createG</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PcG();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Screen <span class="title">createScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PcScreen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后，给出项目的代码连接：<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/factory" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/factory</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>单例模式</title>
      <link href="/2018/02/08/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于单例模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>单例模式的作用主要是保证一个类只有一个实例，并且提供一个访问这个实例的全局访问点，通常在以下的场景中使用：<br>1.读取配置文件<br>2.设计数据库连接池等等</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p><img src="http://img.hb.aicdn.com/0beda02b7655c492d6394df1c891edf4fc547d6938e7-BcXyYr_fw658" alt=""><br>从上图中可以看出，单例模式结构图中只包含了一个单例的角色。</p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>常见的单例模式总共有6种，下面分别对这6种单例模式进行实现：<br>3.1 懒汉式<br>特点：懒汉式加载，能够实现延时加载，缺点是调用的效率不高。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lasy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lasy s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Lasy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Lasy <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s==<span class="keyword">null</span>)&#123;</span><br><span class="line">            s=<span class="keyword">new</span> Lasy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.2 饿汉式<br>特点：饿汉式加载,线程安全,效率极高。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hungry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Hungry instance=<span class="keyword">new</span> Hungry();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hungry</span><span class="params">()</span> </span>&#123;<span class="comment">//防止被反射创建</span></span><br><span class="line">        <span class="keyword">if</span>(instance!=<span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.3 双重检测<br>特点：减少了锁的粒度，比懒汉式更有效率。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheck</span> </span>&#123;</span><br><span class="line">   <span class="keyword">volatile</span> <span class="keyword">private</span> <span class="keyword">static</span> DoubleCheck instance=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheck <span class="title">getInstance</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">           Thread.sleep(<span class="number">300</span>);</span><br><span class="line">           <span class="keyword">synchronized</span> (DoubleCheck.class)&#123;</span><br><span class="line">               <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                   instance=<span class="keyword">new</span> DoubleCheck();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.4 枚举方式<br>特点：<br>通过枚举的方式实现单例，缺点是无法实现懒加载。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumSingleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singletonOperation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//功能处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.5 内部类方式<br>特点：<br>类加载的过程是线程安全的，所以线程安全。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticInner instance=<span class="keyword">new</span> StaticInner();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInner <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.6 序列化和反序列化实现单例<br>特点：<br>添加readResolve()方法，防止序列化和反序列化机制对单例的破坏，具体可以查看:<a href="http://www.hollischuang.com/archives/1144" target="_blank" rel="noopener">http://www.hollischuang.com/archives/1144</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BetterLasy</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BetterLasy s;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> BetterLasy <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s==<span class="keyword">null</span>)&#123;</span><br><span class="line">            s=<span class="keyword">new</span> BetterLasy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后附上代码的连接：<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/singleton" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/singleton</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原型模式</title>
      <link href="/2018/02/07/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>摘要:<br>对于原型模式的复习回顾。<br><a id="more"></a><br>正文:</p><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景:"></a>1.使用场景:</h2><p>1.1.对象类型只有在运行期才能够确定。<br>1.2.克隆一直对象的副本。<br>1.3.大同小异的一些对象。</p><h2 id="2-UML表示"><a href="#2-UML表示" class="headerlink" title="2.UML表示"></a>2.UML表示</h2><p>在原型模式中通常用以下的几类对象:<br>Client角色：使用原型对象的客户程序<br>Prototype角色：规定了具体原型对象必须实现的接口（如果要提供深拷贝，则必须具有实现clone的规定）<br>ConcretePrototype：从抽象原型派生而来，是客户程序使用的对象，即被复制的对象。此角色需要实现抽象原型角色所要求的接口。<br>具体的UML示意图如下：<br><img src="http://img.hb.aicdn.com/6494dd27a94eba0101c37441bace3cf13fb9b83b38aa-UjlbSN_fw658" alt=""></p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h2><p>下面举一个忍者使用影分身术的例子：<br>定义普通忍者类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ninjia_A</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rp;<span class="comment">//血槽</span></span><br><span class="line">    <span class="keyword">private</span> Ninjutsu ninjutsu;<span class="comment">//忍术</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ninjia_A</span><span class="params">(String name, <span class="keyword">int</span> rp,Ninjutsu ninjutsu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.rp = rp;</span><br><span class="line">        <span class="keyword">this</span>.ninjutsu=ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Ninjutsu <span class="title">getNinjutsu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNinjutsu</span><span class="params">(Ninjutsu ninjutsu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ninjutsu = ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">         Ninjia_A nn;</span><br><span class="line">         nn= (Ninjia_A) <span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="keyword">return</span> nn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRp</span><span class="params">(<span class="keyword">int</span> rp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rp = rp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>S级忍者:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ninjia_S</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2169380777227967513L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rp;<span class="comment">//血槽</span></span><br><span class="line">    <span class="keyword">private</span> Ninjutsu ninjutsu;<span class="comment">//忍术</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ninjia_S</span><span class="params">(String name, <span class="keyword">int</span> rp,Ninjutsu ninjutsu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.rp = rp;</span><br><span class="line">        <span class="keyword">this</span>.ninjutsu=ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Ninjutsu <span class="title">getNinjutsu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNinjutsu</span><span class="params">(Ninjutsu ninjutsu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ninjutsu = ninjutsu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRp</span><span class="params">(<span class="keyword">int</span> rp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rp = rp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">dclone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException, IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line">        ByteArrayInputStream bis=<span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>忍术类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ninjutsu</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> damage;<span class="comment">//破坏力</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ninjutsu</span><span class="params">(<span class="keyword">int</span> damage, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.damage = damage;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDamage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> damage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDamage</span><span class="params">(<span class="keyword">int</span> damage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.damage = damage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>测试类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        Ninjia_A kakaxi=<span class="keyword">new</span> Ninjia_A(<span class="string">"旗木.卡卡西"</span>,<span class="number">50</span>,<span class="keyword">new</span> Ninjutsu(<span class="number">500</span>,<span class="string">"影分身"</span>));</span><br><span class="line"></span><br><span class="line">        Ninjia_A kk;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             kk= (Ninjia_A) kakaxi.clone();</span><br><span class="line"></span><br><span class="line">             System.out.println(kakaxi.getNinjutsu()==kk.getNinjutsu());</span><br><span class="line">            <span class="comment">// System.out.println(kk.getNinjutsu().getName()+"  "+kk.getNinjutsu().getDamage());</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Ninjia_S naturo=<span class="keyword">new</span> Ninjia_S(<span class="string">"漩涡.那乳托"</span>,<span class="number">500</span>,<span class="keyword">new</span> Ninjutsu(<span class="number">1000</span>,<span class="string">"影分身"</span>));</span><br><span class="line">        Ninjia_S nn;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nn= (Ninjia_S) naturo.dclone();</span><br><span class="line">            System.out.println(naturo.getNinjutsu()==nn.getNinjutsu());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试结果:<br><img src="http://img.hb.aicdn.com/5a48aaa1121b2205e3a42bc20467d2df713f01ecd5d-IVzWPz_fw658" alt=""></p><p>结论：原型模式更像一种编程的技巧，很少单独使用，注意的是在Java中，除了基本数据类型外，其他的都是引用类型，这个必须注意。<br>最后，附上文章的代码下载连接：<br><a href="https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/prototype" title="源代码下载" target="_blank" rel="noopener">https://github.com/saiJPlus/design_pattern_review/tree/master/src/java/prototype</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>每个极客都应该知道的Linux技巧</title>
      <link href="/2018/01/14/%E6%AF%8F%E4%B8%AA%E6%9E%81%E5%AE%A2%E9%83%BD%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84Linux%E6%8A%80%E5%B7%A7/"/>
      <content type="html"><![CDATA[<p>摘要:<br>转载自:<a href="http://blog.csdn.net/ww122081351/article/details/22716067" target="_blank" rel="noopener">http://blog.csdn.net/ww122081351/article/details/22716067</a><br><a id="more"></a><br>正文:<br>是什么区分开普通的Linux用户和超级极客的呢？很简单：用在学习那些使长时工作转变为一瞬间工作的技巧、诀窍、秘诀和技术上的时间。如果你想提高效率而又不用做这些搜集资料的跑腿活儿，那我们已经收集了50多条简单易学的Linux技巧，以帮助你更潇洒地工作，并且最大限度的利用你的电脑。开始享受吧！</p><p>1：检查不是由你运行的程序</p><p>难度：高级</p><p>应用程序：bash（译注：UNIX或者LINUX的shell）</p><p>想象下这个场景-你已经准备好了要和同事在办公室里对战一局快速的Crack Attack（译注：一款免费的OpenGL游戏，类似俄罗斯方块），不料却发现，当你正准备要击败你这个傲慢的下属时，方块却停止了-是什么让你的机器变得这么慢？这肯定是因为其他的用户运用他们娴熟的经验来盗取你宝贵的CPU时间、服务器或者其他的诡异方式，真烦人！</p><p>好，让我们列举出系统中所有不是由你运行的程序！</p><p>ps aux | grep -v <code>whoami</code> </p><p>或者，更巧妙些的是，为什么不列出最占用时间的前十个程序呢：</p><p>ps aux–sort=-%cpu | grep -m 11 -v <code>whoami</code> </p><p>也许最好使用root权限来运行这条指令，因为这样可以过滤出大部分活跃的后台程序。现在你有了这些信息，你可以终止他们的进程，但是更“卑鄙”的是反复地在他们的桌面上运行xeyes（译注：Linux下的一条好玩的命令）！</p><p>2：在多个文件中替换掉相同的文本</p><p>难度：中等</p><p>应用程序：find（译注：Linux下的一条命令）/Perl</p><p>如果你有个文件，想在多个位置进行替换，这里有很多方法来实现。调用test[someting]把当前目录里所有文件中的Windows替换成Linux，你可以像这样运行它：</p><p>perl -i -pe ’s/Windows/Linux/;’ test* </p><p>要替换当前目录以及下层目录里所有文件中的Windows为Linux，你可以这样运行：</p><p>find . -name ’<em>.txt’ -print | xargs perl -pi -e’s/Windows/Linux/ig’ </em>.txt </p><p>或者如果你更需要让它只作用于普通文件上：</p><p>find -type f -name ’*.txt’ -print0 | xargs –null perl -pi -e ’s/Windows/Linux/’ </p><p>节省了大量的时间并且获得了高水平的大师等级！</p><p>3：合并一个不稳定的终端</p><p>难度：简单</p><p>应用程序：bash</p><p>我们都已经做过这件事了-偶尔使用less或者cat来列出一个文件，或者以浏览二进制文件而结束，这通常包含各种可以轻易弄乱你的终端显示的控制代码、警报声、一些有趣的字符，以及一些奇怪的颜色组合，最后，你的字体将会被一些难以辨认的字符所替代，而你却不知道该怎么办。显然bash仍然继续工作着，但是你就是不能明白到底发生了什么！发送一个初始化命令给这个终端：</p><p>reset </p><p>然后一切就再次恢复正常了。</p><p>4：创造Mozilla关键词</p><p>难度：简单</p><p>应用程序：Firefox/Mozilla</p><p>在浏览器上的一个有用的特征是，它们有一种能力，可以通过输入gg onion来通过Google搜索onion这个词的一切。同一功能在Mozilla上也可实现，通过单击Bookmarks（书签）&gt;Manage Bookmarks（管理书签）然后添加一个新的书签，添加的URL就像这样：</p><p><a href="http://www.google.com/search?q=%s" target="_blank" rel="noopener">http://www.google.com/search?q=%s</a> </p><p>现在选择书签编辑器中的条目并且点击Properties（属性）按钮，现在输入一个类似gg的关键字（或者可以是你选择的任何字符）就行了。在URL中的%s将被关键字之后的文本内容替代。你可以用这种方法向其他一些依赖你当前URL信息的网站发送请求。</p><p>或者，右击一个搜索区域然后选择菜单选项“为这个搜索添加一个关键词…”。接下来的会话将允许你使用一个指定的关键词。</p><p>5：运行多种X会话</p><p>难度：简单</p><p>应用程序：X</p><p>如果你给别人分享了你的Linux box（），而厌烦了不断的登入、登出，当你知道了这不是必要的时候，可能会如释重负。假设你的电脑以图形模式启动（runlevel 5），通过同时按下Control+Alt+F1键-你将得到一个登陆提示。输入你的登录名以及密码然后执行：</p><p>startx – :1 </p><p>来进入你的图形环境。按下Ctrl+Alt+F7来回到在你之前的用户会话，如果想回到你自己的用户会话则按下Ctrl+Alt+F8。</p><p>你可以重复使用这项技巧：F1键到F6键可以识别六个控制台会话，而F7到F12可以识别六个X会话。警告：尽管这在多数情况下是适用的，但是不同的变种可能用不同的方式来实现这项功能。</p><p>6：更快地浏览</p><p>难度：简单</p><p>应用程序：KDE（译注：一种Linux的桌面环境）</p><p>KDE是一个虽然小众，但是在提升你的网页浏览经验方面很有用的选择。启动一个KDE控制中心，然后从工具条中选择System（系统）&gt;KDE performance。现在你可以选择预加载浏览器实例。实际上，这意味著浏览器在开机的时候就开始运行，在你用之前都保持隐藏状态。当你想要使用它的时候，它几乎是瞬间出现。</p><p>7：简单地备份你的网站</p><p>难度：简单</p><p>应用程序：Backups</p><p>如果你想要从一台电脑上备份一个目录，但你仅仅想要复制改变的文件到它的备份而不是复制所有的东西到各自的备份，你可以使用工具rsync来实现它。你需要在这个远程的源备份计算机上有一个账户。下面是这条命令：</p><p>rsync -vare ssh <a href="mailto:jono@192.168.0.2" target="_blank" rel="noopener">jono@192.168.0.2</a>:/home/jono/importantfiles/* /home/jono/backup/ </p><p>这样我们就备份了192.168.0.2地址上/home/jono/importantfiles/目录下的所有文件到当前机器上的/home/jono/backup目录下。</p><p>8：使你的时钟保持准时</p><p>难度：简单</p><p>应用程序：NTP</p><p>如果你发现电脑上的时钟似乎与时间脱轨了，你可以使用一个特殊的NTP工具，来确保它准到只有穿实验服的人才会需要的程度。你需要安装ntpdate工具，它通常包含在NTP包中，然后你就可以与NTP服务器保持同步了：</p><p>ntpdate ntp.blueyonder.co.uk </p><p>可以在<a href="http://www.eecis.udel.edu/~mills/ntp/clock1b.html上获得相应的NTP服务器的列表。如果你修改了你的开机程序并且在脚本中包含这些命令，就可以确保无论何时你启动电脑都是完全准时的。你还可以运行一个定时任务来校对时间。" target="_blank" rel="noopener">www.eecis.udel.edu/~mills/ntp/clock1b.html上获得相应的NTP服务器的列表。如果你修改了你的开机程序并且在脚本中包含这些命令，就可以确保无论何时你启动电脑都是完全准时的。你还可以运行一个定时任务来校对时间。</a></p><p>9：找到最大的文件</p><p>难度：简单</p><p>应用程序：Shell</p><p>计算机中一个常见的问题是，你可能想删一部分大的文件（类似音频或视频片段）。如下你可以找到当前目录中最大的那个文件：</p><p>ls -lSrh </p><p>“r”的作用是将大的文件列在后面，而“h”则是给出易于人们阅读的输出(MB或者诸如此类)。你也可以搜寻最大的MP3/MPEG文件：</p><p>ls -lSrh <em>.mp</em> </p><p>你也可以通过下面这条命令搜寻最大的目录：</p><p>du -kx | egrep -v ”./.+/” | sort -n </p><p>10：Nautilus快捷键</p><p>难度：简单</p><p>应用程序：Nautilus（译注：Linux图形界面中的一个文件管理器）</p><p>尽管很多文件管理器近日来被设计为使用鼠标进行管理，但有时用键盘还是方便些。Nautilus有一些键盘快捷键，可以使你快速浏览文件：</p><p>打开一个定位文件 – Ctrl+L<br>打开父文件夹 – Ctrl+Up<br>用方向键来浏览当前文件夹<br>你也可以使用‘emblems’来定制文件图标。这里有少量的应用于个别文件或者组的图象展示。打开Edit(编辑) &gt; Backgrounds and Emblems(背景和符号)菜单条目，然后拖放你想要的图片即可。</p><p>11：整理你的数据库</p><p>难度：简单</p><p>应用程序：MySQL</p><p>无论何时你改变一个MySQL数据库的结构，或者从中删掉大量的数据，文件都有可能被分散，并导致一些性能损失。尤其是当运行查询命令时这个情况最容易发生。每当你要改动数据库的时候，记得运行这个优化器：</p><p>mysqlcheck -o <databasename> </databasename></p><p>也许你会发现，如果你使用VARCHAR文件，有必要定期的整理你的数据库表：这个变长列（variable-length columns）是非常倾向于分裂的。</p><p>12：更快的邮件</p><p>难度：简单</p><p>应用程序：KMail</p><p>连三秒钟都不想花费在找邮箱客户端上面？不想被桌面上堆积成山日渐腐烂的图标搞得找不到鼠标指针？不管你正在KDE里干什么，按几下键盘就可以发邮件了。输入：</p><p>mailto:<a href="mailto:plop@ploppypants.com" target="_blank" rel="noopener">plop@ploppypants.com</a> </p><p>按下return，KMail将会自动启动，为你的至理名言做好准备。你甚至不需要填写完整的邮件地址。这对Internet地址也是有效的：尝试输入<a href="http://www.slashdot.org来启动浏览器。" target="_blank" rel="noopener">www.slashdot.org来启动浏览器。</a></p><p>13：同化你的构造</p><p>难度：简单</p><p>应用程序：GCC</p><p>如果你运行一个拥有适量RAM的多处理机系统（SMP），你会发现，在写代码时，运行一个parallel make很有好处。与按照默认方式运行make并执行serial builds相比，parallel build 是一种很有效的改善方法。让make在building的时候允许同时存在多个child，用如下的-j转换即可：</p><p>make -j4; make -j4 modules </p><p>14：节省电池电源</p><p>难度：中等</p><p>应用程序：hdparm</p><p>很可能你已经对使用hdparm来调整一个硬件驱动很熟悉了，但是它还能节约你的笔记本的电池寿命，或者通过降低硬盘转速来使生活更宁静。</p><p>hdparm -y /dev/hdb </p><p>hdparm -Y /dev/hdb </p><p>hdparm -S 36 /dev/hdb </p><p>按顺序，这些命令将让硬件转换成Standby（待命）模式，再转换成Sleep（睡眠）模式，并且最终设置Automatic（自动）旋转超时。这个结尾包含一个以5秒为单位的一块块数字变量（例如，值为12就等同于一分钟）。</p><p>顺便说一下，这个降低旋转时间至5秒为单位的习惯真值得拿一个特别的用户友好奖——这个值的设置也许有什么历史原因，但我们不知道。如果你恰好知道为什么，请来信告知我们！</p><p>15：无线速度管理</p><p>难度：中等</p><p>应用程序：iwconfig</p><p>一个radio发送/接受设备和其他设备间的传输速度，取决于有多少可用信号。在信号减弱的时候如需维持传输，就需要降低radio的传输速度。一般情况下，radio都会自己找到可用信号，并自动选择最快的速度。</p><p>在边缘区域中，信号强度勉强够用，这时候就可能因radio不断调试连接速度而造成不必要的包丢失。如果不能加强天线增益，或移动设备位置来获取更充足的信号，可以尝试强制让card同步到一个较低的速率。这样，radio就会减少调试频率，实际上，还会比使用持续触发的链接传输得快一些。不同的驱动器有不同的链接速度设置方法。在Linux中，可用iwconfig来设置速度：</p><p>iwconfig eth0 rate 2M </p><p>这个指令能强制使广播总是同步在2Mbps，即使还存在其他可用速度。你也可以设置一个明确的速度作为上限，允许卡自动按照任何低于这个上限的速度来工作，但是不能高于它。例如，你可以把它作用于上文举例的连接上：</p><p>iwconfig eth0 rate 5.5M auto </p><p>如上的指令可以让驱动器将速度上限设为5.5Mbps，只慢不快。想要将card恢复为全自动缩放，只需要制定它自己自动工作。</p><p>iwconfig eth0 rate auto </p><p>通常卡在1Mbps时比它们在11Mbps时可以延伸的更远。在这两种速率之间，Orinoco卡有12dB的差别，即降低数据速率可获得的潜在传输距离的四倍。</p><p>16：疏通开端口</p><p>难度：中等</p><p>应用程序：netstat</p><p>要获取在Linux服务器上处于监听状态的网络服务器的列表，可使用netstat程序：</p><p>root@catlin:~# netstat -lnp </p><p>Active Internet connections (only servers) </p><p>Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name </p><p>tcp 0 0 0.0.0.0:5280 0.0.0.0:* LISTEN 698/perl </p><p>tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 217/httpd </p><p>tcp 0 0 10.42.3.2:53 0.0.0.0:* LISTEN 220/named </p><p>tcp 0 0 10.42.4.6:53 0.0.0.0:* LISTEN 220/named </p><p>tcp 0 0 127.0.0.1:53 0.0.0.0:* LISTEN 220/named </p><p>tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 200/sshd </p><p>udp 0 0 0.0.0.0:32768 0.0.0.0:* 220/named </p><p>udp 0 0 10.42.3.2:53 0.0.0.0:* 220/named </p><p>udp 0 0 10.42.4.6:53 0.0.0.0:* 220/named </p><p>udp 0 0 127.0.0.1:53 0.0.0.0:* 220/named </p><p>udp 0 0 0.0.0.0:67 0.0.0.0:* 222/dhcpd </p><p>raw 0 0 0.0.0.0:1 0.0.0.0:* 7 222/dhcpd </p><p>如上消息告诉你PID为698的进程是一个绑定在5280端口的Perl进程。如果你不是超级用户，系统将不会显示哪个程序是运行在哪个端口上的。</p><p>17：更快的硬件驱动</p><p>难度：高级</p><p>应用程序：hdparm</p><p>也许你已经知道hkparm工具可以用于测试硬盘速度和更改一些设置。它还可以用于优化驱动性能，并且开启一些默认关闭的功能。在我们开始之前，敬告您，改变驱动选项可能会造成数据损坏，所以首先请备份你所有的重要数据。如下命令可以用来测试速度：</p><p>hdparm -Tt /dev/hda </p><p>你将会看到类似于这样的东西：</p><p>/dev/hda: </p><p>Timing buffer-cache reads: 128 MB in1.64 seconds =78.05 MB/sec </p><p>Timing buffered disk reads:64 MB in 18.56 seconds = 3.45MB/sec </p><p>现在我们可以尝试让它提速。找出你的驱动目前设置使用的是哪个选项，然后传递给hdparm这个硬件的名称:</p><p>hdparm /dev/hda </p><p>/dev/hda: </p><p>multcount=16 (on) </p><p>I/O support=0 (default 16-bit) </p><p>unmaskirq=0 (off) </p><p>using_dma=0 (off) </p><p>keepsettings =0 (off) </p><p>readonly =0 (off) </p><p>readahead=8 (on) </p><p>geometry = 40395/16/63, sectors = 40718160, start = 0 </p><p>这相当于一个默认设置。多数的Linux发行版本都会选择一个可以运行在多数硬件上的安全选项。为了获得更快的速度，你可能想要激活dma模式，然后当然要调整I/O支持。多数现代计算机支持模式3，这是一个近乎双倍通量的32位转换模式。你也可以尝试：</p><p>hdparm -c3 -d1/dev/hda </p><p>然后返回这个速度，查看一下不同。检验你的硬件支持哪些模式，然后可以在hdparm的man手册中学习如何设置它们。</p><p>18：在你手中的可用时间</p><p>难度：高级</p><p>应用程序：Perl</p><p>对计算来说，浪费的资源就是那些本可以派上更好的用场的资源。不管你还运行了什么别的程序，为什么不尝试运行一个进程，在终端标题栏实时显示当前的平均负载呢？</p><p>将这个存为一个脚本并命名为tl，然后把它存到你的~/bin目录下：</p><p>#!/usr/bin/perl -w </p><p>use strict; </p><p>$|++; </p><p>my $host=<code>/bin/hostname</code>; </p><p>chomp $host; </p><p>while(1) { </p><p>open(LOAD,”/proc/loadavg”) || die ”Couldn’t open /proc/loadavg: $!\n”; </p><p>my @load=split(/ /,<load>); </load></p><p>close(LOAD); </p><p>print ”$host: $load[0] $load[1] $load[2] at ”, scalar(localtime); </p><p>print ”07″; </p><p>sleep 2; </p><p>} </p><p>如果你想用用load average和你登陆的机器的当前时间，来替换titlebar名字，与西宁tl&amp;即可。它会很恰当的在后台运行，即使你运行一个类似Vim的交互式程序。</p><p>19：不使用X完成抓取一次屏幕截图</p><p>难度：简单</p><p>应用程序：Shell</p><p>确实有很多屏幕捕获的工具，但是他们大部分都是基于X的。这导致了一个问题，当你运行一个X应用程序时，将会干扰这个你想要抓取的应用程序——或许是一个游戏或者甚至是一个Linux安装程序。但如果你使用了超棒的ImageMagick（译注：一个开源的图片处理工具集和开发包）导入命令，你就可以通过控制台来对X模块进行抓取。很简单，打开一个虚拟终端（例如Ctrl+Alt+F1）然后输入如下：</p><p>chvt 7; sleep 2; import -display :0.0 -window root sshot1.png; chvt 1; </p><p>chvt命令改变了虚拟终端，而sleep命令给重绘屏幕提供了一个时间。导入命令会在最后的chvt命令把你再次打回到虚拟终端之前，捕获所有的显示并且保存到一个文件中。请确保你把所有的命令都输入在同一行中。</p><p>这是甚至在Linux安装程序上也是有效的，很多安装程序都只留下一个控制台而转去后台运行——一个一流的到处运行的屏幕抓取器只需要加载一些它所需要的库到一个floppy（译注：磁盘）/CD上。</p><p>20：远程访问你的程序</p><p>难度：简单</p><p>应用程序:X</p><p>如果你想要躺在床上使用你的Linux笔记本从你的Window机器上访问你的应用程序，可以使用SSH来实现。首先你需要在/etc/ssh/sshd_config中激活以下设置：</p><p>X11Forwarding yes </p><p>现在我们可以使用如下命令在192.168.0.2上运行GIMP：</p><p>ssh -X 192.168.0.2 gimp </p><p>21：用到man手册</p><p>难度：简单</p><p>应用程序：man</p><p>如果你在一个特殊的项目或者命令中需要帮助，man手册是一个好的入门。通常你使用man<command>来访问man手册，但是你也可以通过一个特殊的man页描述的关键词来搜索man页。举例来说，搜索所有详述login的man页：</p><p>man -k login </p><p>当你访问了一个man页，你也可以使用斜杠键来搜索一个特定的词而不是用man页本身。在你的键盘上按下“ / ”然后输入搜索项是非常简单的。</p><p>22：和你的医生对话</p><p>难度：简单</p><p>应用程序：Emacs</p><p>如果说Emacs只是个文本编辑器，就好像说Triumph只是个摩托车，或者说世界杯就是个四年一度的足球赛。好吧，它确实是个文本编辑器，但那只是一小~~~部分。举个栗子？打开编辑器，按下Esc键，紧接着按下X，然后进入doctor：你将会进入到一个离奇的对话中，有一个假想的但是熟练的精神治疗师。如果你想要磨蹭你的时间，这是一个很好的方法。</p><p>Esc-X tetris </p><p>会将你的‘编辑器’转变成一个老的、受欢迎的游乐场游戏。</p><p>疯狂到此为止了吗？绝对没有！检查你的发行版本的包，列出他们在你的Emacs上捆绑的其他功能：我们看到有国际象棋，Perl集成，IRC chat（译注：一种聊天工具），法文翻译，HTML转换，一个Java开发环境，灵巧的编辑，甚至还有一个被称为“semantic bovinator”（语义纠错）的东西。我们确实对最后一个能做什么的毫无头绪，但是我们断定无论如何你都敢尝试它！（请先阅读免责声明！）</p><p>23：生成包关联图表</p><p>难度：简单</p><p>应用程序：Debian</p><p>Debian系统最受争议的是它能安装一个包，并自动满足其附属（dependency）。如果你想要以图形形式表现这些包之间的关系（这对于了解系统如何协调工作是非常有用的），你可以使用Debian中非自由的Graphviz包（apt-get install graphviz）然后使用如下命令：</p><p>apt-cache dotty &gt; debian.dot </p><p>这个命令会生成图片文件并存入dotty：</p><p>dotty debian.dot </p><p>24：卸载忙碌状态的驱动</p><p>难度：简单</p><p>应用程序：bash</p><p>你应该很熟悉这种情况-尝试去卸载一个驱动，但是系统却告诉你它处于忙碌状态。但是什么程序在占用呢？一个短小的单行代码将告诉你：</p><p>lsof +D /mnt/windows </p><p>这将返回命令和进程ID以及任何正在访问/mnt/windows目录的任务。接下来你就可以定位它们，或者使用kill命令来终结它们。</p><p>25：文本文件的转换</p><p>难度：简单</p><p>应用程序：recode</p><p>recode是一个小而实用并且可以帮你在不同平台上使用文本文件时节省大量精力的工具。它的缺陷主要是源于换行符。一些系统使用一个换行字符，而其他的一些系统使用回车。更多其他的系统两个都用。最后的结果就是，如果你从一个平台移动文本文件到另一个平台上，你会有太多或太少的换行符，还会有很多奇怪的字符残留。</p><p>然而，recode命令的参数是有一些神秘的，所以为什么不把这种技巧和HACK 26结合到这个功能中，然后建立一些有用的别名：</p><p>alias dos2unix=‘recode dos/CR-LF..l1′ </p><p>alias unix2win=‘recode l1..windows-1250′ </p><p>alias unix2dos=‘recode l1..dos/CR-LF’ </p><p>还有很多recode选项-它们确实可以转换大量字符间的设置。查阅man手册来获取更多信息。</p><p>26：只列出今天的文件</p><p>难度：简单</p><p>应用程序：Various</p><p>你可能熟悉这个问题，今天早些时候你创建了一个文本文档，而现在立刻就需要它。然而，你想不起来你给它起了个什么可笑的名字，作为一个熟练的geek，你的家文件夹被836个不同的文件填满了。那你要如何找到它呢？哈哈，这里有很多方法，但是这个小技巧告诉你管道和结合使用两个强力的shell命令是多么有效：</p><p>ls -al –time-style=+%D | grep <code>date +%D</code> </p><p>ls命令的参数使得这个日期戳以一种特殊的方式呈现。这个狡猾的位就是这样传递给grep来输出的。grep的参数是它自己的命令（因为是倒引号所以执行），用来将当前的日期替代成匹配的字符。你可以轻易的修改它来搜索其他特别的日期、时间、文件大小或者任何东西。结合它与HACK 26是非常节省输入的。</p><p>27：避免常见的拼写错误和长命令</p><p>难度：简单</p><p>应用程序：Shell</p><p>这个alias命令对于设立长命令的快捷键是有用的，或者说是聪明的事情。HACK 25中，我们可以通过以下命令来得到一个新命令，lsnew：</p><p>alias lsnew=“ ls -al –time-style=+%D | grep <code>date +%D</code> ” </p><p>然而alias还有其他的用处。例如，解决常见的拼写错误。有多少次你在改变父目录时忽略了空格？不用再苦恼了！</p><p>alias cd..=“cd ..” </p><p>作为一种选择，试试重写一些已经存在的命令怎么样？</p><p>alias ls=“ls -al” </p><p>像我们一样节省一些按键，或者你总是想要完成清单。</p><p>要为每一个会话激活这些快捷键，只用添加alias命令到你的用户里家文件目录中的.bashrc文件中。</p><p>28：更改Mozilla的秘密设置</p><p>难度：简单</p><p>应用程序：Mozilla</p><p>如果你想要改变Mozilla操作，但是在首选项中并没有提供可以点击的选项来帮助你，这里有一个特殊的模式可以让你在Mozilla中激活，这样你就能改变一切了。要访问它，在地址栏中输入这些：</p><p>about:config </p><p>这样你就可以改变表中文件里每一个你感兴趣的设置的值。</p><p>其他有趣的模式包括总体信息（about：），插件详情（about:plugins），开发者信息（about:credits）和一些总体情况（about:mozilla）。</p><p>29：一个星星的背景</p><p>难度：简单</p><p>应用程序：KStars</p><p>你可能已经玩过KStars了，但是如何创造一个每次当你启动时就更新的KStars背景图呢？</p><p>KStars可以和–dump switch一起运行，它可以从你的启动设置中打印出一幅图片，但一点也不会增加GUI的负载。你可以写一个脚本来运行它生成一个每天都更换的桌面图片（或者你可以只是使用这个方法生成图片）。</p><p>像这样使用KStars：</p><p>kstars –dump –width 1024 –height 768 –filename = ~/kstarsback.png </p><p>你可以把它添加到~/.kde/Autostart文件夹的一个脚本中，一启动就开始运行。在浏览器中找到这个文件，把它拖到桌面上然后选择“设置为墙纸”，将它作为一个随机生成的背景图来使用。</p><p>30：直接打开一个SVG</p><p>难度：简单</p><p>应用程序：Inkscape</p><p>你可以通过shell运行Inkscape，然后直接通过一个URL来立刻编辑一张图片。只用输入：</p><p>inkscape <a href="http://www.somehost.com/graphic.svg" target="_blank" rel="noopener">http://www.somehost.com/graphic.svg</a> </p><p>记得要另存为一下！</p><p>31：不用编辑器来进行编辑</p><p>难度：中等</p><p>cut -c 8-15 file1 &gt; file2 </p><p>应用程序：好多</p><p>通常非常长的文件是很难用文本编辑器来进行操作的。如果你不时地要做这件事，可能你会发现用某些趁手的命令行工具会更快一些，就像下面这个例子一样。</p><p>从文件file1中打印第一列和第三列到文件file2中，我们可以使用awk：</p><p>awk ’{print $1, $3}’ file1 &gt; file2 </p><p>只输出file1中第八列到第十五列中的字符，我们可以使用cut：</p><p>cut -c 8-15 file1 &gt; file2 </p><p>要使用单词word2来替换文件file1中的单词word1，我们可以使用sed命令：</p><p>sed ”s/word1/word2/g” file1 &gt; file2 </p><p>通常这是一个比打开文本编辑器更快得到结果的方式。</p><p>32：只备份选中的文件</p><p>难度：中等</p><p>应用程序：tar</p><p>想要使用tar来备份一个目录中的某一文件？你可以使用-T标志。首先，用你想要备份的文件来创建一个文件：</p><p>cat &gt;&gt; /etc/backup.conf </p><h1 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h1><h1 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h1><h1 id="etc-yp-conf"><a href="#etc-yp-conf" class="headerlink" title="/etc/yp.conf"></a>/etc/yp.conf</h1><h1 id="etc-sysctl-conf"><a href="#etc-sysctl-conf" class="headerlink" title="/etc/sysctl.conf"></a>/etc/sysctl.conf</h1><p>EOF </p><p>然后运行tar，并使用-T标志指向刚刚创建的文件。</p><p>tar -cjf bck-etc-<code>date +%Y-%m-%d</code>.tar.bz2 -T /etc/backup.conf </p><p>现在你已经备份好了。</p><p>33：在文件中合并列</p><p>难度：中等</p><p>应用程序：bash</p><p>在文件中拆分列是非常简单的，合并它们稍微复杂一点。下面是一个简单的完成这项工作的脚本：</p><p>#!/bin/sh </p><p>length=<code>wc -l $1 | awk ’{print $1}’</code> </p><p>count=1 </p><p>[ -f $3 ] &amp;&amp; echo ”Optionally removing $3″ &amp;&amp; rm -i $3 </p><p>while [ “$count” -le “$length” ] ; do </p><p>a=<code>head -$count $1 | tail -1</code> </p><p>b=<code>head -$count $2 | tail -1</code> </p><p>echo ”$a$b” &gt;&gt; $3 </p><p>count=<code>expr $count + 1</code> </p><p>done </p><p>给这个脚本命名为merge.sh并且如下运行它：</p><p>chmod u+x merge.sh </p><p>现在，如果你想要合并file1和file2中的列到file3，下面是执行方法：</p><p>/path/to/merge.sh file1 file2 file3 </p><p>/path/to必须被你文件系统中的merge.sh位置所替代。</p><p>34：大小写敏感</p><p>难度：中等</p><p>应用程序：bash</p><p>有些时候，一个词在不同操作系统间没有任何区别，在Linux中，“Command”和“command”是不同的东西。当从Windows移动文件到Linux中时会造成一些麻烦。tr是一个小的shell功能，可以用于改变一堆文件。</p><p>#!/bin/sh </p><p>for i in <code>ls -1</code>; do </p><p>file1=<code>echo $i | tr [A-Z] [a-z]</code> </p><p>mv $i $file1 2&gt;/dev/null </p><p>done </p><p>通过执行这个，FILE1和fiLe2将被分别重命名为file1和file2.</p><p>35：Emacs中的宏指令</p><p>难度：中等</p><p>应用程序：Emacs</p><p>当编辑文件时，你通常会发现那些任务都是冗长和重复的，所以为了节约你的时间，你应该录制一个宏指令。在Emacs中，你将必须经历以下步骤：</p><p>1.按下 Ctrl+X 来开始一个记录。</p><p>2.插入所有你想要的按键和命令。</p><p>3.当你结束时按下Ctrl+X。</p><p>现在，你可以用以下命令来执行：</p><p>Ctrl -u <number> Ctrl -x e </number></p><p><number>是你想执行宏指令的次数。如果你输入的值为0，这个宏指令将被一直执行直到文件的结束。Ctrl -x e等同于Ctrl -u 1 Ctrl-x e。</number></p><p>36：简单的垃圾邮件清理</p><p>难度：中等</p><p>应用程序：KMail</p><p>垃圾邮件，或者不请自来的大批邮件，已经是个很普遍的问题，出于必要，现在几乎每个人都有某种形式的垃圾邮件保护。很多ISP包含垃圾邮件过滤，但是它并没有被设置的太过主动，而且通常很多都是简单的标记垃圾邮件，然后让它进来（ISP可不想因为丢失了你的邮件而被责备）。</p><p>所以，你在客户端上可能已经设置了反垃圾邮件的东西，要让它运行得更好，你可以写一些过滤器来移除被标记的垃圾邮件。标签是作为标题包含进来的。在KMail中，你可以只创建一个快速过滤器来将你的邮件装箱，或者干脆把它放到垃圾文件夹中。精确标题的使用将决定于你的ISP使用的软件，但是通常都是像SpamAssassin这样系统的类似X-Spam-Flag = YES。</p><p>在KMail中简单创建一个过滤器，选择Match Any of the Following（匹配下面的任何一个）然后输入标题细节和你需要的动作。应用过滤器到即将到来的邮件上，然后你的垃圾邮件的一半将不会再来打扰你了。</p><p>37：阅读OOo文档但不使用OOo</p><p>难度：中等</p><p>应用程序：OpenOffice.org（译注：一套跨平台办公室软件套件）</p><p>你曾经有没有过拿到一个OOo文档，但是没有OpenOffice.org来阅读？所以你就把它保存成普通的文本文件（.txt），但是被 StarOffice .sxw 格式所替代？这个文本文件可以得到拯救。首先，这个sxw文件是一个压缩文档，所以解压它：</p><p>unzip myfile.sxw </p><p>你想要的是名为’content.xml’的文件。不幸的是，它充满了xml的标签以至于非常难以辨认，所以要用一些Perl魔法将它们过滤出去：</p><p>cat content.xml | perl -p -e”s/&lt;[^&gt;]*&gt;/ /g;s/\n/ /g;s/ +/ /;” </p><p>这可能丢失了很多格式，但是至少现在它是可以阅读的。</p><p>38：搜索和执行</p><p>难度：中等</p><p>应用程序：find</p><p>find命令并不只是在寻找文件方面很有用，它在处理以下问题时也是非常有用的。这里有一个简短的例子。</p><p>假设我们有很多的压缩文件，现在我们想找到所有的压缩文件：</p><p>find . -name ’*.gz’ </p><p>将会定位出所有当前路径下的gzip文档。但是假设我们想要检查它们是否是有效文档，gunzip -vt选项将会帮我们实现这个，我们还可以机智地使用xargs结合这两个操作：</p><p>find . -name ’*.gz’ | xargs gunzip -vt </p><p>39：正确使用whois服务器</p><p>难度：中等</p><p>应用程序：whois</p><p>whois命令在追捕Internet上的恶棍以及给他们提供服务的ISP都是非常有用的。不幸的是，有很多whois服务器，如果你的反搜索一个域名，通常你不得不用一个指定的他们使用的TLD。然而，一些whois代理将自动转送你的查询到正确的服务器上。其中之一可以在<a href="http://whois.geektools.com/上获得。" target="_blank" rel="noopener">http://whois.geektools.com/上获得。</a></p><p>whois -h whois.geektools.complop.info </p><p>40：驱动挂载到哪里了？</p><p>难度：中等</p><p>应用程序：bash</p><p>人们常碰到的一个问题是，你刚接通电源时，就有太多的可挂载外设（USB驱动，flash内存卡，USB键驱动）消耗光了驱动？</p><p>实际上，所有的驱动都调用一个驱动——就像usb-storage，会在日志中存储很多有用的信息。尝试：</p><p>dmesg | grep SCSI </p><p>这将从dmesg输出过滤出指定的驱动规格。你可能发现一些这样的文本：</p><p>SCSI device sda: 125952 512-byte hdwr sectors (64 MB) </p><p>这个是说你的外设是在sda上。</p><p>41：自动执行USB装置</p><p>难度：高级</p><p>应用程序：hotplug脚本</p><p>当添加一个特殊的外设时想要运行一个指定的应用程序？USB hotplug后台进程可以帮你！当有USB装置添加到系统中时，这个服务就会得到通知。对于需要内核驱动的装置，hotplug后台进程将在/etc/hotplug/usb/下调用一个同名的脚本，例如，这里的一个名为usb-storage的脚本。你可以直接在这个脚本的后面添加你自己的命令（或者更好的是，在它的最后添加一行来让脚本在别的地方执行）。那么你就可以播放音乐，autosync文件（译注：影像文件），搜寻图片或者其他什么的。</p><p>对于不依赖于内核驱动的装置，有一个检查表，可以用来匹配USB产品和制造商ID。很多发行版已经设置好去做一些事情，但是你可以依据你的需要定制这些脚本。到<a href="http://jphoto.sourceforge.net/" target="_blank" rel="noopener">http://jphoto.sourceforge.net/</a> selected=sync去看一个我们能做什么的例子。</p><p>42：重命名和调整图片大小</p><p>难度：高级</p><p>应用程序：bash</p><p>很喜欢你的新相机但是不能容忍那个糟糕的名字？你也想要准备发布它们到网上吗？没问题，一个简单的bash脚本真是你所需要的：</p><p>#!/bin/sh </p><p>counter=1 </p><p>root=mypict </p><p>resolution=400×300 </p><p>for i in <code>ls -1 $1/*.jpg</code>; do </p><p>echo ”Now working on $i” </p><p>convert -resize $resolution $i ${root}_${counter}.jpg </p><p>counter=<code>expr $counter + 1</code> </p><p>done </p><p>保存这个脚本到一个名为picturename.sh的文件中，然后用一下命令执行它：</p><p>chmod u+x picturename.sh </p><p>然后在你的某个路径下存储它。现在，如果你在directory /path/to/pictdir下有一堆.jpg文件，所有你需要做的就是执行这个：</p><p>picturename.sh /path/to/pictdir </p><p>而在当前的目录下你会发现 mypict_1.jpg, mypict_2.jpg之类的，它们是你初始图片调整大小后的版本。你可以根据你的需要改变脚本，或者，你只是期待一个超级简单的图片大小调整，试着看看mogrify命令和它的-geometry参数。</p><p>43：安全登出</p><p>难度：简单</p><p>应用程序：bash</p><p>当你在一台共享机器上使用一个控制台，或者甚至只是在你自己的桌面使用控制台，都可能会发现当你登出时，屏幕仍然会显示谁已经登入正在做什么的痕迹。大多数发行版本将会清屏，但是有些不会。你可以通过编辑你的 ~/.bash_logout文件然后增加这个命令来解决问题：</p><p>clear </p><p>你也可以添加任何其他的有用命令在这里。</p><p>44：传输文件但不使用ftp或者scp</p><p>难度：简单</p><p>应用程序：netcat</p><p>需要传输一个目录给其他服务器但是没有FTP或者SCP使用权？那么这个小技巧将会帮助你使用netcat功能。在目的服务器上运行：</p><p>nc -l -p 1234 | uncompress -c | tar xvfp - </p><p>并且在发送服务器上运行：</p><p>tar cfp - /some/dir | compress -c | nc -w 3 [destination] 1234 </p><p>现在你就可以不需要FTP并且不需要root权限，就能传送文件了。</p><p>45：备份一个Debian包清单</p><p>难度：简单</p><p>应用程序：Debian</p><p>如果你正在运行Debian并且找不到你正在运行的包，为你当前正在安装的包做一个备份是非常有用的。你可以运行如下得到一个清单：</p><p>dpkg –get-selections &gt; debianlist.txt </p><p>这将把全部的清单放到debianlist.txt中，这样你就可以通过如下代码在不同的计算机上安装相同的包。</p><p>dpkg –set-selections &lt; debianlist.txt </p><p>当你复制你的系统到一个新的计算机上时，你要记住你还需要从/etc中复制配置文件。</p><p>要实际安装这些选项，使用如下指令：</p><p>apt-get -u dselect-upgrade </p><p>46：强化ssh</p><p>难度：简单</p><p>应用程序：ssh</p><p>尽管SSH是一个非常安全的连接服务器的方式，这里还有两个简单的改变，可以让你进一步增强它的安全性。首先，你当然不希望别人直接以root用户登入——他们应该以普通用户登陆，然后使用su命令来转换。你可以在/etc/ssh/ssh_config 文件中通过添加如下代码改变这个件事：</p><p>PermitRootLoginno </p><p>现在唯一能得到root特权的方式是通过su，这意味着入侵者现在需要破解两个密码来得到全部的使用权。当你编辑这个文件时，找到这样一行：</p><p>Protocol 2, 1 </p><p>然后把它改为如下：</p><p>Protocol 2 </p><p>这将消除最初的SSH协议中的撤销选项，现在被认为是非常易于攻击的。</p><p>47：停止回应ping</p><p>难度：简单</p><p>应用程序：sysctl</p><p>ping在找出网络拓扑结构时是非常有用的命令，缺点是它只能做这件事，而且会使得网络上的黑客们更容易瞄准现场服务器。但是你可以告诉Linux忽略所有的ping服务器将不会回应。这里有很多的方法来实现它，但是最好的是使用sysctl。关掉ping回应：</p><p>sysctl -w net.ipv4.icmp_echo_ignore_all=1 </p><p>想要打开它，使用：</p><p>sysctl -w net.ipv4.icmp_echo_ignore_all=0 </p><p>关掉ping对你来说是非常严重的，看看接下来的技巧。</p><p>48：降低ping速率</p><p>难度：简单</p><p>应用程序：sysctl</p><p>可能你想要保持服务器回复ping的功能，但是又想从被熟知的“ping flood”（封包洪流）的攻击中保护自己。那么你要如何完成这一壮举呢？最简单的方法是降低回应ping服务器的速率。它们仍然是有效的，但不会使服务器过载。</p><p>sysctl -w net.ipv4.icmp_echoreply_rate=10 </p><p>当回复被当作一个信号地址发送时，这将会降低速率。</p><p>49：当登出的时候清理KDE</p><p>难度：简单</p><p>应用程序：bash</p><p>在Windows中有很多程序会做一些清除网络缓存，移除临时文件事情。Linux上如果也可以这样是不是很cool呢？使用KDE，你甚至不需要安装任何新的软件，startkde脚本将会自动的执行你放在特殊地方的脚本。</p><p>首先，你需要在你的.kde目录下创建一个命令shutdown的目录：</p><p>mkdir /home/username/.kde/shutdown </p><p>现在创建一个脚本，用来在关机时执行一些你想要的事情。这里是一个例子：</p><p>#!/bin/bash </p><p>#clear up temp folder </p><p>rm -rf ~/tmp/* </p><p>#clear out caches </p><p>rm -rf ~/.ee/minis/* </p><p>rm -rf ~/.kde/share/cache/http/* </p><h1 id="delete-konqueror-form-completions"><a href="#delete-konqueror-form-completions" class="headerlink" title="delete konqueror form completions"></a>delete konqueror form completions</h1><p>rm ~/.kde/share/apps/khtml/formcompletions </p><p>现在确保你设置了正确的权限：</p><p>chmod ug+x ~/.kde/shutdown/cleanup.sh </p><p>（或者随便你叫它什么）。可以清除敏感文件，也可以通过将脚本放在你的默认KDE文件夹中有一个名为shutdown的子文件夹里，给所有用户一个全局的关机脚本。找出你的默认KDE目录在哪里，试一下：</p><p>kde-config –path exe </p><p>50：无密码的ssh</p><p>难度：中等</p><p>应用程序：ssh</p><p>厌烦了每次登陆你的服务器时都要输入密码？ssh也支持密钥，所以当你登陆桌面时你只能输入你的密码。在你的桌面机器上生成一个密钥对：</p><p>ssh-keygen -t dsa -C your.email@ddress </p><p>为你的密钥输入一个口令。这会将密钥放到 ~/.ssh/id_dsa and the public key in ~/.ssh/id_dsa.pub中。现在看看你是否有了一个正在运行的ssh-agent。</p><p>echo $SSH_AGENT_PID </p><p>如果安装了ssh-agent，大部分窗口管理器都会自动运行它。如果没有安装，开启一个：</p><p>eval $(ssh-agent) </p><p>现在，告诉这个代理你的密钥：</p><p>ssh-add </p><p>然后输入你的口令。你需要在每次登陆时都输入口令，如果你是使用X，尝试添加：</p><p>SSH_ASKPASS=ssh-askpass ssh-add </p><p>到你的.xsession文件。（你可能需要安装ssh-askpass）现在为每个你需要登入的服务器都创建这个目录 ~/.ssh，然后复制这个文件~/.ssh/id_dsa.pub into it as ~/.ssh/authorized_keys 。如果你是手动开启ssh-agent，当你登出时，使用如下代码终止它：</p><p>ssh-agent -k </p><p>51：通过ssh使用rsync</p><p>难度：中等</p><p>应用程序：Shell</p><p>rsync使大型目录结构保持同步。通过SSH使用tar远程复制一个文件系统的一部分是非常理想的，sync甚至更适合保持两台机器之间的文件系统的同步。为了使用SSH运行一个rsyns，传递给它一个-e转换：</p><p>rsync -ave ssh greendome:/home/ftp/pub/ /home/ftp/pub/ </p><p>注意从源端（在greendome上）来的文件说明后面的 / ，在源说明中，一个尾部的 / 告诉rsync这个目录的内容，但不是目录本身。为了将目录放入正在复制的内容的最高等级丢掉这个 /：</p><p>rsync -ave ssh bcnu:/home/six . </p><p>这将在 ~/six/目录下保持一个与bcnu:/home/six/上的任何东西同步的复制品。rsync默认只拷贝文件和目录，但是当源端移除了文件时并不会在目的端移除它们的拷贝。为了保持复制的精确性，包含–delete这个标志：</p><p>rsync -ave ssh–delete greendome:~one/reports . </p><p>现在当老的报表从greendome上的~one/reports/中移除了，在同步版本中，每次这个命令运行时，它们也将会从~six/public_html/reports/中移除。如果你在corn中像这样运行一条命令，记得丢掉v。这将会使输出稳定（除非rsync在运行中出现问题，在这种情况下你将会收到一封有错误输出的邮件）。使用SSH作为你的rsync运输方式，这样做的好处是使数据在网络传输过程中加密，并可以方便使用任何你已经用SSH客户端密钥建立的信任关系。</p><p>52：资源扫描</p><p>难度：中等</p><p>应用程序：nmap</p><p>例如，简单的TCP连接扫描可以在不需要root特权时进行：</p><p>一般来说，当人们想到nmap时，都假设nmap是用来进行一些违法的网络侦查，并为恶意攻击做准备的。但是作为一个强大的工具，nmap可以成为一个白帽子，做一些比入侵网络有意义得多的事。</p><p>nmap rigel </p><p>nmap也可以通过指定范围或者CIDR符号来扫描IP地址：</p><p>nmap 192.168.0.1-254 </p><p>nmap 192.168.0.0/24 </p><p>nmap如果以root身份运行，可以提供更多的信息。当它以root身份运行时，通过使用-O标志，它可以使用特殊的数据包来决定远程机器的操作系统。此外，你可以通过使用-sS标志来实现半开的TCP扫描。nmap将会发送一个SYN数据包到远程的主机，然后等待接收它回应的ACK。如果nmap收到一个ACK，它就知道这个端口是开放的。</p><p>这不同于普通的TCP三次握手，客户端会发送一个SYN包，如果它收到了初始的服务器ACK，客户端随后会将一个ACK送回服务器。攻击者们时常使用这个选项来避免使他们的扫描登陆到远程机器上。</p><p>nmap -sS -O rigel  </p><p>Starting nmap V. 3.00 ( <a href="http://www.insecure.org/nmap/" target="_blank" rel="noopener">www.insecure.org/nmap/</a> )  </p><p>Interesting ports on rigel.nnc (192.168.0.61):  </p><p>(The 1578 ports scanned but not shown below are in state: filtered)  </p><p>Port State Service  </p><p>7/tcpopen echo  </p><p>9/tcpopen discard  </p><p>13/tcp open daytime  </p><p>19/tcp open chargen  </p><p>21/tcp open ftp  </p><p>23/tcp open telnet  </p><p>25/tcp open smtp  </p><p>37/tcp open time  </p><p>79/tcp open finger  </p><p>111/tcpopen sunrpc  </p><p>512/tcpopen exec  </p><p>513/tcpopen login  </p><p>514/tcpopen shell  </p><p>587/tcpopen submission  </p><p>7100/tcp open font-service  </p><p>32771/tcpopen sometimes-rpc5  </p><p>32772/tcpopen sometimes-rpc7  </p><p>32773/tcpopen sometimes-rpc9  </p><p>32774/tcpopen sometimes-rpc11  </p><p>32777/tcpopen sometimes-rpc17  </p><p>Remote operating system guess: Solaris 9 Beta through Release on SPARC  </p><p>Uptime 44.051 days (since Sat Nov1 16:41:50 2003)  </p><p>Nmap run completed – 1 IP address (1 host up) scanned in 166 seconds  </p><p>伴随着OS探测的激活，nmap可以确认OS是Solaris，但是现在你还可以知道，它可能是运行在SPARC处理器上的Version 9。</p><p>一个强大的功能是可以被用于和你的nmap的XML输出性能保持联系。使用-oX命令行转换而激活，就像这样：</p><p>nmap -sS -O -oX scandata.xml rigel </p><p>这在扫描IP地址范围或者你全部的网络时是特别有用的，你可以将所有通过扫描收集起来的信息放到一个XML文件里，并经过解析后插入到数据库中。这里是一个开放的端口的XML入口：</p><port protocol="“tcp”" portid="“22″"><br><br><state state="“open”"><br><br><service name="“ssh”" method="“table”" conf="“3″"><br><br></service></state></port> <p>nmap是一个强大的工具。通过使用它的XML输出性能，一点点的脚本，还有一个数据库，你可以创造一个更强大的可以在你的网络上监测未授权的服务和机器的工具。</p><p>53：备份你的bootsector(引导扇区)</p><p>难度：高级</p><p>应用程序：Shell</p><p>妨碍引导装入，双启动和很多其他下热闹的程序会留给你一个混乱的引导扇区。为什么不在你可以备份的时候给它创建一个备份呢：</p><p>引导装载器混乱、双启动及许多其他的可怕的进程可能造成乱七八糟的启动区。</p><p>dd if=/dev/hda of=bootsector.img bs=512 count=1 </p><p>很显然，你应该改变这个装置来显示你的boot驱动（有可能是SCSI的sda）。还要非常小心，别把事情搞砸——你可能会轻而易举地毁掉你的驱动！恢复时使用：</p><p>dd if=bootsector.img of=/dev/hda </p><p>54：保护日志文件</p><p>难度：高级</p><p>应用程序：很多</p><p>在一个入侵过程中，一个入侵者将会很可能在很多系统日志中留下能反映他行为的迹象：一个有价值的审计追踪应该被保护。没有可靠的日志，就很难发现攻击者是如何侵入，或者是从哪里来的攻击。这个信息在分析事件、联系相关方面并给予反馈上，是很关键的。但是，如果入侵成功，什么才能阻止他来移除他的这些错误行为的痕迹呢？</p><p>这就是文件属性能发挥作用、挽回败局的地方（或者至少使事情没那么糟）。Linux和BSD都有给文件和目录分配额外的属性这个功能。这不同于标准的Unix权限方案中，系统为所有的用户提供的普遍的属性设置，而且它们比文件权限或者ACL都要更深层次影响文件访问。</p><p>在Linux中，你可以看到并且通过lsattr和chattr命令分别修改一个给出文件的设置。在写这篇文章时，Linux的文件属性只能在你使用ext2和ext3时获得。这还有些XFS和ReiserFS的关于获得属性支持的内核补丁。一个保护日志文件的有用的属性是append-only。当这个属性被设置后，文件不能被删除，而且写操作只能被允许在文件的最后追加。</p><p>在Linux下要设置append-only标志，运行这条命令：</p><p>chattr +afilename </p><p>看看+a属性是如何工作的：创建一个文件然后设置它的append-only属性：</p><p>touch /var/log/logfile </p><p>echo ”append-only not set” &gt; /var/log/logfile </p><p>chattr +a /var/log/logfile </p><p>echo ”append-only set” &gt; /var/log/logfile </p><p>bash: /var/log/logfile: Operation not permitted </p><p>企图第二次写文件失败，因为它将覆盖这个文件。然而，在文件的末尾追加仍然是被允许的：</p><p>echo ”appending to file” &gt;&gt; /var/log/logfile  </p><p>cat /var/log/logfile  </p><p>append-only not set  </p><p>appending to file  </p><p>显而易见，一个获得root特权的侵入者能意识到使用了文件属性，并且可以通过运行chattr -a来移除append-only标志。为了防止这种情况，我们需要禁用移除append-only属性的性能，在Linux下使用功能机制完成这个。</p><p>Linux功能模型分割特权给全能的root账户，并且允许你有选择的禁用它们。为了防止一个用户移除一个文件的append-only属性，我们需要移除CAP_LINUX_IMMUTABLE功能。当体现在当前运行系统中时，这个功能允许append-only属性被修改。为了当前系统中获得修改这个功能的设置，我们将简单有效地调用lcap(<a href="http://packetstormsecurity.org/linux/admin/lcap-0.0.3.tar.bz2)" target="_blank" rel="noopener">http://packetstormsecurity.org/linux/admin/lcap-0.0.3.tar.bz2)</a>.</p><p>为了解压和编译这个工具，运行这条命令：</p><p>tar xvfj lcap-0.0.3.tar.bz2 &amp;&amp; cd lcap-0.0.3 &amp;&amp; make </p><p>然后，不允许修改append-only标志，运行：</p><p>./lcap CAP_LINUX_IMMUTABLE </p><p>./lcap CAP_SYS_RAWIO </p><p>第一条命令移除了改变append-only标志的功能，然后第二条移除了原始I/O的功能。这是很有必要的，因为这样就能保护文件不被访问块设备时驻留在其上的东西修改。这阻止了访问/dev/mem和/dev/kmem，有可能给入侵者提供恢复CAP_LINUX_IMMUTABLE功能的漏洞。为了在boot上移除这项功能，添加之前的两条命令到你的系统启动脚本中（例如/etc/rc.local）。你应该确保这个功能在boot命令中被移除了，防止其他启动脚本出问题。一旦lcap移除了内核功能，就只能通过重启系统来恢复了。</p><p>在做这些之前，你应该明白，给你的日志文件添加append-only标志，将会造成日志循环脚本失败。然而，做这件事将会极大的提升你的审计追踪的安全性。安全性的提升在突发事件中会被证明是很有用的。</p><p>55：自动加密连接</p><p>难度：高级</p><p>应用程序：FreeS/WAN</p><p>一个FreeS/WAN支持的特别cool的功能是，当其他主机运行FreeS/WAN时随机加密。这允许FreeS/WAN在所有支持随机加密的主机间透明传输。为了这个，每台主机必须使用FreeS/WAN生成一个公钥，这个公钥可以存储于那台主机的一个DNS TXT记录中。当一台主机要与另一个主机建立一个随机加密，希望初始化一个加密连接时，将会通过DNS查询这台主机的公钥并且初始化这个连接。</p><p>一开始，你想使用这个功能时，需要为每一台主机生成一个公钥。你可以通过运行如下命令来实现它：</p><p>ipsec newhostkey –output /tmp/<code>hostname</code>.key </p><p>现在你需要添加通过那条命令创建的文件的内容到/etc/ipsec.secrets中。</p><p>cat /tmp/<code>hostname</code>.key &gt;&gt; /etc/ipsec.secrets </p><p>然后，你需要生成一个TXT记录来存放你的DNS区域。你可以通过运行如下命令来实现它：</p><p>ipsec showhostkey –txt @colossus.nnc </p><p>现在添加这条记录到你的空间然后重载它。你会证实DNS已经通过这条命令正确的运行了：</p><p>ipsec verify </p><p>Checking your system to see if IPsec got installed and started correctly </p><p>Version check and ipsec on-path[OK] </p><p>Checking for KLIPS support in kernel [OK] </p><p>Checking for RSA private key (/etc/ipsec.secrets) [OK] </p><p>Checking that pluto is running [OK] </p><p>DNS checks. </p><p>Looking for TXT in forward map: colossus [OK] </p><p>Does the machine have at least one non-private address [OK] </p><p>现在只需要重启FreeS/WAN-你现在应该能连接到任何支持随机加密的主机上了。但是如果其他的主机想要连接你该怎么办？要授权连接，你需要在你的DNS反向查找区域为你的机器创建一个TXT记录。</p><p>你可以通过运行一个简单的命令来生成一条记录：</p><p>ipsec showhostkey –txt 192.168.0.64 </p><p>为你的子网添加这条记录到反向查找区域，然后其他的机器就可以和你的机器初始化随机加密了。伴随着随机加密的使用，所有主机间的传输将被自动加密，同时保护所有的服务。</p><p>56：消除二进制suid</p><p>难度：中等</p><p>应用程序：find</p><p>如果你的服务器有比你自身多的shell用户，你应该在你的系统上定期的审核setuid和setgid的二进制文件。可能你会惊讶你找到了那么多文件。这里有一个搜寻所有setuid或者setgid的文件的命令位设置：</p><p>find / -perm +6000 -type f -exec ls -ld {} \; &gt; setuid.txt &amp; </p><p>这将会创建一个名为setuid.txt的文件，包含了所有当前系统上匹配的文件的细节。要移除任何你不用的工具的s位，输入：</p><p>chmod a-s program  </p><p>57：Mac过滤Host AP</p><p>难度：高级</p><p>应用程序：iwpriv</p><p>你可以在链路层使用iptables或者ebtables执行MAC过滤，那比让Host AP为你做这些更安全。这不仅仅是阻碍指向你的网络传输，也是预防邪恶的人关联你的站。这能帮助组织某些人给你的其他无线客户端造成麻烦的可能，即使他们没有更多的网络通道。</p><p>当使用MAC过滤时，很多人会列出一个他们希望允许的无线装置清单，然后拒绝所有其他的。使用iwpriv命令完成这个功能：</p><p>iwpriv wlan0 addmac 00:30:65:23:17:05 </p><p>iwpriv wlan0 addmac 00:40:96:aa:99:fd </p><p>… </p><p>iwpriv wlan0 maccmd 1 </p><p>iwpriv wlan0 maccmd 4 </p><p>addmac指示添加一个MAC地址到内部表。只要你喜欢你就可以通过执行更多的addmac命令添加更多的MAC地址到表中。然后你需要告诉Host AP对你已经建好的表做什么。maccmd 1命令告诉Host AP就像使用一个“允许”清单一样使用这个表，并且拒绝所有其他的MAC地址来关联。最终，maccmd 4命令去除掉所有的关联客户端，强制使它们重新关联。对表中的客户端来说是自动发生的，但是其他的任何企图关联的客户端都是被拒绝的。</p><p>有时，你只需要禁止一个或者两个捣蛋鬼，而不是设置一个详细的被允许的硬件规则。如果你需要禁止两三个MAC地址而允许其他所有的地址，尝试这个：</p><p>iwpriv wlan0 addmac 00:30:65:fa:ca:de </p><p>iwpriv wlan0 maccmd 2 </p><p>iwpriv wlan0 kickmac 00:30:65:fa:ca:de </p><p>像以前一样，你可以不限次数的使用addmac，只要你乐意。Maccmd2命令会将规则设置为“拒绝”，而如果该MAC恰巧已经关联，kickmac会立刻将特定的MACboot。这也许比只为了禁止一个捣蛋鬼而消除所有关联然后让他们重新邻接要好一些。顺便说一下，如果你想要消除所有的MAC过滤，尝试maccmd 0。</p><p>如果你错误的输入了一个MAC地址，你可以像使用addmac一样使用delmac命令，然后它（可以预见）就会从表中删掉这个给出的MAC地址。你有时会需要完全清除当前的MAC表但是保留它当前的规则，使用这条命令：</p><p>iwpriv wlan0 maccmd 3 </p><p>最后，你可以通过使用/proc浏览正在运行的MAC表：</p><p>cat /proc/net/hostap/wlan0/ap_control </p><p>iwpriv程序操纵正在运行的Host AP驱动，但是重启后不保留设置。一旦你对你的MAC过滤表感到满意，请确保你在一个rc脚本中添加了相关命令在启动时间运行。</p><p>注意，未关联的客户端仍然可以监听网络传输，所以MAC过滤实际上只能预防一点点窃取。为了与被动的监听技巧搏斗，你需要加密你的数据。</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux,geek </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解读redis配置文件</title>
      <link href="/2018/01/01/%E8%A7%A3%E8%AF%BBredis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <content type="html"><![CDATA[<p>摘要:<br><a id="more"></a><br>正文:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"># 绑定端口。只接受来自这个IP的请求。如果不设置，将接受所有请求。可以配置多个地址</span><br><span class="line">bind <span class="number">127.0</span>.0.1</span><br><span class="line"># 保护模式。默认开启。当没有绑定IP并且没有设置密码的时候，保护模式起作用，只接受本地地址的请求。</span><br><span class="line"><span class="keyword">protected</span>-mode yes</span><br><span class="line"># 监听端口，默认是6379，TCP连接</span><br><span class="line">port <span class="number">6379</span></span><br><span class="line"># 高并发环境话，对连接的优化参数。并受linux系统内核的影响，需要同时修改内核参数以互相适应</span><br><span class="line">tcp-backlog <span class="number">511</span></span><br><span class="line"># 超时时间，单位为秒，客户端超时时间内没有发出任何命令，关闭该连接。0表示禁用该设置。</span><br><span class="line">timeout <span class="number">0</span></span><br><span class="line"># 连接保持确定时间。如果确定断开连接需要双倍的时间。有的内核也会影响这个参数。</span><br><span class="line"># 据说合理值是300秒。这个选项从redis 3.2.1开始设置。</span><br><span class="line">tcp-keepalive <span class="number">300</span></span><br><span class="line"># 默认情况下，redis不是后台运行的，如果需要后台运行，需要把该项设置为yes</span><br><span class="line">daemonize no</span><br><span class="line"># 定义是upstart还是systemd接管redis进程</span><br><span class="line">supervised no</span><br><span class="line"># 配置后台运行时，redis会生成pid文件，如果不进行配置，默认放置在/var/run/redis.pid下。运行多个redis服务时，需要指定不同的pid文件和端口</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"># 配置记录log的等级。分为四个等级，debug\verbose\notice\warining</span><br><span class="line">loglevel notice</span><br><span class="line"># 配置log文件地址，设置为空时，将日志打印在屏幕上。如果设置为空且设置了后台运行，则将日志发送至/dev/null</span><br><span class="line">logfile <span class="string">""</span></span><br><span class="line"># 设置数据库个数。使用命令“SELECT &lt;dbid&gt;”切换数据库，默认数据库是DB 0</span><br><span class="line">databases <span class="number">16</span></span><br><span class="line"># 设置保存频率，条目格式为：save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line"># 默认配置的含义是这样的：</span><br><span class="line">#900秒内有一个key发生了变化就进行保存</span><br><span class="line">#300秒内有10个key发生了变化就进行保存</span><br><span class="line">#60秒内有10000个key发生了变化就进行保存</span><br><span class="line"># 只要符合以上条件就进行保存</span><br><span class="line">save <span class="number">900</span> <span class="number">1</span></span><br><span class="line">save <span class="number">300</span> <span class="number">10</span></span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span></span><br><span class="line"># 后台保存至磁盘发生错误时禁止再对redis进行写操作，否则会产生影响。</span><br><span class="line"># 如果后台保存又恢复正常，redis会自动的允许写操作</span><br><span class="line"># 如果有自己的监控，可以关闭这个选项，以达到更好的交互性</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"># 进行备份时，是否进行压缩</span><br><span class="line">rdbcompression yes</span><br><span class="line"># 是否进行检查校验码</span><br><span class="line">rdbchecksum yes</span><br><span class="line"># 备份文件的镜像名</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"># redis的工作目录。redis会把备份文件也放入到这个工作目录</span><br><span class="line">dir ./</span><br><span class="line"># 设置该数据库为其它数据库的从数据库，默认不启用</span><br><span class="line"># slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"># 如果连接主数据库时需要密码验证，这里指定密码。默认不启用。</span><br><span class="line"># masterauth &lt;master-password&gt;</span><br><span class="line"># 设置从数据库对客户端写入的处理方式。</span><br><span class="line"># 如果设置为“yes”未完全同步的时候也可以提供客户端连接并操作</span><br><span class="line"># 如果设置为“no”时，则只返回错误，除了IINFO和SLAVEOF</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"># 从数据库是否是只读属性。</span><br><span class="line">slave-read-only yes</span><br><span class="line"># 是否启用无磁盘复制，即直接通过网络进行复制。这个功能目前还在实验阶段</span><br><span class="line">repl-diskless-sync no</span><br><span class="line"># 启用无磁盘复制时，配置传输开始的延时时间</span><br><span class="line">repl-diskless-sync-delay <span class="number">5</span></span><br><span class="line">#在slave和master同步后（发送psync/sync），后续的同步是否设置成TCP_NODELAY。如果设置成yes，则redis会合并小TCP包节省带宽，但会增加延迟。如果设置成no，则redis master会立即发送同步数据，延迟减小，但会增加带宽占用。</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"># 从数据库的优先级，数字越小优先级越高。如果主数据库不工作，数字最小的从数据库接替为主数据库。但是数字0代表不会成为主数据库。</span><br><span class="line">slave-priority <span class="number">100</span></span><br><span class="line"># 设置密码。客户端连接后进行操作之前需要使用“AUTH &lt;PASSWORD&gt;”进行验证之后再进行操作。</span><br><span class="line">#因为redis速度非常快，所以一个外部用户可以一秒钟进行150K次的密码尝试，这意味着如果你对外发布你的redis服务器，你需要一个强壮的密码防止暴力破解。</span><br><span class="line"># requirepass foobared</span><br><span class="line">#重命名某个比较敏感的命令，使这个命令不能被外部命令利用，如CONFIG。</span><br><span class="line">#但是这个配置不适合普通用户并且可能会引起从数据库传输等的一些问题。</span><br><span class="line"># rename-command CONFIG ""</span><br><span class="line"># 限制同时连接的客户端数量。超过数量将不再接受新的请求并返回错误信息。</span><br><span class="line"># maxclients 10000</span><br><span class="line"># 设置redis能够使用的最大内存。当内存满了的时候，根据maxmemory-policy进行删除key，当无法再删除时，返回错误信息。</span><br><span class="line"># maxmemory &lt;bytes&gt;</span><br><span class="line"># 内存删除规则。默认是noeviction方式</span><br><span class="line"># maxmemory-policy noeviction</span><br><span class="line"># 默认情况下，后台异步的把数据备份到磁盘，但是这个备份十分耗时切不能很频繁，如果发生意外，则会丢失一段时间的数据。如果开启append only模式，redis会把接收到的每一次写操作都追加到appendonly.aof中。</span><br><span class="line">appendonly no</span><br><span class="line"># append only文件的名字，默认为appendonly.aof</span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"># 设置对append only文件进行同步的频率。always表示每次有写操作都进行同步，everysec表示对写操作进行累积，每秒同步一次。</span><br><span class="line"># 设置在rewrite的时候是否对新的写操作进行fsync。no表示进行fsync</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"># 当append only文件增长了这个比例（这里是增加了一倍），则后台rewrite自动运行</span><br><span class="line">auto-aof-rewrite-percentage <span class="number">100</span></span><br><span class="line"># 进行后面rewrite要求的最小AOF文件大小。这两个选项共同决定了后面rewrite进程是否到达运行的时机</span><br><span class="line">auto-aof-rewrite-min-size <span class="number">64</span>mb</span><br><span class="line"># 当aof文件被损坏时,redis将返回错误并退出</span><br><span class="line">aof-load-truncated yes</span><br><span class="line"># LUA scripts最大执行时间,单位(毫秒),超出后返回查询错误并写日志</span><br><span class="line">lua-time-limit <span class="number">5000</span></span><br><span class="line"># 开启redis集群</span><br><span class="line"># cluster-enabled yes</span><br><span class="line"># 集群节点配置文件名。不主动手动修改，但是需要确保每一个节点配置文件名不同。</span><br><span class="line"># cluster-config-file nodes-6379.conf</span><br><span class="line"># 节点连接超时时间</span><br><span class="line"># cluster-node-timeout 15000</span><br><span class="line"># 主从数据库无法建立联系的时间倍数</span><br><span class="line">cluster-slave-validity-factor <span class="number">10</span></span><br><span class="line"># 主数据库需要保留最少从服务器个数。这时其它从服务器能够灾备迁移到其它主服务器，否则不允许进行迁移。</span><br><span class="line">cluster-migration-barrier <span class="number">1</span></span><br><span class="line"># 集群是否需要全量覆盖</span><br><span class="line"># cluster-require-full-coverage yes</span><br><span class="line"># 执行超过多少毫秒的会被记录在慢日志上</span><br><span class="line">slowlog-log-slower-than <span class="number">10000</span></span><br><span class="line"># 设置保存多少条慢日志</span><br><span class="line">slowlog-max-len <span class="number">128</span></span><br><span class="line"># 延时监控</span><br><span class="line">latency-monitor-threshold <span class="number">0</span></span><br><span class="line"># 键空间通知，为空关闭功能</span><br><span class="line">notify-keyspace-events <span class="string">""</span></span><br><span class="line"># hash对象开始存储的时候使用ziplist进行存储</span><br><span class="line"># 只有达到一定的范围时</span><br><span class="line">hash-max-ziplist-entries <span class="number">512</span></span><br><span class="line">hash-max-ziplist-value <span class="number">64</span></span><br><span class="line"># 列表编码方式</span><br><span class="line">list-max-ziplist-size -<span class="number">2</span></span><br><span class="line"># 列表压缩方式，0代表不进行压缩</span><br><span class="line">list-compress-depth <span class="number">0</span></span><br><span class="line"># 集合的特殊编码形式</span><br><span class="line">set-max-intset-entries <span class="number">512</span></span><br><span class="line"># 有序集合设置</span><br><span class="line">zset-max-ziplist-entries <span class="number">128</span></span><br><span class="line">zset-max-ziplist-value <span class="number">64</span></span><br><span class="line"># 开启后，每100毫秒有1毫秒对hash表进行重新hash</span><br><span class="line">activerehashing yes</span><br><span class="line"># 客户端缓冲区限制</span><br><span class="line">client-output-buffer-limit normal <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">client-output-buffer-limit slave <span class="number">256</span>mb <span class="number">64</span>mb <span class="number">60</span></span><br><span class="line">client-output-buffer-limit pubsub <span class="number">32</span>mb <span class="number">8</span>mb <span class="number">60</span></span><br><span class="line"># 设置redis程序命令执行频率</span><br><span class="line">hz <span class="number">10</span></span><br><span class="line"># rewrite过程中,每32M数据进行一次文件同步,这样可以减少"aof大文件"写入对磁盘的操作次数</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 非关系型数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo工作原理</title>
      <link href="/2017/12/31/hexo%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <content type="html"><![CDATA[<p>摘要:<br>转载自:<a href="http://coderunthings.com/2017/08/20/howhexoworks/" target="_blank" rel="noopener">http://coderunthings.com/2017/08/20/howhexoworks/</a><br><a id="more"></a><br>正文:<br><img src="http://coderunthings.com/images/howhexoworks/hexo_logo.png" alt=""><br> 你可能用过hexo(或者jekyll)来搭建自己的博客网站。通常我们在安装、配置完成hexo之后，借助hexo，一般通过以下步骤，就可以完成一篇博客的编写及发布，真是方便极了：</p><p><table><tr><td bgcolor="#F0F8FF"><br>$ hexo init           // 创建一个新的hexo项目<br>$ hexo new mynewblog  // 新建一篇标题为mynewblog的文章<br>$ hexo server         // 为hexo在本地起一个http server, 然后通过浏览器访问博客<br>$ hexo generate       // 生成将要发布的博客网站包含html在内的静态资源<br>$ hexo deploy         // 将generate的结果发布到_config.yml中指定的仓库<br></td></tr></table><br>可是，从hexo init到hexo deploy中间发生了什么呢？为了搞清楚这一过程、理解hexo的工作原理，本文将试着回答以下问题:<br>命令行中的hexo是什么<br>hexo是怎么将我们写好的markdown转换成html的<br>hexo插件是如何工作的<br>本地的hexo项目和git page有什么关系<br>本文不是:</p><p>hexo的安装、使用教程<br>git page的使用教程<br>命令行中的hexo是什么?</p><p>hexo项目在github上已经有超过17k的star了，但是你知道吗，日常我们在命令行”操作”hexo时所输入的hexo(例如hexo init)并不是这个17k个star的项目! 是的，我们在命令行中所输入的”hexo”实际是hexo-cli项目，该项目在github上的star还不足50个。</p><p><table><tr><td bgcolor="#F0F8FF"><br>hexo可以粗略分为三个子项目，分别是:<br>hexo-cli<br>hexo (下文中用hexo core来指代)<br>hexo plugins<br>其中hexo plugins不是指某一个单独的项目，而是泛指所有的hexo plugin项目。<br>请看下图:</td></tr></table></p><p><img src="http://coderunthings.com/images/howhexoworks/hexo_projects.png" alt=""><br>让我们结合这张图来大致看看这三个项目的作用(下面的链接均是指向Github中相关的源码):<br>hexo-cli: hexo命令行项目，作用是:<br>启动hexo命令(进程)，及其参数解析机制。每次我们输入’hexo xxx’命令后，都会通过node调用hexo-cli中的entry函数(比如，可以把’hexo init’视为’node hexo-cli/entry.js init’)<br>实现hexo命令的三个初始参数(功能): init / version / help<br>加载hexo核心模块，并初始化<br>hexo core: hexo核心，他的主要作用如下:<br>实现了hexo功能扩展对象<br>实现了hexo核心功能, 如new, publish, generate等（其实是一些hexo插件，下文中会详细分析）<br>hexo plugins: 指一些能够扩展hexo的插件。插件可以按功能分成两类:<br>扩展hexo命令的参数，如hexo-server(安装这个插件以后才能使用hexo server命令)<br>扩展hexo解析文件的”能力”，如增加jade模版解析功能的hexo-render-jade插件<br><br>从markdown到html的旅程</p><p>简单来说，hexo中，从markdown到html的generate过程中做了两件事：</p><p>模板渲染<br>模板渲染<br>是的，就是这样，就是两次模板渲染。只不过两次渲染的输入、渲染模板的引擎、输出不一样。此处应该有一个表格：<br><img src="http://coderunthings.com/images/howhexoworks/render.png" alt=""><br>还得有一张图:<br><img src="http://coderunthings.com/images/howhexoworks/post.png" alt=""> </p><p><table><tr><td bgcolor="#F0F8FF"><br>对上面表格和图的说明:<br>hexo core在generate的过程中会产生一个对象，我们在这里把这个对象称为article。第一次渲染的主要目的就是给这个对象添加title,content等属性。其中:<br>article.title, article.date, article.tags, article.categories等属性来自yml front的部分<br>article.content是markdown文章解析后的html片段<br>hexo项目目录下包含三个子目录，<br>source目录，写博客的主要工作目录。这个目录下存放的是我们的markdown文章以及js, images, css<br>themes目录，主题目录，定义了即将生成的html的layout, 和html中需要加载的css, js, images<br>public目录, hexo generate的最终输出目录。里面包含了整个博客网站的html, css, js, images<br>第二次渲染，需要引入对应模板文件格式的插件，如.ejs文件就需要使用hexo-render-ejs插件，.jade文件需要使用hexo-render-jade插件，而.sass文件则需要hexo-render-sass插件来转换成css文件。hexo的这一设计有点类似webpack中的loader。<br></td></tr></table><br>hexo插件是如何工作的</p><p>hexo和webpack还有一点类似的地方就是插件驱动理念。即hexo(和webpack)是先实现一套(插件)扩展系统，然后再往扩展系统中添加插件来实现自身的功能。即我们日常使用的hexo init, hexo new，hexo generate等等功能都是通过一个个插件(其实就是一个个function)实现的。</p><p><table><tr><td bgcolor="#F0F8FF"><br>具体来讲就是:<br>hexo.extend这个对象的每个属性都是一个用来绑定(特定)插件的对象。（所谓”绑定”，其实就是对象的register方法）<br>hexo初始化过程中先加载内部插件，再加载外部插件<br>而这些插件的功能分为两大类: 命令行插件和generate过程相关功能，例如：<br>命令行插件, hexo new, 是在hexo.extend.console对象上绑定的一个插件<br>generate过程相关的插件，如上文提到的往article对象添加title,content等属性的功能，是通过往hexo.extend.processer对象上绑定post插件来实现的<br>所以，当我们想自己动手写插件时，就是像hexo官网给出的这样,调用某个对象的register方法，如hexo.extend.console.register。<br></td></tr></table><br>hexo和git page<br><img src="http://coderunthings.com/images/howhexoworks/deploy.png" alt=""><br>如上图，(用户通过浏览器访问到的)git page上的博客网站其实是hexo generate之后生成的public目录下的内容。</p><p><table><tr><td bgcolor="#F0F8FF"><br>所以，一个hexo博客项目应该有两个仓库:<br>(基于hexo init结果的)博客编写仓库。可以把这个项目看成一个代码库，用来”开发”博客网站(包含写博客，生成博客等任务)<br>存放(hexo generate结果的)public目录仓库。这个项目是”只读”的，我们不会直接修改这个仓库的内容，我们也不会对这个仓库直接进行git pull、git commit、git push等常规操作。这个仓库的内容就是public目下的内容，即是通过hexo generate产生、hexo deploy提交的。<br></td></tr></table><br>总结</p><p>hexo简洁、强大的功能来自于自身优雅的系统设计:</p><p>hexo进程启动、hexo核心对象封装、插件系统分别独立<br>自身采用插件驱动，生来就具备高可扩展性<br>希望读完这篇文章你能对hexo本身有更深入的理解，也能通过hexo的代码设计，对自己以后写出更优雅的代码有所启发。</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cookie被浏览器禁用后的解决方法</title>
      <link href="/2017/12/30/cookie%E8%A2%AB%E6%B5%8F%E8%A7%88%E5%99%A8%E7%A6%81%E7%94%A8%E5%90%8E%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <content type="html"><![CDATA[<p>摘要:<br>转载自:<a href="http://blog.csdn.net/github_36301064/article/details/53412600" target="_blank" rel="noopener">http://blog.csdn.net/github_36301064/article/details/53412600</a><br><a id="more"></a><br>正文:<br>我们都知道session依赖cookie，因为服务器需要在每次请求中获取sessionId，然后找到客户端的session对象，如果浏览器禁用了cookie呢？</p><p>这个时候，就需要用到URL重写了，这种方法让服务器收到的每个请求中都带有sessioinId。</p><p>URL重写的具体方法是：在每个页面中的每个链接和表单中都添加名为jSessionId的参数，值为当前sessionid。当用户点击链接或提交表单时也服务器可以通过获取jSessionId这个参数来得到客户端的sessionId，找到sessoin对象，来看看具体的例子：</p><p>方法一：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">------------链接------------</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'/jsp/index.jsp;jsessionid=&lt;%=session.getId() %&gt;'</span> &gt;</span>主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br><span class="line">------------表单------------</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">'/jsp/index.jsp;jsessionid=&lt;%=session.getId() %&gt;'</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br>方法二（使用response.encodeURL()对每个请求的URL处理，这个方法会自动追加jsessionid参数，与上面我们手动添加是一样的效果。）：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">------------链接------------</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'&lt;%=response.encodeURL("/jsp/index.jsp") %&gt;'</span> &gt;</span>主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br><span class="line">------------表单------------</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">'&lt;%=response.encodeURL("/jsp/index.jsp") %&gt;'</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span>  </span><br></pre></td></tr></table></figure><br>使用response.encodeURL()更加“智能”，它会判断客户端浏览器是否禁用了Cookie，如果禁用了，那么这个方法在URL后面追加jsessionid，否则不会追加。<br>所以说，建议使用方法二。</p>]]></content>
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie,session </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面经</title>
      <link href="/2017/12/30/%E9%9D%A2%E7%BB%8F/"/>
      <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 请输入密码 " /> <label for="pass"> 请输入密码 </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> 面试经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经,面试题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二维数组的查找</title>
      <link href="/2017/12/29/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
      <content type="html"><![CDATA[<p>摘要:<br>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br><a id="more"></a><br>正文:<br>题目描述<br>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br>思路1：<br>在数组中的元素都是按照顺序排列的，故采用二分的思想对数组元素进行查找:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(array[<span class="number">0</span>].length==<span class="number">0</span>||array.length==<span class="number">0</span>||array==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(binSearch(array[i],<span class="number">0</span>,array[i].length-<span class="number">1</span>,target)==target) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binSearch</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> start,<span class="keyword">int</span> end,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start&gt;end) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(start+end)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid]==target) <span class="keyword">return</span> a[mid];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[mid]&lt;target) <span class="keyword">return</span> binSearch(a,mid+<span class="number">1</span>,end,target);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> binSearch(a,start,mid-<span class="number">1</span>,target);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>思路2:<br>从左下角开始，如果要找的那个数&gt;左下角的数,那么向右找，如果想找的那个数比左下角的那个数小，那么向上移动一层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> [][] array,<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = array.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len &gt;= <span class="number">0</span>)&amp;&amp; (i &lt; array[<span class="number">0</span>].length))&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[len][i] &gt; target)&#123;</span><br><span class="line">                len--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[len][i] &lt; target)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 基础算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法,面试题 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
